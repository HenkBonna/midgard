import bpy
from mathutils import Color


#=====================================================
#            CAT RIG - RIGIFY ZOO
#=====================================================
 
 
 

# Add Rigify Rig - Cat
class OBJECT_OT_cat_rigify_zoo_ra(bpy.types.Operator):
    '''Cat Rig'''
    bl_idname = "object.cat_rigify_zoo_ra"
    bl_label = "Cat"
    bl_options = {'REGISTER', 'UNDO'}

 
    def execute(self, context):
        
        # Rename Existing Rigify UI Script
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_new_name.py'


#=============================================
# Create "Cat" GEO
#=============================================


 

        # Rename Existing Armature with name 'rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'Rename this rig'    
        

        # Rename Existing Armature with name 'cat_rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('cat_rig'):
                arm.name = 'cat rig next'                 


        current_mode = bpy.context.mode
        if current_mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    

 
        # Rename "Cat_GEO"
        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name == 'Cat_GEO':
                o.name = 'Cat'


        # Set active 'Scene Collection'
        scene_collection = bpy.context.view_layer.layer_collection
        bpy.context.view_layer.active_layer_collection = scene_collection




# Create "Cat" Mesh




        verts = ((0.031410250812768936, 0.11687658727169037, 0.21660198271274567),
                 (0.018705036491155624, 0.11171044409275055, 0.16636551916599274),
                 (0.018967188894748688, 0.11686922609806061, 0.2699521780014038),
                 (0.016499843448400497, 0.16837111115455627, 0.18438899517059326),
                 (0.02468928135931492, 0.15557609498500824, 0.2541907727718353),
                 (0.02701598033308983, 0.17715613543987274, 0.2155696302652359),
                 (0.0242819432169199, 0.06826859712600708, 0.26882967352867126),
                 (0.02036270871758461, 0.07540510594844818, 0.1485317200422287),
                 (0.03584269434213638, 0.07154829800128937, 0.21367721259593964),
                 (0.02777823619544506, 0.013090093620121479, 0.13648635149002075),
                 (0.026487674564123154, 0.00819848570972681, 0.26342567801475525),
                 (0.04035208746790886, 0.010404972359538078, 0.2091967910528183),
                 (0.0400526188313961, -0.053693987429142, 0.20814624428749084),
                 (0.025675052776932716, -0.05537917837500572, 0.26319611072540283),
                 (0.027983592823147774, -0.05254682898521423, 0.14422093331813812),
                 (0.028700198978185654, -0.11521454155445099, 0.16209572553634644),
                 (0.026213690638542175, -0.12815117835998535, 0.26463061571121216),
                 (0.032030992209911346, -0.1469080150127411, 0.20985335111618042),
                 (-0.031410250812768936, 0.11687658727169037, 0.21660198271274567),
                 (-0.018705036491155624, 0.11171044409275055, 0.16636551916599274),
                 (-0.018967188894748688, 0.11686922609806061, 0.2699521780014038),
                 (0.0, 0.1186516135931015, 0.2732623815536499),
                 (0.0, 0.1807987540960312, 0.21702434122562408),
                 (0.0, 0.15785174071788788, 0.2573854923248291),
                 (-0.016499843448400497, 0.16837111115455627, 0.18438899517059326),
                 (-0.02468928135931492, 0.15557609498500824, 0.2541907727718353),
                 (-0.02701598033308983, 0.17715613543987274, 0.2155696302652359),
                 (-0.0242819432169199, 0.06826859712600708, 0.26882967352867126),
                 (0.0, 0.06842844188213348, 0.272748738527298),
                 (-0.02036270871758461, 0.07540510594844818, 0.1485317200422287),
                 (-0.03584269434213638, 0.07154829800128937, 0.21367721259593964),
                 (-0.02777823619544506, 0.013090093620121479, 0.13648635149002075),
                 (-0.026487674564123154, 0.00819848570972681, 0.26342567801475525),
                 (-0.04035208746790886, 0.010404972359538078, 0.2091967910528183),
                 (0.0, 0.00799291767179966, 0.2673146724700928),
                 (0.0, 0.07609038054943085, 0.14466971158981323),
                 (-0.0400526188313961, -0.053693987429142, 0.20814624428749084),
                 (-0.025675052776932716, -0.05537917837500572, 0.26319611072540283),
                 (-0.027983592823147774, -0.05254682898521423, 0.14422093331813812),
                 (0.0, -0.05262225121259689, 0.1403813660144806),
                 (0.0, -0.11745085567235947, 0.15887336432933807),
                 (-0.028700198978185654, -0.11521454155445099, 0.16209572553634644),
                 (-0.026213690638542175, -0.12815117835998535, 0.26463061571121216),
                 (-0.032030992209911346, -0.1469080150127411, 0.20985335111618042),
                 (0.0, 0.11327327787876129, 0.16319045424461365),
                 (0.0, 0.17180684208869934, 0.18249675631523132),
                 (0.0, 0.012922866269946098, 0.1325955092906952),
                 (0.0, -0.13082601130008698, 0.2674994170665741),
                 (0.0, -0.15073323249816895, 0.20898588001728058),
                 (0.0, -0.055552348494529724, 0.2662769556045532),
                 (-0.013835319317877293, -0.254715234041214, 0.26249444484710693),
                 (-0.024948494508862495, -0.2583003044128418, 0.32061004638671875),
                 (-0.03212587535381317, -0.1916377693414688, 0.27322453260421753),
                 (-0.032888464629650116, -0.1812254637479782, 0.33018961548805237),
                 (0.013835319317877293, -0.254715234041214, 0.26249444484710693),
                 (0.024948494508862495, -0.2583003044128418, 0.32061004638671875),
                 (0.03212587535381317, -0.1916377693414688, 0.27322453260421753),
                 (0.032888464629650116, -0.1812254637479782, 0.33018961548805237),
                 (-0.027175748720765114, -0.21565818786621094, 0.2544834613800049),
                 (-0.035379476845264435, -0.2235621213912964, 0.34282389283180237),
                 (0.027175748720765114, -0.21565818786621094, 0.2544834613800049),
                 (0.035379476845264435, -0.2235621213912964, 0.34282389283180237),
                 (-0.02605649083852768, -0.2632595896720886, 0.29090815782546997),
                 (-0.03708811476826668, -0.17558836936950684, 0.29437410831451416),
                 (0.03708811476826668, -0.17558836936950684, 0.29437410831451416),
                 (0.02605649083852768, -0.2632595896720886, 0.29090815782546997),
                 (0.05833004042506218, -0.2203308492898941, 0.2972019910812378),
                 (-0.05833004042506218, -0.2203308492898941, 0.2972019910812378),
                 (0.0, -0.18369200825691223, 0.26473572850227356),
                 (0.0, -0.17720340192317963, 0.3388923406600952),
                 (0.0, -0.2589873671531677, 0.258222371339798),
                 (0.0, -0.26280859112739563, 0.32882657647132874),
                 (0.0, -0.22505535185337067, 0.34990325570106506),
                 (0.0, -0.21565817296504974, 0.24844177067279816),
                 (0.0, -0.2746160626411438, 0.29090815782546997),
                 (0.0, -0.1646304726600647, 0.29468822479248047),
                 (0.014275738969445229, -0.2182069718837738, 0.3281196355819702),
                 (0.02817281149327755, -0.22663825750350952, 0.3619215786457062),
                 (0.016969123855233192, -0.20266826450824738, 0.32981306314468384),
                 (0.029001347720623016, -0.22161518037319183, 0.3639211654663086),
                 (0.0359300822019577, -0.22153300046920776, 0.31968870759010315),
                 (0.05036028102040291, -0.22843576967716217, 0.35234224796295166),
                 (0.03553612530231476, -0.2058444321155548, 0.32056713104248047),
                 (0.05066734179854393, -0.22178494930267334, 0.3547649085521698),
                 (0.02691902592778206, -0.2011658102273941, 0.32576629519462585),
                 (0.04343942925333977, -0.22961322963237762, 0.36867329478263855),
                 (0.025715505704283714, -0.22055943310260773, 0.32396048307418823),
                 (0.04348384961485863, -0.23329435288906097, 0.36668363213539124),
                 (0.020364919677376747, -0.22216641902923584, 0.3511488735675812),
                 (0.022260673344135284, -0.21321217715740204, 0.3540142774581909),
                 (0.05084545537829399, -0.21412393450737, 0.3413449823856354),
                 (0.04872339963912964, -0.22409425675868988, 0.3389653265476227),
                 (0.03498605266213417, -0.22364869713783264, 0.3461676836013794),
                 (0.03713439777493477, -0.21375425159931183, 0.3487420380115509),
                 (-0.014275738969445229, -0.2182069718837738, 0.3281196355819702),
                 (-0.02817281149327755, -0.22663825750350952, 0.3619215786457062),
                 (-0.016969123855233192, -0.20266826450824738, 0.32981306314468384),
                 (-0.029001347720623016, -0.22161518037319183, 0.3639211654663086),
                 (-0.0359300822019577, -0.22153300046920776, 0.31968870759010315),
                 (-0.05036028102040291, -0.22843576967716217, 0.35234224796295166),
                 (-0.03553612530231476, -0.2058444321155548, 0.32056713104248047),
                 (-0.05066734179854393, -0.22178494930267334, 0.3547649085521698),
                 (-0.02691902592778206, -0.2011658102273941, 0.32576629519462585),
                 (-0.04343942925333977, -0.22961322963237762, 0.36867329478263855),
                 (-0.025715505704283714, -0.22055943310260773, 0.32396048307418823),
                 (-0.04348384961485863, -0.23329435288906097, 0.36668363213539124),
                 (-0.020364919677376747, -0.22216641902923584, 0.3511488735675812),
                 (-0.022260673344135284, -0.21321217715740204, 0.3540142774581909),
                 (-0.05084545537829399, -0.21412393450737, 0.3413449823856354),
                 (-0.04872339963912964, -0.22409425675868988, 0.3389653265476227),
                 (-0.03498605266213417, -0.22364869713783264, 0.3461676836013794),
                 (-0.03713439777493477, -0.21375425159931183, 0.3487420380115509),
                 (-0.008898801170289516, 0.161218523979187, 0.23151499032974243),
                 (-0.008898801170289516, 0.1648934781551361, 0.24964915215969086),
                 (-0.008898801170289516, 0.20794565975666046, 0.22100794315338135),
                 (-0.008898801170289516, 0.2124636024236679, 0.23783014714717865),
                 (0.008898801170289516, 0.161218523979187, 0.23151499032974243),
                 (0.008898801170289516, 0.1648934781551361, 0.24964915215969086),
                 (0.008898801170289516, 0.20794565975666046, 0.22100794315338135),
                 (0.008898801170289516, 0.2124636024236679, 0.23783014714717865),
                 (-0.008898801170289516, 0.2089843600988388, 0.2206830233335495),
                 (-0.008898801170289516, 0.21393825113773346, 0.2375466525554657),
                 (-0.008898801170289516, 0.27265727519989014, 0.19882456958293915),
                 (-0.008898801170289516, 0.27887341380119324, 0.21419650316238403),
                 (0.008898801170289516, 0.2089843600988388, 0.2206830233335495),
                 (0.008898801170289516, 0.21393825113773346, 0.2375466525554657),
                 (0.008898801170289516, 0.27265727519989014, 0.19882456958293915),
                 (0.008898801170289516, 0.27887341380119324, 0.21419650316238403),
                 (-0.008279922418296337, 0.2744136452674866, 0.19826272130012512),
                 (-0.008279922418296337, 0.2804161310195923, 0.21364006400108337),
                 (-0.008279922418296337, 0.3350490927696228, 0.16705317795276642),
                 (-0.008279922418296337, 0.34273797273635864, 0.18187321722507477),
                 (0.008279922418296337, 0.2744136452674866, 0.19826272130012512),
                 (0.008279922418296337, 0.2804161310195923, 0.21364006400108337),
                 (0.008279922418296337, 0.3350490927696228, 0.16705317795276642),
                 (0.008279922418296337, 0.34273797273635864, 0.18187321722507477),
                 (-0.0076606012880802155, 0.33601608872413635, 0.16641144454479218),
                 (-0.0076606012880802155, 0.3437080979347229, 0.18129631876945496),
                 (-0.005073946435004473, 0.4002460539340973, 0.1322336345911026),
                 (-0.005073946435004473, 0.40507689118385315, 0.14115791022777557),
                 (0.0076606012880802155, 0.33601608872413635, 0.16641144454479218),
                 (0.0076606012880802155, 0.3437080979347229, 0.18129631876945496),
                 (0.005073946435004473, 0.4002460539340973, 0.1322336345911026),
                 (0.005073946435004473, 0.40507689118385315, 0.14115791022777557),
                 (0.025906579568982124, 0.09914379566907883, 0.11491279304027557),
                 (0.025906579568982124, 0.13709095120429993, 0.12089847773313522),
                 (0.04908919334411621, 0.09914379566907883, 0.11491279304027557),
                 (0.04908919334411621, 0.13709095120429993, 0.12089847773313522),
                 (0.02954699471592903, 0.16775688529014587, 0.06475362181663513),
                 (0.02728843502700329, 0.09796135872602463, 0.11414320766925812),
                 (0.030248766764998436, 0.1909540295600891, 0.0674847736954689),
                 (0.025171402841806412, 0.13480080664157867, 0.13301002979278564),
                 (0.043165743350982666, 0.16775688529014587, 0.06475362181663513),
                 (0.04757273197174072, 0.09796135872602463, 0.11414320766925812),
                 (0.04246396943926811, 0.1909540295600891, 0.0674847736954689),
                 (0.048834364861249924, 0.13480080664157867, 0.13340021669864655),
                 (0.026165949180722237, 0.0920044332742691, 0.15911827981472015),
                 (0.0279980655759573, 0.15296241641044617, 0.15090228617191315),
                 (0.048380136489868164, 0.15296241641044617, 0.15090228617191315),
                 (0.05085418373346329, 0.0920044332742691, 0.15911827981472015),
                 (0.026794299483299255, 0.16841407120227814, 0.20923924446105957),
                 (0.02775750309228897, 0.16667993366718292, 0.17955297231674194),
                 (0.0466744489967823, 0.16667993366718292, 0.17955297231674194),
                 (0.044874776154756546, 0.16841407120227814, 0.20923924446105957),
                 (0.02239588461816311, 0.09416662156581879, 0.20175908505916595),
                 (0.022486338391900063, 0.0984683632850647, 0.2262668013572693),
                 (0.04937395080924034, 0.0984683632850647, 0.2262668013572693),
                 (0.051353100687265396, 0.09416662156581879, 0.20175908505916595),
                 (0.04694598540663719, 0.13454914093017578, 0.2328961342573166),
                 (0.024640318006277084, 0.13454914093017578, 0.2328961342573166),
                 (0.025906579568982124, 0.11850008368492126, 0.11810987442731857),
                 (0.04908919334411621, 0.11850008368492126, 0.11810987442731857),
                 (0.05085418373346329, 0.12226773798465729, 0.15739327669143677),
                 (0.026165949180722237, 0.12226773798465729, 0.15739327669143677),
                 (0.04926880821585655, 0.12833216786384583, 0.19482576847076416),
                 (0.025257082656025887, 0.12827861309051514, 0.19467885792255402),
                 (0.03749788552522659, 0.1384003758430481, 0.1182570531964302),
                 (0.03749788552522659, 0.09785664081573486, 0.11405787616968155),
                 (0.03851006552577019, 0.08910326659679413, 0.15964248776435852),
                 (0.03851006552577019, 0.1554410755634308, 0.14930607378482819),
                 (0.03646382316946983, 0.17096252739429474, 0.2107214629650116),
                 (0.037093717604875565, 0.1695588380098343, 0.17891758680343628),
                 (0.03638105094432831, 0.09773164987564087, 0.22912143170833588),
                 (0.03687449172139168, 0.09181319177150726, 0.20353475213050842),
                 (0.03642243519425392, 0.13546156883239746, 0.23569954931735992),
                 (0.03749788552522659, 0.1183546781539917, 0.11516530066728592),
                 (0.027975356206297874, 0.1423565298318863, 0.08346688002347946),
                 (0.02568734809756279, 0.15893548727035522, 0.10222309827804565),
                 (0.04779557138681412, 0.15881294012069702, 0.10241608321666718),
                 (0.04601707309484482, 0.1423565149307251, 0.08346688002347946),
                 (0.026968685910105705, 0.1263626515865326, 0.0943986177444458),
                 (0.024590061977505684, 0.14825589954853058, 0.11719870567321777),
                 (0.04914483428001404, 0.14812636375427246, 0.11746030300855637),
                 (0.04744241014122963, 0.1263626515865326, 0.0943986177444458),
                 (0.02840905636548996, 0.17255251109600067, 0.0865679457783699),
                 (0.04470157250761986, 0.17248111963272095, 0.08666419982910156),
                 (0.04428226128220558, 0.15912854671478271, 0.0716014876961708),
                 (0.02909158542752266, 0.15912854671478271, 0.0716014876961708),
                 (0.0231158509850502, 0.12542566657066345, 5.058944225311279e-05),
                 (0.0231158509850502, 0.12782657146453857, 0.01053650677204132),
                 (0.027371732518076897, 0.15958894789218903, 5.058944225311279e-05),
                 (0.027371732518076897, 0.15618789196014404, 0.011458237655460835),
                 (0.04945433884859085, 0.12542566657066345, 5.058944225311279e-05),
                 (0.04945433884859085, 0.12782657146453857, 0.01053650677204132),
                 (0.045198459178209305, 0.15958894789218903, 5.058944225311279e-05),
                 (0.045198459178209305, 0.15618789196014404, 0.011458237655460835),
                 (0.02954699471592903, 0.15228819847106934, 0.011950281448662281),
                 (0.02818765491247177, 0.16756536066532135, 0.06816750019788742),
                 (0.02954699471592903, 0.16241851449012756, 0.007408258505165577),
                 (0.02818765491247177, 0.19312292337417603, 0.06910043954849243),
                 (0.043165743350982666, 0.15228819847106934, 0.011950281448662281),
                 (0.044525083154439926, 0.16756536066532135, 0.06816750019788742),
                 (0.043165743350982666, 0.16241851449012756, 0.007408258505165577),
                 (0.044525083154439926, 0.19312292337417603, 0.06910043954849243),
                 (0.0231158509850502, 0.14040404558181763, 5.058944225311279e-05),
                 (0.0231158509850502, 0.1398484706878662, 0.014939606189727783),
                 (0.04945433884859085, 0.14040404558181763, 5.058944225311279e-05),
                 (0.04945433884859085, 0.1398484706878662, 0.014939606189727783),
                 (0.029520291835069656, 0.1622563898563385, 0.041334133595228195),
                 (0.029520291835069656, 0.17815685272216797, 0.03565105423331261),
                 (0.04319244623184204, 0.17815685272216797, 0.03565105423331261),
                 (0.04319244623184204, 0.1622563898563385, 0.041334133595228195),
                 (0.029381755739450455, 0.16576796770095825, 0.058086659759283066),
                 (0.029381755739450455, 0.18535111844539642, 0.050647009164094925),
                 (0.04333098232746124, 0.18535111844539642, 0.050647009164094925),
                 (0.04333098232746124, 0.16576796770095825, 0.058086659759283066),
                 (0.02954699657857418, 0.16981056332588196, 0.019576258957386017),
                 (0.04316573962569237, 0.16981056332588196, 0.019576258957386017),
                 (0.04316573962569237, 0.1571972519159317, 0.024609997868537903),
                 (0.02954699657857418, 0.1571972519159317, 0.024609997868537903),
                 (-0.025906579568982124, 0.09914379566907883, 0.11491279304027557),
                 (-0.025906579568982124, 0.13709095120429993, 0.12089847773313522),
                 (-0.04908919334411621, 0.09914379566907883, 0.11491279304027557),
                 (-0.04908919334411621, 0.13709095120429993, 0.12089847773313522),
                 (-0.02954699471592903, 0.16775688529014587, 0.06475362181663513),
                 (-0.02728843502700329, 0.09796135872602463, 0.11414320766925812),
                 (-0.030248766764998436, 0.1909540295600891, 0.0674847736954689),
                 (-0.025171402841806412, 0.13480080664157867, 0.13301002979278564),
                 (-0.043165743350982666, 0.16775688529014587, 0.06475362181663513),
                 (-0.04757273197174072, 0.09796135872602463, 0.11414320766925812),
                 (-0.04246396943926811, 0.1909540295600891, 0.0674847736954689),
                 (-0.048834364861249924, 0.13480080664157867, 0.13340021669864655),
                 (-0.026165949180722237, 0.0920044332742691, 0.15911827981472015),
                 (-0.0279980655759573, 0.15296241641044617, 0.15090228617191315),
                 (-0.048380136489868164, 0.15296241641044617, 0.15090228617191315),
                 (-0.05085418373346329, 0.0920044332742691, 0.15911827981472015),
                 (-0.026794299483299255, 0.16841407120227814, 0.20923924446105957),
                 (-0.02775750309228897, 0.16667993366718292, 0.17955297231674194),
                 (-0.0466744489967823, 0.16667993366718292, 0.17955297231674194),
                 (-0.044874776154756546, 0.16841407120227814, 0.20923924446105957),
                 (-0.02239588461816311, 0.09416662156581879, 0.20175908505916595),
                 (-0.022486338391900063, 0.0984683632850647, 0.2262668013572693),
                 (-0.04937395080924034, 0.0984683632850647, 0.2262668013572693),
                 (-0.051353100687265396, 0.09416662156581879, 0.20175908505916595),
                 (-0.04694598540663719, 0.13454914093017578, 0.2328961342573166),
                 (-0.024640318006277084, 0.13454914093017578, 0.2328961342573166),
                 (-0.025906579568982124, 0.11850008368492126, 0.11810987442731857),
                 (-0.04908919334411621, 0.11850008368492126, 0.11810987442731857),
                 (-0.05085418373346329, 0.12226773798465729, 0.15739327669143677),
                 (-0.026165949180722237, 0.12226773798465729, 0.15739327669143677),
                 (-0.04926880821585655, 0.12833216786384583, 0.19482576847076416),
                 (-0.025257082656025887, 0.12827861309051514, 0.19467885792255402),
                 (-0.03749788552522659, 0.1384003758430481, 0.1182570531964302),
                 (-0.03749788552522659, 0.09785664081573486, 0.11405787616968155),
                 (-0.03851006552577019, 0.08910326659679413, 0.15964248776435852),
                 (-0.03851006552577019, 0.1554410755634308, 0.14930607378482819),
                 (-0.03646382316946983, 0.17096252739429474, 0.2107214629650116),
                 (-0.037093717604875565, 0.1695588380098343, 0.17891758680343628),
                 (-0.03638105094432831, 0.09773164987564087, 0.22912143170833588),
                 (-0.03687449172139168, 0.09181319177150726, 0.20353475213050842),
                 (-0.03642243519425392, 0.13546156883239746, 0.23569954931735992),
                 (-0.03749788552522659, 0.1183546781539917, 0.11516530066728592),
                 (-0.027975356206297874, 0.1423565298318863, 0.08346688002347946),
                 (-0.02568734809756279, 0.15893548727035522, 0.10222309827804565),
                 (-0.04779557138681412, 0.15881294012069702, 0.10241608321666718),
                 (-0.04601707309484482, 0.1423565149307251, 0.08346688002347946),
                 (-0.026968685910105705, 0.1263626515865326, 0.0943986177444458),
                 (-0.024590061977505684, 0.14825589954853058, 0.11719870567321777),
                 (-0.04914483428001404, 0.14812636375427246, 0.11746030300855637),
                 (-0.04744241014122963, 0.1263626515865326, 0.0943986177444458),
                 (-0.02840905636548996, 0.17255251109600067, 0.0865679457783699),
                 (-0.04470157250761986, 0.17248111963272095, 0.08666419982910156),
                 (-0.04428226128220558, 0.15912854671478271, 0.0716014876961708),
                 (-0.02909158542752266, 0.15912854671478271, 0.0716014876961708),
                 (-0.0231158509850502, 0.12542566657066345, 5.058944225311279e-05),
                 (-0.0231158509850502, 0.12782657146453857, 0.01053650677204132),
                 (-0.027371732518076897, 0.15958894789218903, 5.058944225311279e-05),
                 (-0.027371732518076897, 0.15618789196014404, 0.011458237655460835),
                 (-0.04945433884859085, 0.12542566657066345, 5.058944225311279e-05),
                 (-0.04945433884859085, 0.12782657146453857, 0.01053650677204132),
                 (-0.045198459178209305, 0.15958894789218903, 5.058944225311279e-05),
                 (-0.045198459178209305, 0.15618789196014404, 0.011458237655460835),
                 (-0.02954699471592903, 0.15228819847106934, 0.011950281448662281),
                 (-0.02818765491247177, 0.16756536066532135, 0.06816750019788742),
                 (-0.02954699471592903, 0.16241851449012756, 0.007408258505165577),
                 (-0.02818765491247177, 0.19312292337417603, 0.06910043954849243),
                 (-0.043165743350982666, 0.15228819847106934, 0.011950281448662281),
                 (-0.044525083154439926, 0.16756536066532135, 0.06816750019788742),
                 (-0.043165743350982666, 0.16241851449012756, 0.007408258505165577),
                 (-0.044525083154439926, 0.19312292337417603, 0.06910043954849243),
                 (-0.0231158509850502, 0.14040404558181763, 5.058944225311279e-05),
                 (-0.0231158509850502, 0.1398484706878662, 0.014939606189727783),
                 (-0.04945433884859085, 0.14040404558181763, 5.058944225311279e-05),
                 (-0.04945433884859085, 0.1398484706878662, 0.014939606189727783),
                 (-0.029520291835069656, 0.1622563898563385, 0.041334133595228195),
                 (-0.029520291835069656, 0.17815685272216797, 0.03565105423331261),
                 (-0.04319244623184204, 0.17815685272216797, 0.03565105423331261),
                 (-0.04319244623184204, 0.1622563898563385, 0.041334133595228195),
                 (-0.029381755739450455, 0.16576796770095825, 0.058086659759283066),
                 (-0.029381755739450455, 0.18535111844539642, 0.050647009164094925),
                 (-0.04333098232746124, 0.18535111844539642, 0.050647009164094925),
                 (-0.04333098232746124, 0.16576796770095825, 0.058086659759283066),
                 (-0.02954699657857418, 0.16981056332588196, 0.019576258957386017),
                 (-0.04316573962569237, 0.16981056332588196, 0.019576258957386017),
                 (-0.04316573962569237, 0.1571972519159317, 0.024609997868537903),
                 (-0.02954699657857418, 0.1571972519159317, 0.024609997868537903),
                 (0.025287121534347534, -0.13910061120986938, 5.058944225311279e-05),
                 (0.025287121534347534, -0.1363637000322342, 0.012249237857758999),
                 (0.029096990823745728, -0.1057496890425682, 5.058944225311279e-05),
                 (0.029096990823745728, -0.10953471809625626, 0.010752543807029724),
                 (0.05162561684846878, -0.13910061120986938, 5.058944225311279e-05),
                 (0.05162561684846878, -0.1363637000322342, 0.012249237857758999),
                 (0.04781574383378029, -0.1057496890425682, 5.058944225311279e-05),
                 (0.04781574383378029, -0.10953471809625626, 0.010752543807029724),
                 (0.028894376009702682, -0.08554443717002869, 0.10155855119228363),
                 (0.028894376009702682, -0.06016729772090912, 0.1087966188788414),
                 (0.048018354922533035, -0.08554443717002869, 0.10155855119228363),
                 (0.048018354922533035, -0.06016729772090912, 0.1087966188788414),
                 (0.032933320850133896, -0.09540149569511414, 0.03742567449808121),
                 (0.02889438159763813, -0.08664654940366745, 0.10445424914360046),
                 (0.032933320850133896, -0.08146827667951584, 0.034933846443891525),
                 (0.02889438159763813, -0.05819140002131462, 0.11109151691198349),
                 (0.04397941008210182, -0.09540149569511414, 0.03742567449808121),
                 (0.04801835119724274, -0.08664654940366745, 0.10445424914360046),
                 (0.04397941008210182, -0.08146827667951584, 0.034933846443891525),
                 (0.04801835119724274, -0.05819140002131462, 0.11109151691198349),
                 (0.0309761930257082, -0.11193344742059708, 0.008036665618419647),
                 (0.03090546652674675, -0.09541996568441391, 0.037943873554468155),
                 (0.0309761930257082, -0.10437039285898209, 0.0022441581822931767),
                 (0.0319417268037796, -0.07982588559389114, 0.035861581563949585),
                 (0.04593654349446297, -0.11193344742059708, 0.008036665618419647),
                 (0.046007268130779266, -0.09541996568441391, 0.037943873554468155),
                 (0.04593654349446297, -0.10437039285898209, 0.0022441581822931767),
                 (0.044971004128456116, -0.07982588559389114, 0.035861581563949585),
                 (0.025287121534347534, -0.12412373721599579, 5.058944225311279e-05),
                 (0.025287121534347534, -0.12425573915243149, 0.01518941018730402),
                 (0.05162561684846878, -0.12412373721599579, 5.058944225311279e-05),
                 (0.05162561684846878, -0.12425573915243149, 0.01518941018730402),
                 (0.031850170344114304, -0.10597565770149231, 0.1426536738872528),
                 (0.031850170344114304, -0.07612846046686172, 0.15297266840934753),
                 (0.048018354922533035, -0.07612846046686172, 0.15297266840934753),
                 (0.048018354922533035, -0.10597565770149231, 0.1426536738872528),
                 (0.029512526467442513, -0.1301726996898651, 0.18322250247001648),
                 (0.03145354613661766, -0.12789510190486908, 0.2005833089351654),
                 (0.03145354613661766, -0.10268445312976837, 0.20794470608234406),
                 (0.029556812718510628, -0.08638247847557068, 0.19521872699260712),
                 (0.0461709089577198, -0.12789510190486908, 0.2005833089351654),
                 (0.048018354922533035, -0.1301726996898651, 0.18322250247001648),
                 (0.048018354922533035, -0.08638247847557068, 0.19521872699260712),
                 (0.0461709089577198, -0.10268445312976837, 0.20794470608234406),
                 (0.0461709089577198, -0.11620961874723434, 0.20904718339443207),
                 (0.03145354613661766, -0.11620961874723434, 0.20904718339443207),
                 (0.028894376009702682, -0.07350495457649231, 0.1047743409872055),
                 (0.048018354922533035, -0.07350495457649231, 0.1047743409872055),
                 (0.048018354922533035, -0.09105206280946732, 0.14781317114830017),
                 (0.031850170344114304, -0.09105206280946732, 0.14781317114830017),
                 (0.048018354922533035, -0.10827843844890594, 0.1890845149755478),
                 (0.048018354922533035, -0.11890113353729248, 0.1625705361366272),
                 (0.030681347474455833, -0.11890113353729248, 0.1625705361366272),
                 (0.03070349246263504, -0.0812554731965065, 0.17409570515155792),
                 (0.048018354922533035, -0.0812554731965065, 0.17409570515155792),
                 (0.048018354922533035, -0.09966524690389633, 0.16844883561134338),
                 (0.030372273176908493, -0.06841670721769333, 0.13101905584335327),
                 (0.048018354922533035, -0.06841670721769333, 0.13101905584335327),
                 (0.048018354922533035, -0.09493054449558258, 0.12210611253976822),
                 (0.030372273176908493, -0.09493054449558258, 0.12210611253976822),
                 (0.030372273176908493, -0.08227850496768951, 0.12629374861717224),
                 (0.048018354922533035, -0.08227850496768951, 0.12629374861717224),
                 (0.03141186013817787, -0.08866094052791595, 0.0767240822315216),
                 (0.03141186013817787, -0.07044771313667297, 0.07439862936735153),
                 (0.04550087824463844, -0.07044771313667297, 0.07439862936735153),
                 (0.04550087824463844, -0.08866094052791595, 0.0767240822315216),
                 (0.03204008936882019, -0.07439076155424118, 0.06265787780284882),
                 (0.044872645288705826, -0.07439076155424118, 0.06265787780284882),
                 (0.044872645288705826, -0.08993876725435257, 0.06596117466688156),
                 (0.03204008936882019, -0.08993876725435257, 0.06596117466688156),
                 (0.03242845460772514, -0.0775655210018158, 0.050725266337394714),
                 (0.044484276324510574, -0.0775655210018158, 0.050725266337394714),
                 (0.044484276324510574, -0.09180379658937454, 0.0536700077354908),
                 (0.03242845460772514, -0.09180379658937454, 0.0536700077354908),
                 (0.030105454847216606, -0.08759652078151703, 0.091441810131073),
                 (0.030105454847216606, -0.06474824994802475, 0.08974936604499817),
                 (0.04680728167295456, -0.06474824994802475, 0.08974936604499817),
                 (0.04680728167295456, -0.08759652078151703, 0.091441810131073),
                 (0.03069266304373741, -0.09966417402029037, 0.1684599071741104),
                 (0.029679665341973305, -0.10825981199741364, 0.18904584646224976),
                 (0.030933016911149025, -0.10064534842967987, 0.02665354311466217),
                 (0.03156564012169838, -0.08958649635314941, 0.021714290603995323),
                 (0.04534709453582764, -0.08958649635314941, 0.021714290603995323),
                 (0.04597972333431244, -0.10064534842967987, 0.02665354311466217),
                 (0.03133329004049301, -0.09609410166740417, 0.013230275362730026),
                 (0.045579444617033005, -0.09609410166740417, 0.013230275362730026),
                 (0.045962702482938766, -0.10541016608476639, 0.01872982643544674),
                 (0.030950035899877548, -0.10541016608476639, 0.01872982643544674),
                 (-0.025287121534347534, -0.13910061120986938, 5.058944225311279e-05),
                 (-0.025287121534347534, -0.1363637000322342, 0.012249237857758999),
                 (-0.029096990823745728, -0.1057496890425682, 5.058944225311279e-05),
                 (-0.029096990823745728, -0.10953471809625626, 0.010752543807029724),
                 (-0.05162561684846878, -0.13910061120986938, 5.058944225311279e-05),
                 (-0.05162561684846878, -0.1363637000322342, 0.012249237857758999),
                 (-0.04781574383378029, -0.1057496890425682, 5.058944225311279e-05),
                 (-0.04781574383378029, -0.10953471809625626, 0.010752543807029724),
                 (-0.028894376009702682, -0.08554443717002869, 0.10155855119228363),
                 (-0.028894376009702682, -0.06016729772090912, 0.1087966188788414),
                 (-0.048018354922533035, -0.08554443717002869, 0.10155855119228363),
                 (-0.048018354922533035, -0.06016729772090912, 0.1087966188788414),
                 (-0.032933320850133896, -0.09540149569511414, 0.03742567449808121),
                 (-0.02889438159763813, -0.08664654940366745, 0.10445424914360046),
                 (-0.032933320850133896, -0.08146827667951584, 0.034933846443891525),
                 (-0.02889438159763813, -0.05819140002131462, 0.11109151691198349),
                 (-0.04397941008210182, -0.09540149569511414, 0.03742567449808121),
                 (-0.04801835119724274, -0.08664654940366745, 0.10445424914360046),
                 (-0.04397941008210182, -0.08146827667951584, 0.034933846443891525),
                 (-0.04801835119724274, -0.05819140002131462, 0.11109151691198349),
                 (-0.0309761930257082, -0.11193344742059708, 0.008036665618419647),
                 (-0.03090546652674675, -0.09541996568441391, 0.037943873554468155),
                 (-0.0309761930257082, -0.10437039285898209, 0.0022441581822931767),
                 (-0.0319417268037796, -0.07982588559389114, 0.035861581563949585),
                 (-0.04593654349446297, -0.11193344742059708, 0.008036665618419647),
                 (-0.046007268130779266, -0.09541996568441391, 0.037943873554468155),
                 (-0.04593654349446297, -0.10437039285898209, 0.0022441581822931767),
                 (-0.044971004128456116, -0.07982588559389114, 0.035861581563949585),
                 (-0.025287121534347534, -0.12412373721599579, 5.058944225311279e-05),
                 (-0.025287121534347534, -0.12425573915243149, 0.01518941018730402),
                 (-0.05162561684846878, -0.12412373721599579, 5.058944225311279e-05),
                 (-0.05162561684846878, -0.12425573915243149, 0.01518941018730402),
                 (-0.031850170344114304, -0.10597565770149231, 0.1426536738872528),
                 (-0.031850170344114304, -0.07612846046686172, 0.15297266840934753),
                 (-0.048018354922533035, -0.07612846046686172, 0.15297266840934753),
                 (-0.048018354922533035, -0.10597565770149231, 0.1426536738872528),
                 (-0.029512526467442513, -0.1301726996898651, 0.18322250247001648),
                 (-0.03145354613661766, -0.12789510190486908, 0.2005833089351654),
                 (-0.03145354613661766, -0.10268445312976837, 0.20794470608234406),
                 (-0.029556812718510628, -0.08638247847557068, 0.19521872699260712),
                 (-0.0461709089577198, -0.12789510190486908, 0.2005833089351654),
                 (-0.048018354922533035, -0.1301726996898651, 0.18322250247001648),
                 (-0.048018354922533035, -0.08638247847557068, 0.19521872699260712),
                 (-0.0461709089577198, -0.10268445312976837, 0.20794470608234406),
                 (-0.0461709089577198, -0.11620961874723434, 0.20904718339443207),
                 (-0.03145354613661766, -0.11620961874723434, 0.20904718339443207),
                 (-0.028894376009702682, -0.07350495457649231, 0.1047743409872055),
                 (-0.048018354922533035, -0.07350495457649231, 0.1047743409872055),
                 (-0.048018354922533035, -0.09105206280946732, 0.14781317114830017),
                 (-0.031850170344114304, -0.09105206280946732, 0.14781317114830017),
                 (-0.048018354922533035, -0.10827843844890594, 0.1890845149755478),
                 (-0.048018354922533035, -0.11890113353729248, 0.1625705361366272),
                 (-0.030681347474455833, -0.11890113353729248, 0.1625705361366272),
                 (-0.03070349246263504, -0.0812554731965065, 0.17409570515155792),
                 (-0.048018354922533035, -0.0812554731965065, 0.17409570515155792),
                 (-0.048018354922533035, -0.09966524690389633, 0.16844883561134338),
                 (-0.030372273176908493, -0.06841670721769333, 0.13101905584335327),
                 (-0.048018354922533035, -0.06841670721769333, 0.13101905584335327),
                 (-0.048018354922533035, -0.09493054449558258, 0.12210611253976822),
                 (-0.030372273176908493, -0.09493054449558258, 0.12210611253976822),
                 (-0.030372273176908493, -0.08227850496768951, 0.12629374861717224),
                 (-0.048018354922533035, -0.08227850496768951, 0.12629374861717224),
                 (-0.03141186013817787, -0.08866094052791595, 0.0767240822315216),
                 (-0.03141186013817787, -0.07044771313667297, 0.07439862936735153),
                 (-0.04550087824463844, -0.07044771313667297, 0.07439862936735153),
                 (-0.04550087824463844, -0.08866094052791595, 0.0767240822315216),
                 (-0.03204008936882019, -0.07439076155424118, 0.06265787780284882),
                 (-0.044872645288705826, -0.07439076155424118, 0.06265787780284882),
                 (-0.044872645288705826, -0.08993876725435257, 0.06596117466688156),
                 (-0.03204008936882019, -0.08993876725435257, 0.06596117466688156),
                 (-0.03242845460772514, -0.0775655210018158, 0.050725266337394714),
                 (-0.044484276324510574, -0.0775655210018158, 0.050725266337394714),
                 (-0.044484276324510574, -0.09180379658937454, 0.0536700077354908),
                 (-0.03242845460772514, -0.09180379658937454, 0.0536700077354908),
                 (-0.030105454847216606, -0.08759652078151703, 0.091441810131073),
                 (-0.030105454847216606, -0.06474824994802475, 0.08974936604499817),
                 (-0.04680728167295456, -0.06474824994802475, 0.08974936604499817),
                 (-0.04680728167295456, -0.08759652078151703, 0.091441810131073),
                 (-0.03069266304373741, -0.09966417402029037, 0.1684599071741104),
                 (-0.029679665341973305, -0.10825981199741364, 0.18904584646224976),
                 (-0.030933016911149025, -0.10064534842967987, 0.02665354311466217),
                 (-0.03156564012169838, -0.08958649635314941, 0.021714290603995323),
                 (-0.04534709453582764, -0.08958649635314941, 0.021714290603995323),
                 (-0.04597972333431244, -0.10064534842967987, 0.02665354311466217),
                 (-0.03133329004049301, -0.09609410166740417, 0.013230275362730026),
                 (-0.045579444617033005, -0.09609410166740417, 0.013230275362730026),
                 (-0.045962702482938766, -0.10541016608476639, 0.01872982643544674),
                 (-0.030950035899877548, -0.10541016608476639, 0.01872982643544674),
                 (-0.024535872042179108, -0.1501643806695938, 0.21267154812812805),
                 (-0.018912825733423233, -0.17617914080619812, 0.23065415024757385),
                 (-0.024535872042179108, -0.12702032923698425, 0.2647424638271332),
                 (-0.018912825733423233, -0.1498749703168869, 0.2737526297569275),
                 (0.024535872042179108, -0.1501643806695938, 0.21267154812812805),
                 (0.018912825733423233, -0.17617914080619812, 0.23065415024757385),
                 (0.024535872042179108, -0.12702032923698425, 0.2647424638271332),
                 (0.018912825733423233, -0.1498749703168869, 0.2737526297569275),
                 (0.02332855574786663, -0.16334211826324463, 0.25237223505973816),
                 (-0.01918693073093891, -0.20507502555847168, 0.2546456456184387),
                 (0.028144491836428642, -0.1362464427947998, 0.23765772581100464),
                 (-0.01918693073093891, -0.16815140843391418, 0.29593852162361145),
                 (0.022484881803393364, -0.18881875276565552, 0.2772632837295532),
                 (0.01918693073093891, -0.20507502555847168, 0.2546456456184387),
                 (-0.028144491836428642, -0.1362464427947998, 0.23765772581100464),
                 (0.01918693073093891, -0.16815140843391418, 0.29593852162361145),
                 (0.0, -0.14929448068141937, 0.27569901943206787),
                 (0.0, -0.16834691166877747, 0.29868459701538086),
                 (0.0, -0.17768871784210205, 0.22907938063144684),
                 (0.0, -0.20781981945037842, 0.2544327676296234),
                 (0.0, -0.12351025640964508, 0.26583895087242126),
                 (-0.02332855574786663, -0.16334211826324463, 0.25237223505973816),
                 (-3.405064176156162e-19, -0.1494148075580597, 0.2090713530778885),
                 (-0.022484881803393364, -0.18881875276565552, 0.2772632837295532),
                 (-0.019049879163503647, -0.18954551219940186, 0.24130113422870636),
                 (-0.019049879163503647, -0.15926523506641388, 0.2829643487930298),
                 (0.019049879163503647, -0.15926523506641388, 0.2829643487930298),
                 (0.019049879163503647, -0.18954551219940186, 0.24130113422870636),
                 (0.0, -0.19085116684436798, 0.23981980979442596),
                 (0.0, -0.15798769891262054, 0.2843954265117645),
                 (-0.02151469700038433, -0.16163837909698486, 0.22013692557811737),
                 (-0.02151469700038433, -0.13882257044315338, 0.2675744295120239),
                 (0.02151469700038433, -0.13882257044315338, 0.2675744295120239),
                 (0.02151469700038433, -0.16163837909698486, 0.22013692557811737),
                 (0.0, -0.1630077064037323, 0.2182420939207077),
                 (0.0, -0.1375313550233841, 0.26978689432144165),
                 (0.0, -0.19138766825199127, 0.27950963377952576),
                 (0.0, -0.13242356479167938, 0.2356349676847458),
                 (0.023479893803596497, -0.17437513172626495, 0.2621106803417206),
                 (-0.023479893803596497, -0.17437513172626495, 0.2621106803417206),
                 (0.02585558034479618, -0.1510235071182251, 0.2442484349012375),
                 (-0.02585558034479618, -0.1510235071182251, 0.2442484349012375))

        faces = ((7, 35, 44, 1),
                 (6, 8, 0, 2),
                 (8, 7, 1, 0),
                 (28, 6, 2, 21),
                 (1, 44, 45, 3),
                 (21, 2, 4, 23),
                 (22, 23, 4, 5),
                 (0, 1, 3, 5),
                 (2, 0, 5, 4),
                 (45, 22, 5, 3),
                 (9, 46, 35, 7),
                 (11, 9, 7, 8),
                 (34, 10, 6, 28),
                 (10, 11, 8, 6),
                 (13, 49, 47, 16),
                 (17, 16, 47, 48),
                 (15, 17, 48, 40),
                 (12, 13, 16, 17),
                 (39, 14, 15, 40),
                 (14, 12, 17, 15),
                 (10, 34, 49, 13),
                 (46, 9, 14, 39),
                 (11, 10, 13, 12),
                 (9, 11, 12, 14),
                 (29, 19, 44, 35),
                 (27, 20, 18, 30),
                 (30, 18, 19, 29),
                 (28, 21, 20, 27),
                 (19, 24, 45, 44),
                 (21, 23, 25, 20),
                 (22, 26, 25, 23),
                 (18, 26, 24, 19),
                 (20, 25, 26, 18),
                 (45, 24, 26, 22),
                 (31, 29, 35, 46),
                 (33, 30, 29, 31),
                 (34, 28, 27, 32),
                 (32, 27, 30, 33),
                 (37, 42, 47, 49),
                 (43, 48, 47, 42),
                 (41, 40, 48, 43),
                 (36, 43, 42, 37),
                 (39, 40, 41, 38),
                 (38, 41, 43, 36),
                 (32, 37, 49, 34),
                 (46, 39, 38, 31),
                 (33, 36, 37, 32),
                 (31, 38, 36, 33),
                 (67, 59, 53, 63),
                 (75, 69, 57, 64),
                 (66, 61, 55, 65),
                 (74, 71, 51, 62),
                 (73, 60, 54, 70),
                 (72, 59, 51, 71),
                 (69, 53, 59, 72),
                 (68, 56, 60, 73),
                 (64, 57, 61, 66),
                 (62, 51, 59, 67),
                 (50, 62, 67, 58),
                 (56, 64, 66, 60),
                 (70, 74, 62, 50),
                 (60, 66, 65, 54),
                 (68, 75, 64, 56),
                 (58, 67, 63, 52),
                 (52, 63, 75, 68),
                 (54, 65, 74, 70),
                 (52, 68, 73, 58),
                 (57, 69, 72, 61),
                 (61, 72, 71, 55),
                 (58, 73, 70, 50),
                 (65, 55, 71, 74),
                 (63, 53, 69, 75),
                 (88, 77, 79, 89),
                 (93, 85, 83, 90),
                 (90, 83, 81, 91),
                 (92, 87, 77, 88),
                 (84, 82, 80, 86),
                 (85, 79, 77, 87),
                 (83, 85, 87, 81),
                 (78, 84, 86, 76),
                 (91, 81, 87, 92),
                 (89, 79, 85, 93),
                 (78, 89, 93, 84),
                 (80, 91, 92, 86),
                 (86, 92, 88, 76),
                 (82, 90, 91, 80),
                 (84, 93, 90, 82),
                 (76, 88, 89, 78),
                 (106, 107, 97, 95),
                 (111, 108, 101, 103),
                 (108, 109, 99, 101),
                 (110, 106, 95, 105),
                 (102, 104, 98, 100),
                 (103, 105, 95, 97),
                 (101, 99, 105, 103),
                 (96, 94, 104, 102),
                 (109, 110, 105, 99),
                 (107, 111, 103, 97),
                 (96, 102, 111, 107),
                 (98, 104, 110, 109),
                 (104, 94, 106, 110),
                 (100, 98, 109, 108),
                 (102, 100, 108, 111),
                 (94, 96, 107, 106),
                 (112, 113, 115, 114),
                 (114, 115, 119, 118),
                 (118, 119, 117, 116),
                 (116, 117, 113, 112),
                 (114, 118, 116, 112),
                 (119, 115, 113, 117),
                 (120, 121, 123, 122),
                 (122, 123, 127, 126),
                 (126, 127, 125, 124),
                 (124, 125, 121, 120),
                 (122, 126, 124, 120),
                 (127, 123, 121, 125),
                 (128, 129, 131, 130),
                 (130, 131, 135, 134),
                 (134, 135, 133, 132),
                 (132, 133, 129, 128),
                 (130, 134, 132, 128),
                 (135, 131, 129, 133),
                 (136, 137, 139, 138),
                 (138, 139, 143, 142),
                 (142, 143, 141, 140),
                 (140, 141, 137, 136),
                 (138, 142, 140, 136),
                 (143, 139, 137, 141),
                 (174, 168, 166, 167),
                 (184, 169, 165, 182),
                 (185, 171, 146, 177),
                 (179, 181, 162, 158),
                 (190, 149, 151, 191),
                 (191, 151, 155, 192),
                 (192, 155, 153, 193),
                 (193, 153, 149, 190),
                 (150, 154, 152, 148),
                 (155, 151, 149, 153),
                 (177, 178, 156, 144),
                 (171, 172, 159, 146),
                 (176, 179, 158, 147),
                 (170, 173, 157, 145),
                 (180, 163, 162, 181),
                 (175, 169, 160, 161),
                 (182, 165, 164, 183),
                 (178, 183, 164, 156),
                 (180, 160, 169, 184),
                 (144, 156, 173, 170),
                 (147, 158, 172, 171),
                 (176, 147, 171, 185),
                 (162, 163, 168, 174),
                 (172, 174, 167, 159),
                 (158, 162, 174, 172),
                 (164, 165, 169, 175),
                 (156, 164, 175, 173),
                 (173, 175, 161, 157),
                 (145, 176, 185, 170),
                 (163, 180, 184, 168),
                 (159, 167, 183, 178),
                 (166, 182, 183, 167),
                 (160, 180, 181, 161),
                 (145, 157, 179, 176),
                 (146, 159, 178, 177),
                 (157, 161, 181, 179),
                 (170, 185, 177, 144),
                 (168, 184, 182, 166),
                 (196, 189, 186, 197),
                 (195, 188, 189, 196),
                 (194, 187, 188, 195),
                 (197, 186, 187, 194),
                 (189, 193, 190, 186),
                 (188, 192, 193, 189),
                 (187, 191, 192, 188),
                 (186, 190, 191, 187),
                 (148, 197, 194, 150),
                 (150, 194, 195, 154),
                 (154, 195, 196, 152),
                 (152, 196, 197, 148),
                 (214, 215, 201, 200),
                 (200, 201, 205, 204),
                 (216, 217, 203, 202),
                 (202, 203, 199, 198),
                 (214, 216, 202, 198),
                 (217, 215, 199, 203),
                 (222, 207, 209, 223),
                 (223, 209, 213, 224),
                 (224, 213, 211, 225),
                 (225, 211, 207, 222),
                 (208, 212, 210, 206),
                 (213, 209, 207, 211),
                 (205, 201, 215, 217),
                 (200, 204, 216, 214),
                 (204, 205, 217, 216),
                 (198, 199, 215, 214),
                 (228, 221, 218, 229),
                 (227, 220, 221, 228),
                 (226, 219, 220, 227),
                 (229, 218, 219, 226),
                 (221, 225, 222, 218),
                 (220, 224, 225, 221),
                 (219, 223, 224, 220),
                 (218, 222, 223, 219),
                 (206, 229, 226, 208),
                 (208, 226, 227, 212),
                 (212, 227, 228, 210),
                 (210, 228, 229, 206),
                 (260, 253, 252, 254),
                 (270, 268, 251, 255),
                 (271, 263, 232, 257),
                 (265, 244, 248, 267),
                 (276, 277, 237, 235),
                 (277, 278, 241, 237),
                 (278, 279, 239, 241),
                 (279, 276, 235, 239),
                 (236, 234, 238, 240),
                 (241, 239, 235, 237),
                 (263, 230, 242, 264),
                 (257, 232, 245, 258),
                 (262, 233, 244, 265),
                 (256, 231, 243, 259),
                 (266, 267, 248, 249),
                 (261, 247, 246, 255),
                 (268, 269, 250, 251),
                 (264, 242, 250, 269),
                 (266, 270, 255, 246),
                 (230, 256, 259, 242),
                 (233, 257, 258, 244),
                 (262, 271, 257, 233),
                 (248, 260, 254, 249),
                 (258, 245, 253, 260),
                 (244, 258, 260, 248),
                 (250, 261, 255, 251),
                 (242, 259, 261, 250),
                 (259, 243, 247, 261),
                 (231, 256, 271, 262),
                 (249, 254, 270, 266),
                 (245, 264, 269, 253),
                 (252, 253, 269, 268),
                 (246, 247, 267, 266),
                 (231, 262, 265, 243),
                 (232, 263, 264, 245),
                 (243, 265, 267, 247),
                 (256, 230, 263, 271),
                 (254, 252, 268, 270),
                 (282, 283, 272, 275),
                 (281, 282, 275, 274),
                 (280, 281, 274, 273),
                 (283, 280, 273, 272),
                 (275, 272, 276, 279),
                 (274, 275, 279, 278),
                 (273, 274, 278, 277),
                 (272, 273, 277, 276),
                 (234, 236, 280, 283),
                 (236, 240, 281, 280),
                 (240, 238, 282, 281),
                 (238, 234, 283, 282),
                 (300, 286, 287, 301),
                 (286, 290, 291, 287),
                 (302, 288, 289, 303),
                 (288, 284, 285, 289),
                 (300, 284, 288, 302),
                 (303, 289, 285, 301),
                 (308, 309, 295, 293),
                 (309, 310, 299, 295),
                 (310, 311, 297, 299),
                 (311, 308, 293, 297),
                 (294, 292, 296, 298),
                 (299, 297, 293, 295),
                 (291, 303, 301, 287),
                 (286, 300, 302, 290),
                 (290, 302, 303, 291),
                 (284, 300, 301, 285),
                 (314, 315, 304, 307),
                 (313, 314, 307, 306),
                 (312, 313, 306, 305),
                 (315, 312, 305, 304),
                 (307, 304, 308, 311),
                 (306, 307, 311, 310),
                 (305, 306, 310, 309),
                 (304, 305, 309, 308),
                 (292, 294, 312, 315),
                 (294, 298, 313, 312),
                 (298, 296, 314, 313),
                 (296, 292, 315, 314),
                 (344, 345, 319, 318),
                 (318, 319, 323, 322),
                 (346, 347, 321, 320),
                 (320, 321, 317, 316),
                 (344, 346, 320, 316),
                 (347, 345, 317, 321),
                 (366, 360, 356, 357),
                 (369, 355, 358, 370),
                 (360, 361, 353, 356),
                 (362, 363, 326, 324),
                 (390, 329, 331, 391),
                 (391, 331, 335, 392),
                 (392, 335, 333, 393),
                 (393, 333, 329, 390),
                 (330, 334, 332, 328),
                 (335, 331, 329, 333),
                 (396, 337, 339, 397),
                 (397, 339, 343, 398),
                 (398, 343, 341, 399),
                 (399, 341, 337, 396),
                 (338, 342, 340, 336),
                 (343, 339, 337, 341),
                 (323, 319, 345, 347),
                 (318, 322, 346, 344),
                 (322, 323, 347, 346),
                 (316, 317, 345, 344),
                 (374, 351, 348, 375),
                 (395, 361, 354, 355),
                 (372, 349, 350, 373),
                 (377, 364, 351, 374),
                 (376, 365, 349, 372),
                 (354, 359, 358, 355),
                 (356, 353, 352, 357),
                 (367, 357, 352, 368),
                 (359, 354, 361, 360),
                 (375, 348, 365, 376),
                 (373, 350, 364, 377),
                 (325, 327, 363, 362),
                 (358, 359, 360, 366),
                 (370, 358, 366, 371),
                 (371, 366, 357, 367),
                 (364, 371, 367, 351),
                 (350, 370, 371, 364),
                 (351, 367, 368, 348),
                 (365, 394, 369, 349),
                 (349, 369, 370, 350),
                 (327, 373, 377, 363),
                 (324, 375, 376, 362),
                 (362, 376, 372, 325),
                 (363, 377, 374, 326),
                 (325, 372, 373, 327),
                 (326, 374, 375, 324),
                 (384, 381, 378, 385),
                 (383, 380, 381, 384),
                 (382, 379, 380, 383),
                 (385, 378, 379, 382),
                 (389, 385, 382, 386),
                 (386, 382, 383, 387),
                 (387, 383, 384, 388),
                 (388, 384, 385, 389),
                 (332, 388, 389, 328),
                 (334, 387, 388, 332),
                 (330, 386, 387, 334),
                 (328, 389, 386, 330),
                 (381, 393, 390, 378),
                 (380, 392, 393, 381),
                 (379, 391, 392, 380),
                 (378, 390, 391, 379),
                 (348, 368, 394, 365),
                 (352, 353, 361, 395),
                 (394, 395, 355, 369),
                 (368, 352, 395, 394),
                 (402, 399, 396, 403),
                 (401, 398, 399, 402),
                 (400, 397, 398, 401),
                 (403, 396, 397, 400),
                 (336, 403, 400, 338),
                 (338, 400, 401, 342),
                 (342, 401, 402, 340),
                 (340, 402, 403, 336),
                 (432, 406, 407, 433),
                 (406, 410, 411, 407),
                 (434, 408, 409, 435),
                 (408, 404, 405, 409),
                 (432, 404, 408, 434),
                 (435, 409, 405, 433),
                 (454, 445, 444, 448),
                 (457, 458, 446, 443),
                 (448, 444, 441, 449),
                 (450, 412, 414, 451),
                 (478, 479, 419, 417),
                 (479, 480, 423, 419),
                 (480, 481, 421, 423),
                 (481, 478, 417, 421),
                 (418, 416, 420, 422),
                 (423, 421, 417, 419),
                 (484, 485, 427, 425),
                 (485, 486, 431, 427),
                 (486, 487, 429, 431),
                 (487, 484, 425, 429),
                 (426, 424, 428, 430),
                 (431, 429, 425, 427),
                 (411, 435, 433, 407),
                 (406, 432, 434, 410),
                 (410, 434, 435, 411),
                 (404, 432, 433, 405),
                 (462, 463, 436, 439),
                 (483, 443, 442, 449),
                 (460, 461, 438, 437),
                 (465, 462, 439, 452),
                 (464, 460, 437, 453),
                 (442, 443, 446, 447),
                 (444, 445, 440, 441),
                 (455, 456, 440, 445),
                 (447, 448, 449, 442),
                 (463, 464, 453, 436),
                 (461, 465, 452, 438),
                 (413, 450, 451, 415),
                 (446, 454, 448, 447),
                 (458, 459, 454, 446),
                 (459, 455, 445, 454),
                 (452, 439, 455, 459),
                 (438, 452, 459, 458),
                 (439, 436, 456, 455),
                 (453, 437, 457, 482),
                 (437, 438, 458, 457),
                 (415, 451, 465, 461),
                 (412, 450, 464, 463),
                 (450, 413, 460, 464),
                 (451, 414, 462, 465),
                 (413, 415, 461, 460),
                 (414, 412, 463, 462),
                 (472, 473, 466, 469),
                 (471, 472, 469, 468),
                 (470, 471, 468, 467),
                 (473, 470, 467, 466),
                 (477, 474, 470, 473),
                 (474, 475, 471, 470),
                 (475, 476, 472, 471),
                 (476, 477, 473, 472),
                 (420, 416, 477, 476),
                 (422, 420, 476, 475),
                 (418, 422, 475, 474),
                 (416, 418, 474, 477),
                 (469, 466, 478, 481),
                 (468, 469, 481, 480),
                 (467, 468, 480, 479),
                 (466, 467, 479, 478),
                 (436, 453, 482, 456),
                 (440, 483, 449, 441),
                 (482, 457, 443, 483),
                 (456, 482, 483, 440),
                 (490, 491, 484, 487),
                 (489, 490, 487, 486),
                 (488, 489, 486, 485),
                 (491, 488, 485, 484),
                 (424, 426, 488, 491),
                 (426, 430, 489, 488),
                 (430, 428, 490, 489),
                 (428, 424, 491, 490),
                 (533, 513, 495, 523),
                 (527, 508, 499, 524),
                 (532, 500, 497, 525),
                 (526, 510, 493, 522),
                 (529, 502, 496, 514),
                 (499, 518, 530, 500),
                 (531, 515, 503, 517),
                 (521, 509, 507, 518),
                 (530, 504, 505, 519),
                 (520, 511, 501, 516),
                 (498, 524, 532, 502),
                 (528, 515, 501, 511),
                 (504, 528, 511, 505),
                 (492, 522, 533, 506),
                 (519, 505, 511, 520),
                 (517, 503, 509, 521),
                 (493, 516, 531, 513),
                 (506, 529, 514, 492),
                 (525, 497, 510, 526),
                 (523, 495, 508, 527),
                 (495, 517, 521, 508),
                 (497, 519, 520, 510),
                 (510, 520, 516, 493),
                 (500, 530, 519, 497),
                 (508, 521, 518, 499),
                 (513, 531, 517, 495),
                 (494, 523, 527, 512),
                 (496, 525, 526, 514),
                 (514, 526, 522, 492),
                 (502, 532, 525, 496),
                 (512, 527, 524, 498),
                 (506, 533, 523, 494),
                 (494, 512, 529, 506),
                 (507, 509, 528, 504),
                 (509, 503, 515, 528),
                 (518, 507, 504, 530),
                 (516, 501, 515, 531),
                 (512, 498, 502, 529),
                 (524, 499, 500, 532),
                 (522, 493, 513, 533))

        scene = bpy.context.scene
        me = bpy.data.meshes.new("Cat_GEO")
        me.from_pydata(verts, [], faces)
        ob = bpy.data.objects.new("Cat_GEO", me)
        scene.collection.objects.link(ob)


 

 

#=============================================
# Create "Cat" Metarig
#=============================================



        # Check Rigify in preferences

        disable_Rigify = bpy.ops.preferences.addon_disable(module="rigify")

        if disable_Rigify:
            bpy.ops.preferences.addon_enable(module="rigify")

        else:
            pass
                    
   
   
  
        if bpy.context.mode == 'OBJECT':
            
            # Create single bone / go to Edit Mode / select and delete bone
            bpy.ops.object.armature_add(enter_editmode=0, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1)) 
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)
            bpy.ops.armature.select_all(action='SELECT')
            bpy.ops.armature.delete()    
         
             
        else:
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)



        # Active object
        ob = bpy.context.object

        # Rig Name 
        if ob.type == 'ARMATURE':
            ob.name = 'cat_metarig'    
            

        arm = bpy.data.objects[ob.name].data


        for i in range(6):
            arm.rigify_colors.add()

 
        arm.rigify_colors[0].name = "Root"
        arm.rigify_colors[0].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[0].normal = Color((0.4352940022945404, 0.18431399762630463, 0.4156860113143921))
        arm.rigify_colors[0].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[0].standard_colors_lock = True
        arm.rigify_colors[1].name = "IK"
        arm.rigify_colors[1].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[1].normal = Color((0.6039220094680786, 0.0, 0.0))
        arm.rigify_colors[1].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[1].standard_colors_lock = True
        arm.rigify_colors[2].name = "Special"
        arm.rigify_colors[2].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[2].normal = Color((0.9568629860877991, 0.7882350087165833, 0.04705899953842163))
        arm.rigify_colors[2].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[2].standard_colors_lock = True
        arm.rigify_colors[3].name = "Tweak"
        arm.rigify_colors[3].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[3].normal = Color((0.03921600058674812, 0.21176500618457794, 0.5803920030593872))
        arm.rigify_colors[3].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[3].standard_colors_lock = True
        arm.rigify_colors[4].name = "FK"
        arm.rigify_colors[4].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[4].normal = Color((0.11764699965715408, 0.5686269998550415, 0.035294000059366226))
        arm.rigify_colors[4].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[4].standard_colors_lock = True
        arm.rigify_colors[5].name = "Extra"
        arm.rigify_colors[5].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[5].normal = Color((0.9686279892921448, 0.2509799897670746, 0.09411799907684326))
        arm.rigify_colors[5].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[5].standard_colors_lock = True

        for i in range(29):
            arm.rigify_layers.add()

        arm.rigify_layers[0].name = "Face"
        arm.rigify_layers[0].row = 1
        arm.rigify_layers[0].selset = False
        arm.rigify_layers[0].group = 5
        arm.rigify_layers[1].name = "Face (Primary)"
        arm.rigify_layers[1].row = 2
        arm.rigify_layers[1].selset = False
        arm.rigify_layers[1].group = 2
        arm.rigify_layers[2].name = "Face (Secondary)"
        arm.rigify_layers[2].row = 2
        arm.rigify_layers[2].selset = False
        arm.rigify_layers[2].group = 3
        arm.rigify_layers[3].name = "Spine"
        arm.rigify_layers[3].row = 3
        arm.rigify_layers[3].selset = False
        arm.rigify_layers[3].group = 3
        arm.rigify_layers[4].name = "Spine (Tweak)"
        arm.rigify_layers[4].row = 4
        arm.rigify_layers[4].selset = False
        arm.rigify_layers[4].group = 4
        arm.rigify_layers[5].name = "Paws"
        arm.rigify_layers[5].row = 5
        arm.rigify_layers[5].selset = False
        arm.rigify_layers[5].group = 6
        arm.rigify_layers[6].name = "Paws (Tweak)"
        arm.rigify_layers[6].row = 6
        arm.rigify_layers[6].selset = False
        arm.rigify_layers[6].group = 4
        arm.rigify_layers[7].name = "Arm.L (IK)"
        arm.rigify_layers[7].row = 7
        arm.rigify_layers[7].selset = False
        arm.rigify_layers[7].group = 2
        arm.rigify_layers[8].name = "Arm.L (FK)"
        arm.rigify_layers[8].row = 8
        arm.rigify_layers[8].selset = False
        arm.rigify_layers[8].group = 5
        arm.rigify_layers[9].name = "Arm,L (Tweak)"
        arm.rigify_layers[9].row = 9
        arm.rigify_layers[9].selset = False
        arm.rigify_layers[9].group = 4
        arm.rigify_layers[10].name = "Arm.R (IK)"
        arm.rigify_layers[10].row = 7
        arm.rigify_layers[10].selset = False
        arm.rigify_layers[10].group = 2
        arm.rigify_layers[11].name = "Arm.R (FK)"
        arm.rigify_layers[11].row = 8
        arm.rigify_layers[11].selset = False
        arm.rigify_layers[11].group = 5
        arm.rigify_layers[12].name = "Arm.R (Tweak)"
        arm.rigify_layers[12].row = 9
        arm.rigify_layers[12].selset = False
        arm.rigify_layers[12].group = 4
        arm.rigify_layers[13].name = "Leg.L (IK)"
        arm.rigify_layers[13].row = 10
        arm.rigify_layers[13].selset = False
        arm.rigify_layers[13].group = 2
        arm.rigify_layers[14].name = "Leg.L (FK)"
        arm.rigify_layers[14].row = 11
        arm.rigify_layers[14].selset = False
        arm.rigify_layers[14].group = 5
        arm.rigify_layers[15].name = "Leg.L (Tweak)"
        arm.rigify_layers[15].row = 12
        arm.rigify_layers[15].selset = False
        arm.rigify_layers[15].group = 4
        arm.rigify_layers[16].name = "Leg.R (IK)"
        arm.rigify_layers[16].row = 10
        arm.rigify_layers[16].selset = False
        arm.rigify_layers[16].group = 2
        arm.rigify_layers[17].name = "Leg.R (FK)"
        arm.rigify_layers[17].row = 11
        arm.rigify_layers[17].selset = False
        arm.rigify_layers[17].group = 5
        arm.rigify_layers[18].name = "Leg.R (Tweak)"
        arm.rigify_layers[18].row = 12
        arm.rigify_layers[18].selset = False
        arm.rigify_layers[18].group = 4
        arm.rigify_layers[19].name = "Tail"
        arm.rigify_layers[19].row = 13
        arm.rigify_layers[19].selset = False
        arm.rigify_layers[19].group = 3
        arm.rigify_layers[20].name = "Tail (Tweaks)"
        arm.rigify_layers[20].row = 14
        arm.rigify_layers[20].selset = False
        arm.rigify_layers[20].group = 4
        arm.rigify_layers[21].name = " "
        arm.rigify_layers[21].row = 1
        arm.rigify_layers[21].selset = False
        arm.rigify_layers[21].group = 0
        arm.rigify_layers[22].name = " "
        arm.rigify_layers[22].row = 1
        arm.rigify_layers[22].selset = False
        arm.rigify_layers[22].group = 0
        arm.rigify_layers[23].name = " "
        arm.rigify_layers[23].row = 1
        arm.rigify_layers[23].selset = False
        arm.rigify_layers[23].group = 0
        arm.rigify_layers[24].name = " "
        arm.rigify_layers[24].row = 1
        arm.rigify_layers[24].selset = False
        arm.rigify_layers[24].group = 0
        arm.rigify_layers[25].name = " "
        arm.rigify_layers[25].row = 1
        arm.rigify_layers[25].selset = False
        arm.rigify_layers[25].group = 0
        arm.rigify_layers[26].name = " "
        arm.rigify_layers[26].row = 1
        arm.rigify_layers[26].selset = False
        arm.rigify_layers[26].group = 0
        arm.rigify_layers[27].name = " "
        arm.rigify_layers[27].row = 1
        arm.rigify_layers[27].selset = False
        arm.rigify_layers[27].group = 0
        arm.rigify_layers[28].name = "Root"
        arm.rigify_layers[28].row = 16
        arm.rigify_layers[28].selset = False
        arm.rigify_layers[28].group = 1

        bones = {}

        bone = arm.edit_bones.new('spine')
        bone.head = -0.0000, 0.1229, 0.2479
        bone.tail = 0.0000, 0.0699, 0.2416
        bone.roll = -0.0000
        bone.use_connect = False
        bones['spine'] = bone.name
        bone = arm.edit_bones.new('tail.001')
        bone.head = -0.0000, 0.1229, 0.2479
        bone.tail = -0.0000, 0.2111, 0.2302
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine']]
        bones['tail.001'] = bone.name
        bone = arm.edit_bones.new('spine.001')
        bone.head = 0.0000, 0.0699, 0.2416
        bone.tail = -0.0000, 0.0090, 0.2323
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine']]
        bones['spine.001'] = bone.name
        bone = arm.edit_bones.new('pelvis.L')
        bone.head = -0.0000, 0.1229, 0.2479
        bone.tail = 0.0238, 0.1368, 0.2194
        bone.roll = -2.0314
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine']]
        bones['pelvis.L'] = bone.name
        bone = arm.edit_bones.new('pelvis.R')
        bone.head = 0.0000, 0.1229, 0.2479
        bone.tail = -0.0238, 0.1368, 0.2194
        bone.roll = 2.0314
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine']]
        bones['pelvis.R'] = bone.name
        bone = arm.edit_bones.new('pelvis.C')
        bone.head = -0.0000, 0.1229, 0.2479
        bone.tail = 0.0000, 0.1571, 0.2007
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine']]
        bones['pelvis.C'] = bone.name
        bone = arm.edit_bones.new('tail.002')
        bone.head = -0.0000, 0.2111, 0.2302
        bone.tail = -0.0000, 0.2770, 0.2066
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.001']]
        bones['tail.002'] = bone.name
        bone = arm.edit_bones.new('spine.002')
        bone.head = -0.0000, 0.0090, 0.2323
        bone.tail = -0.0000, -0.0551, 0.2284
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.001']]
        bones['spine.002'] = bone.name
        bone = arm.edit_bones.new('thigh.L')
        bone.head = 0.0363, 0.1345, 0.2125
        bone.tail = 0.0365, 0.1141, 0.1186
        bone.roll = 3.1390
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['pelvis.L']]
        bones['thigh.L'] = bone.name
        bone = arm.edit_bones.new('thigh.R')
        bone.head = -0.0363, 0.1345, 0.2125
        bone.tail = -0.0365, 0.1141, 0.1186
        bone.roll = -3.1390
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['pelvis.R']]
        bones['thigh.R'] = bone.name
        bone = arm.edit_bones.new('tail.003')
        bone.head = -0.0000, 0.2770, 0.2066
        bone.tail = -0.0000, 0.3386, 0.1733
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.002']]
        bones['tail.003'] = bone.name
        bone = arm.edit_bones.new('spine.003')
        bone.head = -0.0000, -0.0551, 0.2284
        bone.tail = -0.0000, -0.1408, 0.2343
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['spine.003'] = bone.name
        bone = arm.edit_bones.new('belly.C')
        bone.head = 0.0000, 0.0128, 0.2056
        bone.tail = 0.0000, 0.0133, 0.1466
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['belly.C'] = bone.name
        bone = arm.edit_bones.new('shin.L')
        bone.head = 0.0365, 0.1141, 0.1186
        bone.tail = 0.0365, 0.1771, 0.0647
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.L']]
        bones['shin.L'] = bone.name
        bone = arm.edit_bones.new('shin.R')
        bone.head = -0.0365, 0.1141, 0.1186
        bone.tail = -0.0365, 0.1771, 0.0647
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.R']]
        bones['shin.R'] = bone.name
        bone = arm.edit_bones.new('tail.004')
        bone.head = -0.0000, 0.3386, 0.1733
        bone.tail = -0.0000, 0.3992, 0.1382
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.003']]
        bones['tail.004'] = bone.name
        bone = arm.edit_bones.new('spine.004')
        bone.head = -0.0000, -0.1408, 0.2343
        bone.tail = 0.0000, -0.1636, 0.2493
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['spine.004'] = bone.name
        bone = arm.edit_bones.new('Breast.C')
        bone.head = 0.0000, -0.0881, 0.2067
        bone.tail = 0.0000, -0.1205, 0.1670
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['Breast.C'] = bone.name
        bone = arm.edit_bones.new('shoulder.L')
        bone.head = 0.0111, -0.0806, 0.2566
        bone.tail = 0.0399, -0.1103, 0.2030
        bone.roll = 2.1511
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['shoulder.L'] = bone.name
        bone = arm.edit_bones.new('shoulder.R')
        bone.head = -0.0111, -0.0806, 0.2566
        bone.tail = -0.0399, -0.1103, 0.2030
        bone.roll = -2.1511
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['shoulder.R'] = bone.name
        bone = arm.edit_bones.new('foot.L')
        bone.head = 0.0365, 0.1771, 0.0647
        bone.tail = 0.0365, 0.1574, 0.0051
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.L']]
        bones['foot.L'] = bone.name
        bone = arm.edit_bones.new('foot.R')
        bone.head = -0.0365, 0.1771, 0.0647
        bone.tail = -0.0365, 0.1574, 0.0051
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.R']]
        bones['foot.R'] = bone.name
        bone = arm.edit_bones.new('spine.005')
        bone.head = 0.0000, -0.1636, 0.2493
        bone.tail = 0.0000, -0.1882, 0.2738
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.005'] = bone.name
        bone = arm.edit_bones.new('upper_arm.L')
        bone.head = 0.0385, -0.1105, 0.1946
        bone.tail = 0.0385, -0.0726, 0.1071
        bone.roll = 3.1416
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.L']]
        bones['upper_arm.L'] = bone.name
        bone = arm.edit_bones.new('upper_arm.R')
        bone.head = -0.0385, -0.1105, 0.1946
        bone.tail = -0.0385, -0.0726, 0.1071
        bone.roll = -3.1416
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.R']]
        bones['upper_arm.R'] = bone.name
        bone = arm.edit_bones.new('r_toe.L')
        bone.head = 0.0365, 0.1574, 0.0051
        bone.tail = 0.0365, 0.1275, 0.0017
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.L']]
        bones['r_toe.L'] = bone.name
        bone = arm.edit_bones.new('r_toe.R')
        bone.head = -0.0365, 0.1574, 0.0051
        bone.tail = -0.0365, 0.1275, 0.0017
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.R']]
        bones['r_toe.R'] = bone.name
        bone = arm.edit_bones.new('spine.006')
        bone.head = 0.0000, -0.1882, 0.2738
        bone.tail = 0.0000, -0.2537, 0.3277
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['spine.006'] = bone.name
        bone = arm.edit_bones.new('forearm.L')
        bone.head = 0.0385, -0.0726, 0.1071
        bone.tail = 0.0385, -0.0885, 0.0363
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['upper_arm.L']]
        bones['forearm.L'] = bone.name
        bone = arm.edit_bones.new('forearm.R')
        bone.head = -0.0385, -0.0726, 0.1071
        bone.tail = -0.0385, -0.0885, 0.0363
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['upper_arm.R']]
        bones['forearm.R'] = bone.name
        bone = arm.edit_bones.new('hand.L')
        bone.head = 0.0385, -0.0885, 0.0363
        bone.tail = 0.0385, -0.1072, 0.0071
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forearm.L']]
        bones['hand.L'] = bone.name
        bone = arm.edit_bones.new('hand.R')
        bone.head = -0.0385, -0.0885, 0.0363
        bone.tail = -0.0385, -0.1072, 0.0071
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forearm.R']]
        bones['hand.R'] = bone.name
        bone = arm.edit_bones.new('f_toe.L')
        bone.head = 0.0385, -0.1072, 0.0071
        bone.tail = 0.0385, -0.1370, 0.0018
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['hand.L']]
        bones['f_toe.L'] = bone.name
        bone = arm.edit_bones.new('f_toe.R')
        bone.head = -0.0385, -0.1072, 0.0071
        bone.tail = -0.0385, -0.1370, 0.0018
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['hand.R']]
        bones['f_toe.R'] = bone.name

        obj = bpy.context.object 

        bpy.ops.object.mode_set(mode='OBJECT')
        pbone = obj.pose.bones[bones['spine']]
        pbone.rigify_type = 'spines.basic_spine'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.tweak_layers = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['tail.001']]
        pbone.rigify_type = 'spines.basic_tail'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.tweak_layers = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.copy_rotation_axes = [True, True, True]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.001']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['pelvis.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['pelvis.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['pelvis.C']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['tail.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['thigh.L']]
        pbone.rigify_type = 'limbs.super_limb'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.segments = 2
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.R']]
        pbone.rigify_type = 'limbs.super_limb'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['tail.003']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.003']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['belly.C']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['tail.004']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.004']]
        pbone.rigify_type = 'spines.super_head'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['Breast.C']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shoulder.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['shoulder.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.005']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['upper_arm.L']]
        pbone.rigify_type = 'limbs.super_limb'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['upper_arm.R']]
        pbone.rigify_type = 'limbs.super_limb'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['r_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['r_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.006']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forearm.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forearm.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['hand.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['hand.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

        bpy.ops.object.mode_set(mode='EDIT')
        for bone in arm.edit_bones:
            bone.select = False
            bone.select_head = False
            bone.select_tail = False
        for b in bones:
            bone = arm.edit_bones[bones[b]]
            bone.select = True
            bone.select_head = True
            bone.select_tail = True
            bone.bbone_x = bone.bbone_z = bone.length * 0.05
            arm.edit_bones.active = bone

        arm.layers = [(x in [3, 7, 10, 13, 16, 19]) for x in range(32)]


        
    
    
   
        bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
        bpy.ops.pose.rigify_generate()


        # Rename Existing Armature with name 'Rig'
        for arm in bpy.context.selected_objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'cat_rig'    
        
             

        # Rename Existing Rigify UI Script 'rig_ui.py'
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_cat.py'

             

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cat_GEO'):
                o.select_set(True)
            else:
                o.select_set(False)


     
        
        # Delete Metarig
        obj = bpy.data.objects['cat_metarig']
        bpy.data.objects.remove(obj) 
        
        

        # Go to Pose Mode
        bpy.ops.object.posemode_toggle()

        
        
        # 1. Select Cat GEO / 2. Select Cat metarig and parent(auto)
         
        bpy.data.objects["Cat_GEO"].select_set(True)
        bpy.data.objects["cat_rig"].select_set(True)

        bpy.ops.object.parent_set(type='ARMATURE_AUTO')

           

              
        # Arms/Legs FK Layers
        bpy.context.object.data.layers[8] = False
        bpy.context.object.data.layers[11] = False       
        bpy.context.object.data.layers[14] = False
        bpy.context.object.data.layers[17] = False


        # View - Frame Selected
        pose_bones = bpy.context.object.pose.bones
        for pb in pose_bones:
            if pb.name.startswith('root'):
                pb.bone.select = 1
                bpy.ops.view3d.view_selected(use_all_regions=0)
                pb.bone.select = 0




#===================================
# Create "Cat" Material
#===================================

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cat_GEO'):
                o.select_set(True)
                bpy.context.view_layer.objects.active = o
            else:
                o.select_set(False)


        ob = bpy.context.active_object

        # Get material
        mat = bpy.data.materials.get("Cat_Mat")
        if mat is None:
            # create material
            mat = bpy.data.materials.new(name="Cat_Mat")

        # Assign Material to object
        if ob.data.materials:
            # assign to 1st material slot
            ob.data.materials[0] = mat
        else:
            # no slots
            ob.data.materials.append(mat)


        bpy.context.object.active_material.diffuse_color = (0.83, 0.64, 0.25, 1)



#===================================
# End - Create "Cat" Material
#===================================





        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cat_GEO'):

                o.select_set(False)

 
        bpy.context.scene.tool_settings.lock_object_mode = False


        return {'FINISHED'}



#=====================================================
#     END  - CAT RIG - RIGIFY ZOO
#=====================================================

                




classes = [OBJECT_OT_cat_rigify_zoo_ra]



def register():
    for cls in classes:
        bpy.utils.register_class(cls)



def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)




if __name__ == "__main__":
    register()




                
                
                
