import bpy
from mathutils import Color



#=====================================================
#            CHEETAH RIG - RIGIFY ZOO
#=====================================================
 
 
 

# Add Rigify Rig - Cheetah
class OBJECT_OT_cheetah_rigify_zoo_ra(bpy.types.Operator):
    '''Cheetah Rig'''
    bl_idname = "object.cheetah_rigify_zoo_ra"
    bl_label = "Cheetah"
    bl_options = {'REGISTER', 'UNDO'}

 
    def execute(self, context):
      
        # Rename Existing Rigify UI Script
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_new_name.py'


#=============================================
# Create "Cheetah" GEO
#=============================================



        # Rename Existing Armature with name 'rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'Rename this rig'    
        

        # Rename Existing Armature with name 'cheetah_rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('cheetah_rig'):
                arm.name = 'cheetah rig next'    
        
                          

        current_mode = bpy.context.mode
        if current_mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    

 
        # Rename "Cheetah_GEO"
        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name == 'Cheetah_GEO':
                o.name = 'Cheetah'


        # Set active 'Scene Collection'
        scene_collection = bpy.context.view_layer.layer_collection
        bpy.context.view_layer.active_layer_collection = scene_collection




# Create "Cheetah" Mesh


        verts = ((0.05266105756163597, 0.4870251715183258, 0.7048175930976868),
                 (0.07904046773910522, 0.4764404296875, 0.9025465846061707),
                 (0.07253670692443848, 0.3556877374649048, 0.6610774993896484),
                 (0.09152697026729584, 0.36754679679870605, 0.9459552764892578),
                 (0.0910625085234642, 0.17969119548797607, 0.8692984580993652),
                 (0.09607325494289398, 0.36627691984176636, 0.8688987493515015),
                 (0.0735960528254509, 0.502252459526062, 0.8480501174926758),
                 (0.06040634959936142, 0.5065868496894836, 0.7491856217384338),
                 (0.0865781307220459, 0.3603473901748657, 0.7264598608016968),
                 (-0.05266105756163597, 0.4870251715183258, 0.7048175930976868),
                 (-0.07904046773910522, 0.4764404296875, 0.9025465846061707),
                 (-0.07253670692443848, 0.3556877374649048, 0.6610774993896484),
                 (-0.09152697026729584, 0.36754679679870605, 0.9459552764892578),
                 (-0.0910625085234642, 0.17969119548797607, 0.8692984580993652),
                 (-0.09607325494289398, 0.36627691984176636, 0.8688987493515015),
                 (-0.0735960528254509, 0.502252459526062, 0.8480501174926758),
                 (-0.06040634959936142, 0.5065868496894836, 0.7491856217384338),
                 (-0.0865781307220459, 0.3603473901748657, 0.7264598608016968),
                 (0.0, 0.5215241312980652, 0.7441833019256592),
                 (0.0, 0.5031259059906006, 0.6938962340354919),
                 (0.0, 0.357643187046051, 0.6440051794052124),
                 (0.0, 0.3708249032497406, 0.9628236293792725),
                 (0.0, 0.48576030135154724, 0.9106168746948242),
                 (0.0, 0.5137993693351746, 0.8525435924530029),
                 (0.0, 0.18682855367660522, 0.6574169993400574),
                 (0.0, 0.17995689809322357, 0.9693406224250793),
                 (0.07984764873981476, 0.18208792805671692, 0.7298694252967834),
                 (0.06189344823360443, 0.18486005067825317, 0.6733417510986328),
                 (0.08432316035032272, 0.18006660044193268, 0.9521997570991516),
                 (-0.07984764873981476, 0.18208792805671692, 0.7298694252967834),
                 (-0.06189344823360443, 0.18486005067825317, 0.6733417510986328),
                 (-0.08432316035032272, 0.18006660044193268, 0.9521997570991516),
                 (0.0, 0.17969119548797607, 0.8692984580993652),
                 (0.0, 0.18208792805671692, 0.7298694252967834),
                 (0.06250045448541641, -0.6351672410964966, 0.7724270820617676),
                 (0.06373822689056396, -0.6050674319267273, 0.9575113654136658),
                 (0.06742708384990692, -0.5655871033668518, 0.7263628840446472),
                 (0.08517821133136749, -0.5069746375083923, 0.9649884104728699),
                 (0.08472518622875214, -0.1768551617860794, 0.9325880408287048),
                 (0.0503954216837883, -0.3308248519897461, 0.541939914226532),
                 (0.08880163729190826, -0.29759514331817627, 0.9467058777809143),
                 (0.071457639336586, -0.47242429852485657, 0.5814390778541565),
                 (0.09586764127016068, -0.4119633138179779, 0.97184157371521),
                 (0.09387177228927612, -0.30707380175590515, 0.8308482766151428),
                 (0.09176851809024811, -0.518419623374939, 0.896967887878418),
                 (0.10912366211414337, -0.42612066864967346, 0.862605094909668),
                 (0.08147205412387848, -0.6134411096572876, 0.9046819806098938),
                 (0.07494442164897919, -0.6292343139648438, 0.8082542419433594),
                 (0.07238759100437164, -0.6936748027801514, 0.8149625658988953),
                 (0.09303361177444458, -0.4563511610031128, 0.6674038171768188),
                 (0.07466866075992584, -0.32368865609169006, 0.6284652948379517),
                 (0.08013153076171875, -0.5522733926773071, 0.7690287232398987),
                 (-0.06250045448541641, -0.6351672410964966, 0.7724270820617676),
                 (-0.06373822689056396, -0.6050674319267273, 0.9575113654136658),
                 (-0.06742708384990692, -0.5655871033668518, 0.7263628840446472),
                 (-0.08517821133136749, -0.5069746375083923, 0.9649884104728699),
                 (-0.08472518622875214, -0.1768551617860794, 0.9325880408287048),
                 (-0.0503954216837883, -0.3308248519897461, 0.541939914226532),
                 (-0.08880163729190826, -0.29759514331817627, 0.9467058777809143),
                 (-0.071457639336586, -0.47242429852485657, 0.5814390778541565),
                 (-0.09586764127016068, -0.4119633138179779, 0.97184157371521),
                 (0.0, -0.6963221430778503, 0.8146555423736572),
                 (-0.09387177228927612, -0.30707380175590515, 0.8308482766151428),
                 (-0.09176851809024811, -0.518419623374939, 0.896967887878418),
                 (-0.10912366211414337, -0.42612066864967346, 0.862605094909668),
                 (-0.08147205412387848, -0.6134411096572876, 0.9046819806098938),
                 (0.0, -0.6875984072685242, 0.9032512307167053),
                 (-0.07494442164897919, -0.6292343139648438, 0.8082542419433594),
                 (-0.07238759100437164, -0.6936748027801514, 0.8149625658988953),
                 (-0.09303361177444458, -0.4563511610031128, 0.6674038171768188),
                 (-0.07466866075992584, -0.32368865609169006, 0.6284652948379517),
                 (-0.08013153076171875, -0.5522733926773071, 0.7690287232398987),
                 (0.0, -0.6427980661392212, 0.7445432543754578),
                 (0.0, -0.1663949340581894, 0.5407760143280029),
                 (0.0, -0.5090962052345276, 0.9824157357215881),
                 (0.0, -0.6052581667900085, 0.9746553301811218),
                 (0.0, -0.41136935353279114, 0.9890152812004089),
                 (0.0, -0.1750461459159851, 0.9496538043022156),
                 (0.0, -0.2946951985359192, 0.9636090397834778),
                 (0.0, -0.3303301930427551, 0.5254422426223755),
                 (0.0, -0.4833628237247467, 0.5681862831115723),
                 (0.0, -0.5755491256713867, 0.7135924100875854),
                 (0.057587288320064545, -0.6969798803329468, 0.7781019806861877),
                 (0.0, -0.7020905017852783, 0.7560733556747437),
                 (0.07563044875860214, -0.6859140396118164, 0.9028666019439697),
                 (0.05388345196843147, -0.6811488270759583, 0.9632381796836853),
                 (0.0, -0.6805074214935303, 0.9752649664878845),
                 (-0.057587288320064545, -0.6969798803329468, 0.7781019806861877),
                 (-0.07563044875860214, -0.6859140396118164, 0.9028666019439697),
                 (0.0, -0.16838231682777405, 0.63470458984375),
                 (-0.05388345196843147, -0.6811488270759583, 0.9632381796836853),
                 (0.11067497730255127, -0.17647023499011993, 0.8230345845222473),
                 (0.05620373785495758, -0.1686878502368927, 0.5577514171600342),
                 (0.08819075673818588, -0.17238657176494598, 0.6356162428855896),
                 (-0.11067497730255127, -0.17647023499011993, 0.8230345845222473),
                 (-0.05620373785495758, -0.1686878502368927, 0.5577514171600342),
                 (-0.08819075673818588, -0.17238657176494598, 0.6356162428855896),
                 (0.0, -0.17237015068531036, 0.8231793642044067),
                 (0.05896876007318497, -0.016075968742370605, 0.6235354542732239),
                 (0.06189344823360443, 0.17955657839775085, 0.6733417510986328),
                 (0.08432316035032272, 0.17476312816143036, 0.9521997570991516),
                 (0.0, 0.1767844557762146, 0.7298694252967834),
                 (-0.11302075535058975, -0.02541547268629074, 0.8451057076454163),
                 (0.11302075535058975, -0.02541547268629074, 0.8451057076454163),
                 (-0.07820078730583191, -0.02760903537273407, 0.9403088092803955),
                 (0.0, -0.012588351033627987, 0.6076425909996033),
                 (0.07984764873981476, 0.1767844557762146, 0.7298694252967834),
                 (0.08931660652160645, -0.01964893937110901, 0.6867190599441528),
                 (-0.05896876007318497, -0.016075968742370605, 0.6235354542732239),
                 (-0.06189344823360443, 0.17955657839775085, 0.6733417510986328),
                 (-0.08432316035032272, 0.17476312816143036, 0.9521997570991516),
                 (-0.07984764873981476, 0.1767844557762146, 0.7298694252967834),
                 (-0.08931660652160645, -0.01964893937110901, 0.6867190599441528),
                 (0.07820078730583191, -0.02760903537273407, 0.9403088092803955),
                 (0.0910625085234642, 0.17438772320747375, 0.8692984580993652),
                 (0.0, -0.028729792684316635, 0.9574318528175354),
                 (0.0, 0.1815250813961029, 0.6574169993400574),
                 (0.0, 0.17465342581272125, 0.9693406224250793),
                 (-0.0910625085234642, 0.17438772320747375, 0.8692984580993652),
                 (0.0, 0.17438772320747375, 0.8692984580993652),
                 (0.0, -0.02541547268629074, 0.8451057076454163),
                 (0.0, -0.01964893937110901, 0.6867190599441528),
                 (0.05620373785495758, -0.1646166741847992, 0.5577514171600342),
                 (0.07820078730583191, -0.03316264599561691, 0.9403088092803955),
                 (-0.08931660652160645, -0.025202546268701553, 0.6867190599441528),
                 (-0.05896876007318497, -0.02162957563996315, 0.6235354542732239),
                 (0.08931660652160645, -0.025202546268701553, 0.6867190599441528),
                 (0.05896876007318497, -0.02162957563996315, 0.6235354542732239),
                 (0.11067497730255127, -0.17239905893802643, 0.8230345845222473),
                 (0.11302075535058975, -0.030969081446528435, 0.8451057076454163),
                 (0.08819075673818588, -0.16831539571285248, 0.6356162428855896),
                 (-0.05620373785495758, -0.1646166741847992, 0.5577514171600342),
                 (-0.07820078730583191, -0.03316264599561691, 0.9403088092803955),
                 (0.0, -0.1643614023923874, 0.6370804905891418),
                 (0.0, -0.16829191148281097, 0.8228458762168884),
                 (-0.11067497730255127, -0.17239905893802643, 0.8230345845222473),
                 (-0.11302075535058975, -0.030969081446528435, 0.8451057076454163),
                 (-0.08819075673818588, -0.16831539571285248, 0.6356162428855896),
                 (0.0, -0.018141958862543106, 0.6076425909996033),
                 (0.0, -0.03428339958190918, 0.9574318528175354),
                 (0.08472518622875214, -0.1727839857339859, 0.9325880408287048),
                 (0.0, -0.1623237580060959, 0.5407760143280029),
                 (0.0, -0.1709749698638916, 0.9496538043022156),
                 (-0.08472518622875214, -0.1727839857339859, 0.9325880408287048),
                 (0.0, -0.029112663120031357, 0.8453806042671204),
                 (0.0, -0.021757476031780243, 0.6859917640686035),
                 (0.057587288320064545, -0.6969798803329468, 0.7781019806861877),
                 (0.05388345196843147, -0.6811488270759583, 0.9632381796836853),
                 (0.08718790113925934, -0.6903697848320007, 0.8465144634246826),
                 (0.07563044875860214, -0.6859140396118164, 0.9028666019439697),
                 (0.03470434248447418, -0.8738143444061279, 0.7174659967422485),
                 (0.06143056973814964, -0.8814868330955505, 0.9440340995788574),
                 (0.059007540345191956, -0.7375351190567017, 0.7640210390090942),
                 (0.05404691398143768, -0.7417194843292236, 0.971408486366272),
                 (0.08511073142290115, -0.7401992082595825, 0.896059513092041),
                 (0.07768362760543823, -0.8885688185691833, 0.8733245730400085),
                 (0.09358987957239151, -0.7389774322509766, 0.8355056643486023),
                 (0.06311071664094925, -0.9055845737457275, 0.8084007501602173),
                 (0.061416756361722946, -0.8232482671737671, 0.7353065013885498),
                 (0.0633196160197258, -0.8348855376243591, 0.9697386026382446),
                 (0.10646019130945206, -0.834733247756958, 0.8829083442687988),
                 (0.10541260987520218, -0.8391169905662537, 0.8183815479278564),
                 (-0.057587288320064545, -0.6969798803329468, 0.7781019806861877),
                 (-0.05388345196843147, -0.6811488270759583, 0.9632381796836853),
                 (-0.08718790113925934, -0.6903697848320007, 0.8465144634246826),
                 (-0.07563044875860214, -0.6859140396118164, 0.9028666019439697),
                 (-0.03470434248447418, -0.8738143444061279, 0.7174659967422485),
                 (-0.06143056973814964, -0.8814868330955505, 0.9440340995788574),
                 (-0.059007540345191956, -0.7375351190567017, 0.7640210390090942),
                 (-0.05404691398143768, -0.7417194843292236, 0.971408486366272),
                 (-0.08511073142290115, -0.7401992082595825, 0.896059513092041),
                 (-0.07768362760543823, -0.8885688185691833, 0.8733245730400085),
                 (-0.09358987957239151, -0.7389774322509766, 0.8355056643486023),
                 (-0.06311071664094925, -0.9055845737457275, 0.8084007501602173),
                 (-0.061416756361722946, -0.8232482671737671, 0.7353065013885498),
                 (-0.0633196160197258, -0.8348855376243591, 0.9697386026382446),
                 (-0.10646019130945206, -0.834733247756958, 0.8829083442687988),
                 (-0.10541260987520218, -0.8391169905662537, 0.8183815479278564),
                 (0.0, -0.7020905017852783, 0.7560733556747437),
                 (0.0, -0.6805074214935303, 0.9752649664878845),
                 (0.0, -0.8242514133453369, 0.7100937366485596),
                 (0.0, -0.8886902928352356, 0.7026829719543457),
                 (0.0, -0.8368985056877136, 0.982197105884552),
                 (0.0, -0.7419465184211731, 0.9826626777648926),
                 (0.0, -0.9126124382019043, 0.8776885867118835),
                 (0.0, -0.9393478035926819, 0.7997477054595947),
                 (0.0, -0.8993046879768372, 0.9487780332565308),
                 (0.0, -0.7372337579727173, 0.744465172290802),
                 (0.0, -0.687667727470398, 0.9025470018386841),
                 (0.0, -0.6931436657905579, 0.8469349145889282),
                 (0.04012705385684967, -0.7963857054710388, 0.9602919220924377),
                 (0.08607795089483261, -0.8247184753417969, 0.9964195489883423),
                 (0.03662554919719696, -0.7881830930709839, 0.9686222672462463),
                 (0.08257638663053513, -0.8165158629417419, 1.00475013256073),
                 (0.1018541231751442, -0.7713778614997864, 0.9048680067062378),
                 (0.13181611895561218, -0.7893930673599243, 0.9610516428947449),
                 (0.10205558687448502, -0.7611573934555054, 0.9115343689918518),
                 (0.13201752305030823, -0.7791725397109985, 0.9677180051803589),
                 (0.067918561398983, -0.7633910179138184, 0.948388397693634),
                 (0.11770407110452652, -0.7923014760017395, 1.0080137252807617),
                 (0.07142012566328049, -0.7715935707092285, 0.9400577545166016),
                 (0.12120562046766281, -0.8005040884017944, 0.9996829628944397),
                 (-0.04012705385684967, -0.7963857054710388, 0.9602919220924377),
                 (-0.08607795089483261, -0.8247184753417969, 0.9964195489883423),
                 (-0.03662554919719696, -0.7881830930709839, 0.9686222672462463),
                 (-0.08257638663053513, -0.8165158629417419, 1.00475013256073),
                 (-0.1018541231751442, -0.7713778614997864, 0.9048680067062378),
                 (-0.13181611895561218, -0.7893930673599243, 0.9610516428947449),
                 (-0.10205558687448502, -0.7611573934555054, 0.9115343689918518),
                 (-0.13201752305030823, -0.7791725397109985, 0.9677180051803589),
                 (-0.067918561398983, -0.7633910179138184, 0.948388397693634),
                 (-0.11770407110452652, -0.7923014760017395, 1.0080137252807617),
                 (-0.07142012566328049, -0.7715935707092285, 0.9400577545166016),
                 (-0.12120562046766281, -0.8005040884017944, 0.9996829628944397),
                 (-0.01596546173095703, 1.082025170326233, 0.7756398320198059),
                 (-0.01596546173095703, 1.083984613418579, 0.8075105547904968),
                 (-0.014130198396742344, 1.2830655574798584, 0.7657329440116882),
                 (-0.014130198396742344, 1.2843687534332275, 0.7939633131027222),
                 (0.01596546173095703, 1.082025170326233, 0.7756398320198059),
                 (0.01596546173095703, 1.083984613418579, 0.8075105547904968),
                 (0.014130198396742344, 1.2830655574798584, 0.7657329440116882),
                 (0.014130198396742344, 1.2843687534332275, 0.7939633131027222),
                 (-0.016862845048308372, 1.1771628856658936, 0.7687385678291321),
                 (-0.016862845048308372, 1.1786494255065918, 0.8024314045906067),
                 (0.016862845048308372, 1.1788101196289062, 0.7687385678291321),
                 (0.016862845048308372, 1.1802966594696045, 0.8024314045906067),
                 (-0.016862845048308372, 1.1802966594696045, 0.8024314045906067),
                 (0.016862845048308372, 1.1786494255065918, 0.8024314045906067),
                 (0.016862845048308372, 1.1771628856658936, 0.7687385678291321),
                 (-0.016862845048308372, 1.1788101196289062, 0.7687385678291321),
                 (-0.024661125615239143, 0.5141979455947876, 0.8460507392883301),
                 (-0.024661125615239143, 0.5224400758743286, 0.8946794867515564),
                 (-0.023465203121304512, 0.6802032589912415, 0.8127827644348145),
                 (-0.023465203121304512, 0.6884639263153076, 0.8589804768562317),
                 (0.024661125615239143, 0.5141979455947876, 0.8460507392883301),
                 (0.024661125615239143, 0.5224400758743286, 0.8946794867515564),
                 (0.023465203121304512, 0.6802032589912415, 0.8127827644348145),
                 (0.023465203121304512, 0.6884639263153076, 0.8589804768562317),
                 (-0.027080589905381203, 0.5878998041152954, 0.8270138502120972),
                 (-0.027080589905381203, 0.598332405090332, 0.8801607489585876),
                 (0.027080589905381203, 0.5898871421813965, 0.826770007610321),
                 (0.027080589905381203, 0.6003197431564331, 0.8799169659614563),
                 (-0.027080589905381203, 0.6003197431564331, 0.8799169659614563),
                 (0.027080589905381203, 0.598332405090332, 0.8801607489585876),
                 (0.027080589905381203, 0.5878998041152954, 0.8270138502120972),
                 (-0.027080589905381203, 0.5898871421813965, 0.826770007610321),
                 (-0.023750703781843185, 0.6822572350502014, 0.8120802640914917),
                 (-0.023750703781843185, 0.6907231211662292, 0.8588212132453918),
                 (-0.018692759796977043, 0.8808243870735168, 0.7900179028511047),
                 (-0.018692759796977043, 0.8852187395095825, 0.827144205570221),
                 (0.023750703781843185, 0.6822572350502014, 0.8120802640914917),
                 (0.023750703781843185, 0.6907231211662292, 0.8588212132453918),
                 (0.018692759796977043, 0.8808243870735168, 0.7900179028511047),
                 (0.018692759796977043, 0.8852187395095825, 0.827144205570221),
                 (-0.020352089777588844, 0.7821575999259949, 0.8010920286178589),
                 (-0.020352089777588844, 0.7874199151992798, 0.8414466977119446),
                 (0.020352089777588844, 0.7835792899131775, 0.8009284138679504),
                 (0.020352089777588844, 0.7888415455818176, 0.8412831425666809),
                 (-0.020352089777588844, 0.7888415455818176, 0.8412831425666809),
                 (0.020352089777588844, 0.7874199151992798, 0.8414466977119446),
                 (0.020352089777588844, 0.7821575999259949, 0.8010920286178589),
                 (-0.020352089777588844, 0.7835792899131775, 0.8009284138679504),
                 (-0.018714118748903275, 0.8819708228111267, 0.7895907759666443),
                 (-0.018714118748903275, 0.8862378001213074, 0.8267749547958374),
                 (-0.016563577577471733, 1.0812734365463257, 0.7750586867332458),
                 (-0.016563577577471733, 1.0832319259643555, 0.8081279993057251),
                 (0.018714118748903275, 0.8819708228111267, 0.7895907759666443),
                 (0.018714118748903275, 0.8862378001213074, 0.8267749547958374),
                 (0.016563577577471733, 1.0812734365463257, 0.7750586867332458),
                 (0.016563577577471733, 1.0832319259643555, 0.8081279993057251),
                 (-0.01723606511950493, 0.9859088063240051, 0.7810826301574707),
                 (-0.01723606511950493, 0.9896747469902039, 0.8153355121612549),
                 (0.01723606511950493, 0.9868942499160767, 0.7811930179595947),
                 (0.01723606511950493, 0.9906601905822754, 0.8154458403587341),
                 (-0.01723606511950493, 0.9906601905822754, 0.8154458403587341),
                 (0.01723606511950493, 0.9896747469902039, 0.8153355121612549),
                 (0.01723606511950493, 0.9859088063240051, 0.7810826301574707),
                 (-0.01723606511950493, 0.9868942499160767, 0.7811930179595947),
                 (0.09827887266874313, -0.5117530822753906, 0.0),
                 (0.09717006236314774, -0.4924156367778778, 0.045541223138570786),
                 (0.16299515962600708, -0.5117530822753906, 0.0),
                 (0.16410395503044128, -0.4924156367778778, 0.04551851376891136),
                 (0.10451970249414444, -0.39790400862693787, 0.0),
                 (0.1050414964556694, -0.3990643322467804, 0.03305615484714508),
                 (0.15675431489944458, -0.40162989497184753, 0.0),
                 (0.1562325358390808, -0.3990643322467804, 0.03303344547748566),
                 (0.09974882751703262, -0.44384780526161194, 0.046266473829746246),
                 (0.1639576256275177, -0.44384780526161194, 0.04624944180250168),
                 (0.16938957571983337, -0.4498165249824524, 0.0),
                 (0.09431687742471695, -0.4498165249824524, 0.0),
                 (0.1306370198726654, -0.521393895149231, 0.0),
                 (0.1306370198726654, -0.49753379821777344, 0.047297652810811996),
                 (0.1306370198726654, -0.39790400862693787, 0.0),
                 (0.1306370198726654, -0.3953384459018707, 0.03304480016231537),
                 (0.1306370198726654, -0.4498165249824524, 0.0),
                 (0.1306370198726654, -0.44384780526161194, 0.048900142312049866),
                 (0.10188263654708862, -0.431137353181839, 0.47014352679252625),
                 (0.10188263654708862, -0.31587308645248413, 0.49728766083717346),
                 (0.17456211149692535, -0.431137353181839, 0.47014352679252625),
                 (0.17456211149692535, -0.31587308645248413, 0.49728766083717346),
                 (0.10545903444290161, -0.33880850672721863, 0.158168762922287),
                 (0.10545903444290161, -0.39920786023139954, 0.16141970455646515),
                 (0.1581336259841919, -0.33880850672721863, 0.158168762922287),
                 (0.1581336259841919, -0.39920786023139954, 0.16141970455646515),
                 (0.10932392627000809, -0.33414822816848755, 0.29378756880760193),
                 (0.1093239113688469, -0.4055924117565155, 0.29319536685943604),
                 (0.16069576144218445, -0.4055924117565155, 0.29319536685943604),
                 (0.16069576144218445, -0.33414822816848755, 0.2937875986099243),
                 (0.11107421666383743, -0.41559892892837524, 0.7551149725914001),
                 (0.17027683556079865, -0.41491395235061646, 0.7546055912971497),
                 (0.11235684156417847, -0.5257807970046997, 0.7173330187797546),
                 (0.15995320677757263, -0.5253937840461731, 0.7173789739608765),
                 (0.1071413978934288, -0.42234668135643005, 0.463803231716156),
                 (0.10488332808017731, -0.32467716932296753, 0.46933433413505554),
                 (0.16769684851169586, -0.42216548323631287, 0.4635984003543854),
                 (0.16762657463550568, -0.32524746656417847, 0.4697876274585724),
                 (0.11031632125377655, -0.39453381299972534, 0.177354097366333),
                 (0.11031632125377655, -0.3465924561023712, 0.1766584813594818),
                 (0.15150582790374756, -0.39453381299972534, 0.177354097366333),
                 (0.15150582790374756, -0.3465924561023712, 0.1766584813594818),
                 (0.11296972632408142, -0.38363534212112427, 0.018328148871660233),
                 (0.11296972632408142, -0.41607436537742615, 0.02280096523463726),
                 (0.1488524228334427, -0.38363534212112427, 0.018328148871660233),
                 (0.1488524228334427, -0.41607436537742615, 0.02280096523463726),
                 (0.11397372931241989, -0.5534531474113464, 0.8241247534751892),
                 (0.11566232144832611, -0.4363173246383667, 0.8535783290863037),
                 (0.15749013423919678, -0.5532175302505493, 0.8236838579177856),
                 (0.16726748645305634, -0.43549951910972595, 0.8527100086212158),
                 (0.16766171157360077, -0.37483370304107666, 0.46588134765625),
                 (0.10601235926151276, -0.3743283748626709, 0.4662039577960968),
                 (0.11171552538871765, -0.4695969820022583, 0.7349854111671448),
                 (0.16511501371860504, -0.469061017036438, 0.7351908087730408),
                 (0.11134863644838333, -0.47269225120544434, 0.5843010544776917),
                 (0.1653328537940979, -0.4719592332839966, 0.5841910243034363),
                 (0.10646457970142365, -0.3675430715084076, 0.6155704259872437),
                 (0.16735857725143433, -0.36671382188796997, 0.61460942029953),
                 (0.11496087163686752, -0.4964886009693146, 0.8537061810493469),
                 (0.16252166032791138, -0.4961804151535034, 0.8532702326774597),
                 (0.10890660434961319, -0.41976794600486755, 0.5994431972503662),
                 (0.1663457304239273, -0.41933655738830566, 0.5994002223014832),
                 (0.11164302378892899, -0.36511391401290894, 0.09749331325292587),
                 (0.11164302378892899, -0.40530407428741455, 0.10007753223180771),
                 (0.15017911791801453, -0.40530407428741455, 0.10007753223180771),
                 (0.15017911791801453, -0.36511391401290894, 0.09749331325292587),
                 (0.11490471661090851, 0.4849459230899811, 0.0),
                 (0.11586369574069977, 0.4962298572063446, 0.04643349349498749),
                 (0.1902359127998352, 0.4849459230899811, 0.0),
                 (0.18927693367004395, 0.4962298572063446, 0.046410784125328064),
                 (0.12578783929347992, 0.5976948738098145, 0.0),
                 (0.12578783929347992, 0.6002604365348816, 0.035208143293857574),
                 (0.17915014922618866, 0.5976948738098145, 0.0),
                 (0.17915014922618866, 0.6002604365348816, 0.03518543392419815),
                 (0.1205616146326065, 0.5531315207481384, 0.04132780805230141),
                 (0.184578999876976, 0.5531315207481384, 0.041308969259262085),
                 (0.19210544228553772, 0.5480358004570007, 0.0),
                 (0.1130351796746254, 0.5480358004570007, 0.0),
                 (0.15257032215595245, 0.46942055225372314, 0.0),
                 (0.15257032215595245, 0.48070448637008667, 0.05102775990962982),
                 (0.1524689942598343, 0.6015845537185669, 0.0),
                 (0.1524689942598343, 0.604150116443634, 0.03519678860902786),
                 (0.15257030725479126, 0.5446342825889587, 0.0),
                 (0.15255416929721832, 0.554552435874939, 0.04478077590465546),
                 (0.12660187482833862, 0.596466064453125, 0.23986366391181946),
                 (0.12292537093162537, 0.3743118345737457, 0.47638097405433655),
                 (0.12660187482833862, 0.6635392904281616, 0.2707882225513458),
                 (0.12577944993972778, 0.5206652879714966, 0.5428809523582458),
                 (0.1785387545824051, 0.596466064453125, 0.23986366391181946),
                 (0.18536825478076935, 0.3743118345737457, 0.47638097405433655),
                 (0.1785387545824051, 0.6635392904281616, 0.2707882225513458),
                 (0.18609458208084106, 0.5206652879714966, 0.5428809523582458),
                 (0.12672948837280273, 0.5101186633110046, 0.3370865285396576),
                 (0.12672948837280273, 0.5961101055145264, 0.3877023160457611),
                 (0.17841117084026337, 0.5961101055145264, 0.3877023160457611),
                 (0.17841117084026337, 0.5101186633110046, 0.3370865285396576),
                 (0.12660187482833862, 0.5867778062820435, 0.2503792345523834),
                 (0.12660187482833862, 0.6764165163040161, 0.2866114377975464),
                 (0.1785387545824051, 0.5867778062820435, 0.2503792345523834),
                 (0.1785387545824051, 0.6764165163040161, 0.2866114377975464),
                 (0.13153809309005737, 0.6210917830467224, 0.02121507190167904),
                 (0.13153809309005737, 0.582276463508606, 0.030803587287664413),
                 (0.17360256612300873, 0.6210917830467224, 0.02121507190167904),
                 (0.17360256612300873, 0.582276463508606, 0.030803587287664413),
                 (0.129069983959198, 0.6469462513923645, 0.12839113175868988),
                 (0.1760706603527069, 0.6469462513923645, 0.12839113175868988),
                 (0.129069983959198, 0.5930569171905518, 0.13768918812274933),
                 (0.1760706603527069, 0.5930569171905518, 0.13768918812274933),
                 (0.1211351677775383, 0.3772279620170593, 0.46867915987968445),
                 (0.13059869408607483, 0.2635210156440735, 0.7816826701164246),
                 (0.1211351677775383, 0.525553286075592, 0.5371626019477844),
                 (0.11800490319728851, 0.4808467924594879, 0.8115125894546509),
                 (0.18894866108894348, 0.3772279620170593, 0.46867915987968445),
                 (0.1804700344800949, 0.2635210156440735, 0.7802345156669617),
                 (0.18894866108894348, 0.525553286075592, 0.5371626019477844),
                 (0.15708580613136292, 0.4808467924594879, 0.8103675842285156),
                 (0.12137100845575333, 0.29415133595466614, 0.6334457397460938),
                 (0.11791791021823883, 0.5033584833145142, 0.6814107894897461),
                 (0.1852719634771347, 0.5033584833145142, 0.6794816255569458),
                 (0.1943436861038208, 0.29415133595466614, 0.6313692331314087),
                 (0.1328616738319397, 0.27942997217178345, 0.860396683216095),
                 (0.12140750139951706, 0.46384596824645996, 0.8638986945152283),
                 (0.14387808740139008, 0.4637758731842041, 0.8632370829582214),
                 (0.15903490781784058, 0.27949342131614685, 0.8596254587173462),
                 (0.12430179864168167, 0.3721839189529419, 0.7965975999832153),
                 (0.1211351677775383, 0.4513906240463257, 0.5029208660125732),
                 (0.18894866108894348, 0.4513906240463257, 0.5029208660125732),
                 (0.16877791285514832, 0.3721839189529419, 0.795301079750061),
                 (0.18980783224105835, 0.39875489473342896, 0.6554254293441772),
                 (0.11964446306228638, 0.39875489473342896, 0.6574282646179199),
                 (0.15145650506019592, 0.37163466215133667, 0.8808375597000122),
                 (0.12713459134101868, 0.3716379702091217, 0.8815540075302124),
                 (-0.09827887266874313, -0.5117530822753906, 0.0),
                 (-0.09717006236314774, -0.4924156367778778, 0.045541223138570786),
                 (-0.16299515962600708, -0.5117530822753906, 0.0),
                 (-0.16410395503044128, -0.4924156367778778, 0.04551851376891136),
                 (-0.10451970249414444, -0.39790400862693787, 0.0),
                 (-0.1050414964556694, -0.3990643322467804, 0.03305615484714508),
                 (-0.15675431489944458, -0.40162989497184753, 0.0),
                 (-0.1562325358390808, -0.3990643322467804, 0.03303344547748566),
                 (-0.09974882751703262, -0.44384780526161194, 0.046266473829746246),
                 (-0.1639576256275177, -0.44384780526161194, 0.04624944180250168),
                 (-0.16938957571983337, -0.4498165249824524, 0.0),
                 (-0.09431687742471695, -0.4498165249824524, 0.0),
                 (-0.1306370198726654, -0.521393895149231, 0.0),
                 (-0.1306370198726654, -0.49753379821777344, 0.047297652810811996),
                 (-0.1306370198726654, -0.39790400862693787, 0.0),
                 (-0.1306370198726654, -0.3953384459018707, 0.03304480016231537),
                 (-0.1306370198726654, -0.4498165249824524, 0.0),
                 (-0.1306370198726654, -0.44384780526161194, 0.048900142312049866),
                 (-0.10188263654708862, -0.431137353181839, 0.47014352679252625),
                 (-0.10188263654708862, -0.31587308645248413, 0.49728766083717346),
                 (-0.17456211149692535, -0.431137353181839, 0.47014352679252625),
                 (-0.17456211149692535, -0.31587308645248413, 0.49728766083717346),
                 (-0.10545903444290161, -0.33880850672721863, 0.158168762922287),
                 (-0.10545903444290161, -0.39920786023139954, 0.16141970455646515),
                 (-0.1581336259841919, -0.33880850672721863, 0.158168762922287),
                 (-0.1581336259841919, -0.39920786023139954, 0.16141970455646515),
                 (-0.10932392627000809, -0.33414822816848755, 0.29378756880760193),
                 (-0.1093239113688469, -0.4055924117565155, 0.29319536685943604),
                 (-0.16069576144218445, -0.4055924117565155, 0.29319536685943604),
                 (-0.16069576144218445, -0.33414822816848755, 0.2937875986099243),
                 (-0.11107421666383743, -0.41559892892837524, 0.7551149725914001),
                 (-0.17027683556079865, -0.41491395235061646, 0.7546055912971497),
                 (-0.11235684156417847, -0.5257807970046997, 0.7173330187797546),
                 (-0.15995320677757263, -0.5253937840461731, 0.7173789739608765),
                 (-0.1071413978934288, -0.42234668135643005, 0.463803231716156),
                 (-0.10488332808017731, -0.32467716932296753, 0.46933433413505554),
                 (-0.16769684851169586, -0.42216548323631287, 0.4635984003543854),
                 (-0.16762657463550568, -0.32524746656417847, 0.4697876274585724),
                 (-0.11031632125377655, -0.39453381299972534, 0.177354097366333),
                 (-0.11031632125377655, -0.3465924561023712, 0.1766584813594818),
                 (-0.15150582790374756, -0.39453381299972534, 0.177354097366333),
                 (-0.15150582790374756, -0.3465924561023712, 0.1766584813594818),
                 (-0.11296972632408142, -0.38363534212112427, 0.018328148871660233),
                 (-0.11296972632408142, -0.41607436537742615, 0.02280096523463726),
                 (-0.1488524228334427, -0.38363534212112427, 0.018328148871660233),
                 (-0.1488524228334427, -0.41607436537742615, 0.02280096523463726),
                 (-0.11397372931241989, -0.5534531474113464, 0.8241247534751892),
                 (-0.11566232144832611, -0.4363173246383667, 0.8535783290863037),
                 (-0.15749013423919678, -0.5532175302505493, 0.8236838579177856),
                 (-0.16726748645305634, -0.43549951910972595, 0.8527100086212158),
                 (-0.16766171157360077, -0.37483370304107666, 0.46588134765625),
                 (-0.10601235926151276, -0.3743283748626709, 0.4662039577960968),
                 (-0.11171552538871765, -0.4695969820022583, 0.7349854111671448),
                 (-0.16511501371860504, -0.469061017036438, 0.7351908087730408),
                 (-0.11134863644838333, -0.47269225120544434, 0.5843010544776917),
                 (-0.1653328537940979, -0.4719592332839966, 0.5841910243034363),
                 (-0.10646457970142365, -0.3675430715084076, 0.6155704259872437),
                 (-0.16735857725143433, -0.36671382188796997, 0.61460942029953),
                 (-0.11496087163686752, -0.4964886009693146, 0.8537061810493469),
                 (-0.16252166032791138, -0.4961804151535034, 0.8532702326774597),
                 (-0.10890660434961319, -0.41976794600486755, 0.5994431972503662),
                 (-0.1663457304239273, -0.41933655738830566, 0.5994002223014832),
                 (-0.11164302378892899, -0.36511391401290894, 0.09749331325292587),
                 (-0.11164302378892899, -0.40530407428741455, 0.10007753223180771),
                 (-0.15017911791801453, -0.40530407428741455, 0.10007753223180771),
                 (-0.15017911791801453, -0.36511391401290894, 0.09749331325292587),
                 (-0.11490471661090851, 0.4849459230899811, 0.0),
                 (-0.11586369574069977, 0.4962298572063446, 0.04643349349498749),
                 (-0.1902359127998352, 0.4849459230899811, 0.0),
                 (-0.18927693367004395, 0.4962298572063446, 0.046410784125328064),
                 (-0.12578783929347992, 0.5976948738098145, 0.0),
                 (-0.12578783929347992, 0.6002604365348816, 0.035208143293857574),
                 (-0.17915014922618866, 0.5976948738098145, 0.0),
                 (-0.17915014922618866, 0.6002604365348816, 0.03518543392419815),
                 (-0.1205616146326065, 0.5531315207481384, 0.04132780805230141),
                 (-0.184578999876976, 0.5531315207481384, 0.041308969259262085),
                 (-0.19210544228553772, 0.5480358004570007, 0.0),
                 (-0.1130351796746254, 0.5480358004570007, 0.0),
                 (-0.15257032215595245, 0.46942055225372314, 0.0),
                 (-0.15257032215595245, 0.48070448637008667, 0.05102775990962982),
                 (-0.1524689942598343, 0.6015845537185669, 0.0),
                 (-0.1524689942598343, 0.604150116443634, 0.03519678860902786),
                 (-0.15257030725479126, 0.5446342825889587, 0.0),
                 (-0.15255416929721832, 0.554552435874939, 0.04478077590465546),
                 (-0.12660187482833862, 0.596466064453125, 0.23986366391181946),
                 (-0.12292537093162537, 0.3743118345737457, 0.47638097405433655),
                 (-0.12660187482833862, 0.6635392904281616, 0.2707882225513458),
                 (-0.12577944993972778, 0.5206652879714966, 0.5428809523582458),
                 (-0.1785387545824051, 0.596466064453125, 0.23986366391181946),
                 (-0.18536825478076935, 0.3743118345737457, 0.47638097405433655),
                 (-0.1785387545824051, 0.6635392904281616, 0.2707882225513458),
                 (-0.18609458208084106, 0.5206652879714966, 0.5428809523582458),
                 (-0.12672948837280273, 0.5101186633110046, 0.3370865285396576),
                 (-0.12672948837280273, 0.5961101055145264, 0.3877023160457611),
                 (-0.17841117084026337, 0.5961101055145264, 0.3877023160457611),
                 (-0.17841117084026337, 0.5101186633110046, 0.3370865285396576),
                 (-0.12660187482833862, 0.5867778062820435, 0.2503792345523834),
                 (-0.12660187482833862, 0.6764165163040161, 0.2866114377975464),
                 (-0.1785387545824051, 0.5867778062820435, 0.2503792345523834),
                 (-0.1785387545824051, 0.6764165163040161, 0.2866114377975464),
                 (-0.13153809309005737, 0.6210917830467224, 0.02121507190167904),
                 (-0.13153809309005737, 0.582276463508606, 0.030803587287664413),
                 (-0.17360256612300873, 0.6210917830467224, 0.02121507190167904),
                 (-0.17360256612300873, 0.582276463508606, 0.030803587287664413),
                 (-0.129069983959198, 0.6469462513923645, 0.12839113175868988),
                 (-0.1760706603527069, 0.6469462513923645, 0.12839113175868988),
                 (-0.129069983959198, 0.5930569171905518, 0.13768918812274933),
                 (-0.1760706603527069, 0.5930569171905518, 0.13768918812274933),
                 (-0.1211351677775383, 0.3772279620170593, 0.46867915987968445),
                 (-0.13059869408607483, 0.2635210156440735, 0.7816826701164246),
                 (-0.1211351677775383, 0.525553286075592, 0.5371626019477844),
                 (-0.11800490319728851, 0.4808467924594879, 0.8115125894546509),
                 (-0.18894866108894348, 0.3772279620170593, 0.46867915987968445),
                 (-0.1804700344800949, 0.2635210156440735, 0.7802345156669617),
                 (-0.18894866108894348, 0.525553286075592, 0.5371626019477844),
                 (-0.15708580613136292, 0.4808467924594879, 0.8103675842285156),
                 (-0.12137100845575333, 0.29415133595466614, 0.6334457397460938),
                 (-0.11791791021823883, 0.5033584833145142, 0.6814107894897461),
                 (-0.1852719634771347, 0.5033584833145142, 0.6794816255569458),
                 (-0.1943436861038208, 0.29415133595466614, 0.6313692331314087),
                 (-0.1328616738319397, 0.27942997217178345, 0.860396683216095),
                 (-0.12140750139951706, 0.46384596824645996, 0.8638986945152283),
                 (-0.14387808740139008, 0.4637758731842041, 0.8632370829582214),
                 (-0.15903490781784058, 0.27949342131614685, 0.8596254587173462),
                 (-0.12430179864168167, 0.3721839189529419, 0.7965975999832153),
                 (-0.1211351677775383, 0.4513906240463257, 0.5029208660125732),
                 (-0.18894866108894348, 0.4513906240463257, 0.5029208660125732),
                 (-0.16877791285514832, 0.3721839189529419, 0.795301079750061),
                 (-0.18980783224105835, 0.39875489473342896, 0.6554254293441772),
                 (-0.11964446306228638, 0.39875489473342896, 0.6574282646179199),
                 (-0.15145650506019592, 0.37163466215133667, 0.8808375597000122),
                 (-0.12713459134101868, 0.3716379702091217, 0.8815540075302124))

        faces = ((23, 22, 1, 6),
                 (8, 2, 0, 7),
                 (21, 3, 1, 22),
                 (26, 27, 2, 8),
                 (8, 7, 6, 5),
                 (23, 6, 7, 18),
                 (31, 12, 14, 13),
                 (25, 28, 3, 21),
                 (2, 20, 19, 0),
                 (3, 5, 6, 1),
                 (26, 8, 5, 4),
                 (27, 24, 20, 2),
                 (19, 18, 7, 0),
                 (23, 15, 10, 22),
                 (17, 16, 9, 11),
                 (21, 22, 10, 12),
                 (25, 21, 12, 31),
                 (15, 16, 17, 14),
                 (15, 23, 18, 16),
                 (29, 17, 11, 30),
                 (11, 9, 19, 20),
                 (12, 10, 15, 14),
                 (29, 13, 14, 17),
                 (32, 4, 28, 25),
                 (19, 9, 16, 18),
                 (30, 11, 20, 24),
                 (33, 32, 13, 29),
                 (24, 33, 29, 30),
                 (26, 4, 32, 33),
                 (13, 32, 25, 31),
                 (27, 26, 33, 24),
                 (44, 37, 35, 46),
                 (46, 35, 85, 84),
                 (72, 34, 82, 83),
                 (81, 36, 34, 72),
                 (80, 41, 36, 81),
                 (45, 42, 37, 44),
                 (40, 78, 76, 42),
                 (93, 91, 43, 50),
                 (50, 43, 45, 49),
                 (43, 40, 42, 45),
                 (91, 38, 40, 43),
                 (58, 60, 76, 78),
                 (45, 44, 51, 49),
                 (46, 84, 48, 47),
                 (44, 46, 47, 51),
                 (35, 75, 86, 85),
                 (37, 74, 75, 35),
                 (50, 49, 41, 39),
                 (42, 76, 74, 37),
                 (56, 58, 78, 77),
                 (79, 39, 41, 80),
                 (93, 50, 39, 92),
                 (36, 51, 47, 34),
                 (34, 47, 48, 82),
                 (41, 49, 51, 36),
                 (63, 65, 53, 55),
                 (65, 88, 90, 53),
                 (72, 83, 87, 52),
                 (81, 72, 52, 54),
                 (80, 81, 54, 59),
                 (64, 63, 55, 60),
                 (28, 4, 5, 3),
                 (97, 89, 96, 94),
                 (64, 62, 70, 69),
                 (62, 64, 60, 58),
                 (63, 64, 69, 71),
                 (88, 65, 67, 68),
                 (65, 63, 71, 67),
                 (73, 92, 39, 79),
                 (53, 90, 86, 75),
                 (55, 53, 75, 74),
                 (57, 59, 69, 70),
                 (60, 55, 74, 76),
                 (70, 62, 94, 96),
                 (95, 57, 70, 96),
                 (48, 84, 66, 61),
                 (66, 84, 85, 86),
                 (66, 86, 90, 88),
                 (91, 93, 89, 97),
                 (77, 97, 94, 56),
                 (38, 91, 97, 77),
                 (79, 80, 59, 57),
                 (94, 62, 58, 56),
                 (54, 52, 67, 71),
                 (52, 87, 68, 67),
                 (59, 54, 71, 69),
                 (89, 73, 95, 96),
                 (73, 79, 57, 95),
                 (93, 92, 73, 89),
                 (61, 66, 88, 68),
                 (83, 61, 68, 87),
                 (82, 48, 61, 83),
                 (38, 77, 78, 40),
                 (114, 103, 107, 106),
                 (114, 100, 113, 103),
                 (110, 104, 115, 117),
                 (106, 107, 98, 99),
                 (99, 116, 101, 106),
                 (106, 101, 119, 114),
                 (116, 99, 98, 105),
                 (109, 108, 112, 111),
                 (118, 102, 104, 110),
                 (121, 112, 108, 105),
                 (116, 105, 108, 109),
                 (119, 118, 110, 117),
                 (101, 111, 118, 119),
                 (114, 119, 117, 100),
                 (116, 109, 111, 101),
                 (100, 117, 115, 113),
                 (115, 104, 102, 120),
                 (120, 102, 112, 121),
                 (103, 120, 121, 107),
                 (113, 115, 120, 103),
                 (107, 121, 105, 98),
                 (102, 118, 111, 112),
                 (129, 128, 130, 126),
                 (129, 123, 140, 128),
                 (126, 130, 122, 127),
                 (132, 143, 142, 139),
                 (134, 135, 137, 133),
                 (128, 134, 133, 130),
                 (138, 127, 122, 141),
                 (125, 131, 137, 124),
                 (136, 135, 143, 132),
                 (145, 138, 125, 124),
                 (133, 137, 131, 141),
                 (138, 141, 131, 125),
                 (130, 133, 141, 122),
                 (140, 142, 134, 128),
                 (142, 143, 135, 134),
                 (123, 139, 142, 140),
                 (126, 127, 138, 145),
                 (139, 144, 136, 132),
                 (123, 129, 144, 139),
                 (129, 126, 145, 144),
                 (144, 145, 124, 136),
                 (172, 164, 162, 168),
                 (180, 158, 150, 181),
                 (161, 160, 155, 157),
                 (180, 174, 168, 187),
                 (155, 151, 186, 184),
                 (156, 161, 158, 152),
                 (158, 161, 157, 150),
                 (153, 159, 160, 154),
                 (154, 160, 161, 156),
                 (157, 155, 184, 185),
                 (159, 182, 186, 151),
                 (153, 154, 149, 147),
                 (150, 157, 185, 181),
                 (183, 153, 147, 179),
                 (154, 156, 148, 149),
                 (152, 187, 178, 146),
                 (160, 159, 151, 155),
                 (182, 159, 153, 183),
                 (178, 162, 164, 189),
                 (180, 181, 166, 174),
                 (177, 173, 171, 176),
                 (156, 152, 146, 148),
                 (171, 184, 186, 167),
                 (174, 177, 172, 168),
                 (174, 166, 173, 177),
                 (170, 176, 175, 169),
                 (172, 177, 176, 170),
                 (173, 185, 184, 171),
                 (175, 167, 186, 182),
                 (169, 163, 165, 170),
                 (166, 181, 185, 173),
                 (183, 179, 163, 169),
                 (170, 165, 164, 172),
                 (168, 162, 178, 187),
                 (176, 171, 167, 175),
                 (169, 175, 182, 183),
                 (188, 165, 163, 179),
                 (149, 188, 179, 147),
                 (189, 164, 165, 188),
                 (148, 189, 188, 149),
                 (146, 178, 189, 148),
                 (152, 158, 180, 187),
                 (190, 191, 193, 192),
                 (198, 199, 197, 196),
                 (196, 197, 195, 194),
                 (200, 201, 191, 190),
                 (198, 196, 194, 200),
                 (199, 193, 191, 201),
                 (197, 199, 201, 195),
                 (192, 198, 200, 190),
                 (194, 195, 201, 200),
                 (192, 193, 199, 198),
                 (202, 204, 205, 203),
                 (210, 208, 209, 211),
                 (208, 206, 207, 209),
                 (212, 202, 203, 213),
                 (210, 212, 206, 208),
                 (211, 213, 203, 205),
                 (209, 207, 213, 211),
                 (204, 202, 212, 210),
                 (206, 212, 213, 207),
                 (204, 210, 211, 205),
                 (229, 226, 217, 216),
                 (216, 217, 221, 220),
                 (228, 227, 219, 218),
                 (218, 219, 215, 214),
                 (222, 228, 218, 214),
                 (227, 223, 215, 219),
                 (221, 217, 226, 225),
                 (216, 220, 224, 229),
                 (220, 221, 225, 224),
                 (214, 215, 223, 222),
                 (229, 224, 225, 226),
                 (223, 227, 228, 222),
                 (245, 242, 233, 232),
                 (232, 233, 237, 236),
                 (244, 243, 235, 234),
                 (234, 235, 231, 230),
                 (238, 244, 234, 230),
                 (243, 239, 231, 235),
                 (237, 233, 242, 241),
                 (232, 236, 240, 245),
                 (236, 237, 241, 240),
                 (230, 231, 239, 238),
                 (245, 240, 241, 242),
                 (239, 243, 244, 238),
                 (261, 258, 249, 248),
                 (248, 249, 253, 252),
                 (260, 259, 251, 250),
                 (250, 251, 247, 246),
                 (254, 260, 250, 246),
                 (259, 255, 247, 251),
                 (253, 249, 258, 257),
                 (248, 252, 256, 261),
                 (252, 253, 257, 256),
                 (246, 247, 255, 254),
                 (261, 256, 257, 258),
                 (255, 259, 260, 254),
                 (277, 274, 265, 264),
                 (264, 265, 269, 268),
                 (276, 275, 267, 266),
                 (266, 267, 263, 262),
                 (270, 276, 266, 262),
                 (275, 271, 263, 267),
                 (269, 265, 274, 273),
                 (264, 268, 272, 277),
                 (268, 269, 273, 272),
                 (262, 263, 271, 270),
                 (277, 272, 273, 274),
                 (271, 275, 276, 270),
                 (137, 135, 136, 124),
                 (376, 385, 383, 377),
                 (286, 289, 278, 279),
                 (290, 291, 279, 278),
                 (295, 293, 283, 286),
                 (294, 292, 284, 288),
                 (283, 293, 292, 282),
                 (288, 284, 285, 287),
                 (292, 293, 285, 284),
                 (288, 287, 281, 280),
                 (290, 294, 288, 280),
                 (291, 295, 286, 279),
                 (281, 287, 295, 291),
                 (278, 289, 294, 290),
                 (290, 280, 281, 291),
                 (289, 282, 292, 294),
                 (287, 285, 293, 295),
                 (286, 283, 282, 289),
                 (307, 306, 303, 302),
                 (296, 305, 306, 298),
                 (300, 304, 307, 302),
                 (307, 304, 297, 299),
                 (305, 301, 303, 306),
                 (301, 305, 304, 300),
                 (304, 305, 296, 297),
                 (298, 306, 307, 299),
                 (300, 302, 303, 301),
                 (339, 333, 314, 328),
                 (338, 334, 313, 329),
                 (333, 311, 310, 332),
                 (334, 308, 309, 335),
                 (328, 314, 312, 329),
                 (340, 341, 316, 317),
                 (320, 322, 323, 321),
                 (341, 321, 323, 342),
                 (343, 340, 317, 319),
                 (343, 342, 323, 322),
                 (317, 316, 318, 319),
                 (311, 326, 324, 310),
                 (308, 325, 327, 309),
                 (330, 336, 325, 308),
                 (331, 337, 326, 311),
                 (310, 330, 338, 332),
                 (324, 326, 337, 336),
                 (309, 331, 339, 335),
                 (313, 334, 335, 315),
                 (314, 333, 332, 312),
                 (330, 308, 334, 338),
                 (331, 311, 333, 339),
                 (336, 337, 327, 325),
                 (309, 327, 337, 331),
                 (310, 324, 336, 330),
                 (315, 328, 329, 313),
                 (332, 338, 329, 312),
                 (335, 339, 328, 315),
                 (319, 318, 342, 343),
                 (322, 320, 340, 343),
                 (316, 341, 342, 318),
                 (320, 321, 341, 340),
                 (352, 355, 344, 345),
                 (356, 357, 345, 344),
                 (361, 359, 349, 352),
                 (360, 358, 350, 354),
                 (349, 359, 358, 348),
                 (354, 350, 351, 353),
                 (358, 359, 351, 350),
                 (354, 353, 347, 346),
                 (356, 360, 354, 346),
                 (357, 361, 352, 345),
                 (347, 353, 361, 357),
                 (344, 355, 360, 356),
                 (356, 346, 347, 357),
                 (355, 348, 358, 360),
                 (353, 351, 359, 361),
                 (352, 349, 348, 355),
                 (371, 365, 369, 372),
                 (370, 363, 365, 371),
                 (373, 367, 363, 370),
                 (366, 373, 370, 362),
                 (372, 369, 367, 373),
                 (364, 371, 372, 368),
                 (368, 372, 373, 366),
                 (362, 370, 371, 364),
                 (363, 367, 369, 365),
                 (385, 381, 380, 383),
                 (378, 380, 381, 379),
                 (384, 379, 381, 385),
                 (383, 380, 378, 382),
                 (382, 378, 379, 384),
                 (377, 383, 382, 375),
                 (374, 384, 385, 376),
                 (375, 374, 376, 377),
                 (375, 382, 384, 374),
                 (397, 391, 387, 394),
                 (406, 405, 391, 397),
                 (395, 389, 393, 396),
                 (393, 389, 399, 400),
                 (407, 395, 388, 403),
                 (390, 397, 394, 386),
                 (404, 390, 386, 403),
                 (402, 389, 395, 407),
                 (388, 395, 396, 392),
                 (404, 406, 397, 390),
                 (399, 409, 408, 400),
                 (405, 393, 400, 408),
                 (387, 391, 401, 398),
                 (402, 387, 398, 409),
                 (389, 402, 409, 399),
                 (409, 398, 401, 408),
                 (391, 405, 408, 401),
                 (392, 396, 406, 404),
                 (387, 402, 407, 394),
                 (392, 404, 403, 388),
                 (394, 407, 403, 386),
                 (396, 393, 405, 406),
                 (297, 296, 298, 299),
                 (364, 368, 366, 362),
                 (508, 509, 515, 517),
                 (418, 411, 410, 421),
                 (422, 410, 411, 423),
                 (427, 418, 415, 425),
                 (426, 420, 416, 424),
                 (415, 414, 424, 425),
                 (420, 419, 417, 416),
                 (424, 416, 417, 425),
                 (420, 412, 413, 419),
                 (422, 412, 420, 426),
                 (423, 411, 418, 427),
                 (413, 423, 427, 419),
                 (410, 422, 426, 421),
                 (422, 423, 413, 412),
                 (421, 426, 424, 414),
                 (419, 427, 425, 417),
                 (418, 421, 414, 415),
                 (439, 434, 435, 438),
                 (428, 430, 438, 437),
                 (432, 434, 439, 436),
                 (439, 431, 429, 436),
                 (437, 438, 435, 433),
                 (433, 432, 436, 437),
                 (436, 429, 428, 437),
                 (430, 431, 439, 438),
                 (432, 433, 435, 434),
                 (471, 460, 446, 465),
                 (470, 461, 445, 466),
                 (465, 464, 442, 443),
                 (466, 467, 441, 440),
                 (460, 461, 444, 446),
                 (472, 449, 448, 473),
                 (452, 453, 455, 454),
                 (473, 474, 455, 453),
                 (475, 451, 449, 472),
                 (475, 454, 455, 474),
                 (449, 451, 450, 448),
                 (443, 442, 456, 458),
                 (440, 441, 459, 457),
                 (462, 440, 457, 468),
                 (463, 443, 458, 469),
                 (442, 464, 470, 462),
                 (456, 468, 469, 458),
                 (441, 467, 471, 463),
                 (445, 447, 467, 466),
                 (446, 444, 464, 465),
                 (462, 470, 466, 440),
                 (463, 471, 465, 443),
                 (468, 457, 459, 469),
                 (441, 463, 469, 459),
                 (442, 462, 468, 456),
                 (447, 445, 461, 460),
                 (464, 444, 461, 470),
                 (467, 447, 460, 471),
                 (451, 475, 474, 450),
                 (454, 475, 472, 452),
                 (448, 450, 474, 473),
                 (452, 472, 473, 453),
                 (484, 477, 476, 487),
                 (488, 476, 477, 489),
                 (493, 484, 481, 491),
                 (492, 486, 482, 490),
                 (481, 480, 490, 491),
                 (486, 485, 483, 482),
                 (490, 482, 483, 491),
                 (486, 478, 479, 485),
                 (488, 478, 486, 492),
                 (489, 477, 484, 493),
                 (479, 489, 493, 485),
                 (476, 488, 492, 487),
                 (488, 489, 479, 478),
                 (487, 492, 490, 480),
                 (485, 493, 491, 483),
                 (484, 487, 480, 481),
                 (503, 504, 501, 497),
                 (502, 503, 497, 495),
                 (505, 502, 495, 499),
                 (498, 494, 502, 505),
                 (504, 505, 499, 501),
                 (496, 500, 504, 503),
                 (500, 498, 505, 504),
                 (494, 496, 503, 502),
                 (495, 497, 501, 499),
                 (517, 515, 512, 513),
                 (510, 511, 513, 512),
                 (516, 517, 513, 511),
                 (515, 514, 510, 512),
                 (514, 516, 511, 510),
                 (509, 507, 514, 515),
                 (506, 508, 517, 516),
                 (507, 509, 508, 506),
                 (507, 506, 516, 514),
                 (529, 526, 519, 523),
                 (538, 529, 523, 537),
                 (527, 528, 525, 521),
                 (525, 532, 531, 521),
                 (539, 535, 520, 527),
                 (522, 518, 526, 529),
                 (536, 535, 518, 522),
                 (534, 539, 527, 521),
                 (520, 524, 528, 527),
                 (536, 522, 529, 538),
                 (531, 532, 540, 541),
                 (537, 540, 532, 525),
                 (519, 530, 533, 523),
                 (534, 541, 530, 519),
                 (521, 531, 541, 534),
                 (541, 540, 533, 530),
                 (523, 533, 540, 537),
                 (524, 536, 538, 528),
                 (519, 526, 539, 534),
                 (524, 520, 535, 536),
                 (526, 518, 535, 539),
                 (528, 538, 537, 525),
                 (429, 431, 430, 428),
                 (496, 494, 498, 500))

 

        scene = bpy.context.scene
        me = bpy.data.meshes.new("Cheetah_GEO")
        me.from_pydata(verts, [], faces)
        ob = bpy.data.objects.new("Cheetah_GEO", me)
        scene.collection.objects.link(ob)
         





#=============================================
# Create "Cheetah" Metarig
#=============================================



        # Check Rigify in preferences

        disable_Rigify = bpy.ops.preferences.addon_disable(module="rigify")

        if disable_Rigify:
            bpy.ops.preferences.addon_enable(module="rigify")

        else:
            pass
                    
        
  
        if bpy.context.mode == 'OBJECT':
            
            # Create single bone / go to Edot Mode / select and delete bone
            bpy.ops.object.armature_add(enter_editmode=0, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1)) 
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)
            bpy.ops.armature.select_all(action='SELECT')
            bpy.ops.armature.delete()    
         
             
        else:
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)





        # Active object
        ob = bpy.context.object

        # Rig Name  
        if ob.type == 'ARMATURE':
            ob.name = 'cheetah_metarig'

        # CREATE SAMPLE

#        bones = {}

        arm = bpy.data.objects[ob.name].data

 

        for i in range(6):
            arm.rigify_colors.add()

        arm.rigify_colors[0].name = "Root"
        arm.rigify_colors[0].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[0].normal = Color((0.4352940022945404, 0.18431399762630463, 0.4156860113143921))
        arm.rigify_colors[0].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[0].standard_colors_lock = True
        arm.rigify_colors[1].name = "IK"
        arm.rigify_colors[1].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[1].normal = Color((0.6039220094680786, 0.0, 0.0))
        arm.rigify_colors[1].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[1].standard_colors_lock = True
        arm.rigify_colors[2].name = "Special"
        arm.rigify_colors[2].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[2].normal = Color((0.9568629860877991, 0.7882350087165833, 0.04705899953842163))
        arm.rigify_colors[2].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[2].standard_colors_lock = True
        arm.rigify_colors[3].name = "Tweak"
        arm.rigify_colors[3].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[3].normal = Color((0.03921600058674812, 0.21176500618457794, 0.5803920030593872))
        arm.rigify_colors[3].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[3].standard_colors_lock = True
        arm.rigify_colors[4].name = "FK"
        arm.rigify_colors[4].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[4].normal = Color((0.11764699965715408, 0.5686269998550415, 0.035294000059366226))
        arm.rigify_colors[4].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[4].standard_colors_lock = True
        arm.rigify_colors[5].name = "Extra"
        arm.rigify_colors[5].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[5].normal = Color((0.9686279892921448, 0.2509799897670746, 0.09411799907684326))
        arm.rigify_colors[5].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[5].standard_colors_lock = True

        for i in range(29):
            arm.rigify_layers.add()

        arm.rigify_layers[0].name = "Face"
        arm.rigify_layers[0].row = 1
        arm.rigify_layers[0].selset = False
        arm.rigify_layers[0].group = 5
        arm.rigify_layers[1].name = "Face (Primary)"
        arm.rigify_layers[1].row = 2
        arm.rigify_layers[1].selset = False
        arm.rigify_layers[1].group = 2
        arm.rigify_layers[2].name = "Face (Secondary)"
        arm.rigify_layers[2].row = 2
        arm.rigify_layers[2].selset = False
        arm.rigify_layers[2].group = 3
        arm.rigify_layers[3].name = "Spine"
        arm.rigify_layers[3].row = 3
        arm.rigify_layers[3].selset = False
        arm.rigify_layers[3].group = 3
        arm.rigify_layers[4].name = "Spine (Tweak)"
        arm.rigify_layers[4].row = 4
        arm.rigify_layers[4].selset = False
        arm.rigify_layers[4].group = 4
        arm.rigify_layers[5].name = "Paws"
        arm.rigify_layers[5].row = 5
        arm.rigify_layers[5].selset = False
        arm.rigify_layers[5].group = 6
        arm.rigify_layers[6].name = "Paws (Tweak)"
        arm.rigify_layers[6].row = 6
        arm.rigify_layers[6].selset = False
        arm.rigify_layers[6].group = 4
        arm.rigify_layers[7].name = "Arm.L (IK)"
        arm.rigify_layers[7].row = 7
        arm.rigify_layers[7].selset = False
        arm.rigify_layers[7].group = 2
        arm.rigify_layers[8].name = "Arm.L (FK)"
        arm.rigify_layers[8].row = 8
        arm.rigify_layers[8].selset = False
        arm.rigify_layers[8].group = 5
        arm.rigify_layers[9].name = "Arm.L (Tweak)"
        arm.rigify_layers[9].row = 9
        arm.rigify_layers[9].selset = False
        arm.rigify_layers[9].group = 4
        arm.rigify_layers[10].name = "Arm.R (IK)"
        arm.rigify_layers[10].row = 7
        arm.rigify_layers[10].selset = False
        arm.rigify_layers[10].group = 2
        arm.rigify_layers[11].name = "Arm.R (FK)"
        arm.rigify_layers[11].row = 8
        arm.rigify_layers[11].selset = False
        arm.rigify_layers[11].group = 5
        arm.rigify_layers[12].name = "Arm.R (Tweak)"
        arm.rigify_layers[12].row = 9
        arm.rigify_layers[12].selset = False
        arm.rigify_layers[12].group = 4
        arm.rigify_layers[13].name = "Leg.L (IK)"
        arm.rigify_layers[13].row = 10
        arm.rigify_layers[13].selset = False
        arm.rigify_layers[13].group = 2
        arm.rigify_layers[14].name = "Leg.L (FK)"
        arm.rigify_layers[14].row = 11
        arm.rigify_layers[14].selset = False
        arm.rigify_layers[14].group = 5
        arm.rigify_layers[15].name = "Leg.L (Tweak)"
        arm.rigify_layers[15].row = 12
        arm.rigify_layers[15].selset = False
        arm.rigify_layers[15].group = 4
        arm.rigify_layers[16].name = "Leg.R (IK)"
        arm.rigify_layers[16].row = 10
        arm.rigify_layers[16].selset = False
        arm.rigify_layers[16].group = 2
        arm.rigify_layers[17].name = "Leg.R (FK)"
        arm.rigify_layers[17].row = 11
        arm.rigify_layers[17].selset = False
        arm.rigify_layers[17].group = 5
        arm.rigify_layers[18].name = "Leg.R (Tweak)"
        arm.rigify_layers[18].row = 12
        arm.rigify_layers[18].selset = False
        arm.rigify_layers[18].group = 4
        arm.rigify_layers[19].name = "Tail"
        arm.rigify_layers[19].row = 13
        arm.rigify_layers[19].selset = False
        arm.rigify_layers[19].group = 6
        arm.rigify_layers[20].name = ""
        arm.rigify_layers[20].row = 1
        arm.rigify_layers[20].selset = False
        arm.rigify_layers[20].group = 0
        arm.rigify_layers[21].name = ""
        arm.rigify_layers[21].row = 13
        arm.rigify_layers[21].selset = False
        arm.rigify_layers[21].group = 0
        arm.rigify_layers[22].name = ""
        arm.rigify_layers[22].row = 13
        arm.rigify_layers[22].selset = False
        arm.rigify_layers[22].group = 0
        arm.rigify_layers[23].name = ""
        arm.rigify_layers[23].row = 1
        arm.rigify_layers[23].selset = False
        arm.rigify_layers[23].group = 0
        arm.rigify_layers[24].name = ""
        arm.rigify_layers[24].row = 1
        arm.rigify_layers[24].selset = False
        arm.rigify_layers[24].group = 0
        arm.rigify_layers[25].name = ""
        arm.rigify_layers[25].row = 1
        arm.rigify_layers[25].selset = False
        arm.rigify_layers[25].group = 0
        arm.rigify_layers[26].name = ""
        arm.rigify_layers[26].row = 1
        arm.rigify_layers[26].selset = False
        arm.rigify_layers[26].group = 0
        arm.rigify_layers[27].name = ""
        arm.rigify_layers[27].row = 1
        arm.rigify_layers[27].selset = False
        arm.rigify_layers[27].group = 0
        arm.rigify_layers[28].name = "Root"
        arm.rigify_layers[28].row = 14
        arm.rigify_layers[28].selset = False
        arm.rigify_layers[28].group = 1

        bones = {}

        bone = arm.edit_bones.new('spine.004')
        bone.head = -0.0000, 0.4878, 0.8719
        bone.tail = -0.0000, 0.1765, 0.8520
        bone.roll = 0.0000
        bone.use_connect = False
        bones['spine.004'] = bone.name
        bone = arm.edit_bones.new('spine.003')
        bone.head = -0.0000, 0.4878, 0.8719
        bone.tail = -0.0000, 0.6845, 0.8361
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.003'] = bone.name
        bone = arm.edit_bones.new('spine.005')
        bone.head = -0.0000, 0.1765, 0.8520
        bone.tail = -0.0000, -0.0287, 0.8350
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.005'] = bone.name
        bone = arm.edit_bones.new('spine.002')
        bone.head = -0.0000, 0.6845, 0.8361
        bone.tail = -0.0000, 0.8826, 0.8087
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['spine.002'] = bone.name
        bone = arm.edit_bones.new('spine.006')
        bone.head = -0.0000, -0.0287, 0.8350
        bone.tail = -0.0000, -0.1726, 0.8293
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['spine.006'] = bone.name
        bone = arm.edit_bones.new('pelvis.L')
        bone.head = -0.0000, 0.4771, 0.7876
        bone.tail = 0.0795, 0.2866, 0.9252
        bone.roll = -1.2555
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['pelvis.L'] = bone.name
        bone = arm.edit_bones.new('pelvis.R')
        bone.head = 0.0000, 0.4771, 0.7876
        bone.tail = -0.0795, 0.2866, 0.9252
        bone.roll = 1.2555
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['pelvis.R'] = bone.name
        bone = arm.edit_bones.new('thigh.L')
        bone.head = 0.1527, 0.3632, 0.7768
        bone.tail = 0.1619, 0.4388, 0.5030
        bone.roll = -0.0367
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['thigh.L'] = bone.name
        bone = arm.edit_bones.new('thigh.R')
        bone.head = -0.1527, 0.3632, 0.7768
        bone.tail = -0.1619, 0.4388, 0.5030
        bone.roll = 0.0367
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['thigh.R'] = bone.name
        bone = arm.edit_bones.new('spine.001')
        bone.head = -0.0000, 0.8826, 0.8087
        bone.tail = -0.0000, 1.0819, 0.7916
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['spine.001'] = bone.name
        bone = arm.edit_bones.new('spine.007')
        bone.head = -0.0000, -0.1726, 0.8293
        bone.tail = -0.0000, -0.3331, 0.8388
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.006']]
        bones['spine.007'] = bone.name
        bone = arm.edit_bones.new('shin.L')
        bone.head = 0.1619, 0.4388, 0.5030
        bone.tail = 0.1550, 0.6232, 0.2573
        bone.roll = 0.0406
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.L']]
        bones['shin.L'] = bone.name
        bone = arm.edit_bones.new('shin.R')
        bone.head = -0.1619, 0.4388, 0.5030
        bone.tail = -0.1550, 0.6232, 0.2573
        bone.roll = -0.0406
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.R']]
        bones['shin.R'] = bone.name
        bone = arm.edit_bones.new('spine')
        bone.head = -0.0000, 1.0819, 0.7916
        bone.tail = -0.0000, 1.2816, 0.7797
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.001']]
        bones['spine'] = bone.name
        bone = arm.edit_bones.new('spine.008')
        bone.head = -0.0000, -0.3331, 0.8388
        bone.tail = -0.0000, -0.5347, 0.8663
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.007']]
        bones['spine.008'] = bone.name
        bone = arm.edit_bones.new('foot.L')
        bone.head = 0.1550, 0.6232, 0.2573
        bone.tail = 0.1516, 0.6013, 0.0226
        bone.roll = 0.0184
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.L']]
        bones['foot.L'] = bone.name
        bone = arm.edit_bones.new('foot.R')
        bone.head = -0.1550, 0.6232, 0.2573
        bone.tail = -0.1516, 0.6013, 0.0226
        bone.roll = -0.0184
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.R']]
        bones['foot.R'] = bone.name
        bone = arm.edit_bones.new('spine.009')
        bone.head = -0.0000, -0.5347, 0.8663
        bone.tail = -0.0000, -0.6163, 0.8657
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['spine.009'] = bone.name
        bone = arm.edit_bones.new('shoulder.L')
        bone.head = 0.0571, -0.3986, 0.9388
        bone.tail = 0.0837, -0.4637, 0.7724
        bone.roll = -0.0745
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['shoulder.L'] = bone.name
        bone = arm.edit_bones.new('shoulder.R')
        bone.head = -0.0571, -0.3986, 0.9388
        bone.tail = -0.0837, -0.4637, 0.7724
        bone.roll = 0.0745
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['shoulder.R'] = bone.name
        bone = arm.edit_bones.new('breast.L')
        bone.head = 0.0441, -0.4085, 0.7707
        bone.tail = 0.0441, -0.5128, 0.6277
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['breast.L'] = bone.name
        bone = arm.edit_bones.new('breast.R')
        bone.head = -0.0441, -0.4085, 0.7707
        bone.tail = -0.0441, -0.5128, 0.6277
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['breast.R'] = bone.name
        bone = arm.edit_bones.new('toe.L')
        bone.head = 0.1516, 0.6013, 0.0226
        bone.tail = 0.1516, 0.4760, 0.0061
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.L']]
        bones['toe.L'] = bone.name
        bone = arm.edit_bones.new('toe.R')
        bone.head = -0.1516, 0.6013, 0.0226
        bone.tail = -0.1516, 0.4760, 0.0061
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.R']]
        bones['toe.R'] = bone.name
        bone = arm.edit_bones.new('spine.010')
        bone.head = -0.0000, -0.6163, 0.8657
        bone.tail = -0.0000, -0.6907, 0.8779
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.009']]
        bones['spine.010'] = bone.name
        bone = arm.edit_bones.new('front_thigh.L')
        bone.head = 0.1387, -0.4734, 0.7936
        bone.tail = 0.1384, -0.3739, 0.4707
        bone.roll = 0.0007
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.L']]
        bones['front_thigh.L'] = bone.name
        bone = arm.edit_bones.new('front_thigh.R')
        bone.head = -0.1387, -0.4734, 0.7936
        bone.tail = -0.1384, -0.3739, 0.4707
        bone.roll = -0.0007
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.R']]
        bones['front_thigh.R'] = bone.name
        bone = arm.edit_bones.new('spine.011')
        bone.head = -0.0000, -0.6907, 0.8779
        bone.tail = -0.0000, -0.8751, 0.9573
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.010']]
        bones['spine.011'] = bone.name
        bone = arm.edit_bones.new('front_shin.L')
        bone.head = 0.1384, -0.3739, 0.4707
        bone.tail = 0.1331, -0.3700, 0.1631
        bone.roll = -0.0223
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_thigh.L']]
        bones['front_shin.L'] = bone.name
        bone = arm.edit_bones.new('front_shin.R')
        bone.head = -0.1384, -0.3739, 0.4707
        bone.tail = -0.1331, -0.3700, 0.1631
        bone.roll = 0.0223
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_thigh.R']]
        bones['front_shin.R'] = bone.name
        bone = arm.edit_bones.new('front_foot.L')
        bone.head = 0.1331, -0.3700, 0.1631
        bone.tail = 0.1297, -0.4016, 0.0208
        bone.roll = 0.0294
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_shin.L']]
        bones['front_foot.L'] = bone.name
        bone = arm.edit_bones.new('front_foot.R')
        bone.head = -0.1331, -0.3700, 0.1631
        bone.tail = -0.1297, -0.4016, 0.0208
        bone.roll = -0.0294
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_shin.R']]
        bones['front_foot.R'] = bone.name
        bone = arm.edit_bones.new('front_toe.L')
        bone.head = 0.1297, -0.4016, 0.0208
        bone.tail = 0.1297, -0.5178, 0.0059
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_foot.L']]
        bones['front_toe.L'] = bone.name
        bone = arm.edit_bones.new('front_toe.R')
        bone.head = -0.1297, -0.4016, 0.0208
        bone.tail = -0.1297, -0.5178, 0.0059
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_foot.R']]
        bones['front_toe.R'] = bone.name

        obj = bpy.context.object 

        bpy.ops.object.mode_set(mode='OBJECT')
        pbone = obj.pose.bones[bones['spine.004']]
        pbone.rigify_type = 'spines.basic_spine'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.pivot_pos = 2
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.003']]
        pbone.rigify_type = 'spines.basic_tail'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.copy_rotation_axes = [True, False, True]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.005']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.neck_pos = 5
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.tweak_layers = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.006']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['pelvis.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['pelvis.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.L']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.R']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.001']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.007']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.008']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.009']]
        pbone.rigify_type = 'spines.super_head'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['shoulder.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['shoulder.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['breast.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['breast.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.010']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_thigh.L']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['front_thigh.R']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.011']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_shin.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_shin.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['front_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.rotation_axis = "x"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass

        bpy.ops.object.mode_set(mode='EDIT')
        for bone in arm.edit_bones:
            bone.select = False
            bone.select_head = False
            bone.select_tail = False
        for b in bones:
            bone = arm.edit_bones[bones[b]]
            bone.select = True
            bone.select_head = True
            bone.select_tail = True
            bone.bbone_x = bone.bbone_z = bone.length * 0.05
            arm.edit_bones.active = bone

        arm.layers = [(x in [3, 4, 7, 10, 13, 16, 19]) for x in range(32)]

     
     
     
     
     
        bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
        bpy.ops.pose.rigify_generate()


        # Rename Existing Armature with name 'Rig'
        for arm in bpy.context.selected_objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'cheetah_rig'    
        
             

        # Rename Existing Rigify UI Script 'rig_ui.py'
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_cheetah.py'

             

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cheetah_GEO'):
                o.select_set(True)
            else:
                o.select_set(False)


     
        
        # Delete Metarig
        obj = bpy.data.objects['cheetah_metarig']
        bpy.data.objects.remove(obj) 
        
 

        # Go to Pose Mode
        bpy.ops.object.posemode_toggle()

        
        
        # 1. Select Cheetah GEO / 2. Select Cheetah metarig and parent(auto)
         
        bpy.data.objects["Cheetah_GEO"].select_set(True)
        bpy.data.objects["cheetah_rig"].select_set(True)

        bpy.ops.object.parent_set(type='ARMATURE_AUTO')

              
              
        # Arms/Legs FK Layers
        bpy.context.object.data.layers[8] = False
        bpy.context.object.data.layers[11] = False       
        bpy.context.object.data.layers[14] = False
        bpy.context.object.data.layers[17] = False


        # View - Frame Selected
        pose_bones = bpy.context.object.pose.bones
        for pb in pose_bones:
            if pb.name.startswith('root'):
                pb.bone.select = 1
                bpy.ops.view3d.view_selected(use_all_regions=0)
                pb.bone.select = 0



#===================================
# Create "Cheetah" Material
#===================================

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cheetah_GEO'):
                o.select_set(True)
                bpy.context.view_layer.objects.active = o
            else:
                o.select_set(False)


        ob = bpy.context.active_object

        # Get material
        mat = bpy.data.materials.get("Cheetah_Mat")
        if mat is None:
            # create material
            mat = bpy.data.materials.new(name="Cheetah_Mat")

        # Assign Material to object
        if ob.data.materials:
            # assign to 1st material slot
            ob.data.materials[0] = mat
        else:
            # no slots
            ob.data.materials.append(mat)

        bpy.context.object.active_material.diffuse_color = (0.83, 0.64, 0.36, 1)


#===================================
# End - Create "Cheetah" Material
#===================================





        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Cheetah_GEO'):

                o.select_set(False)

        bpy.context.scene.tool_settings.lock_object_mode = False



        return {'FINISHED'}



#=====================================================
#     END  - CHEETAH RIG - RIGIFY ZOO
#=====================================================






classes = [OBJECT_OT_cheetah_rigify_zoo_ra]



def register():
    for cls in classes:
        bpy.utils.register_class(cls)



def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)




if __name__ == "__main__":
    register()



 
