import bpy
from mathutils import Color




#=====================================================
#            DOG RIG - RIGIFY ZOO
#=====================================================




# Add Rigify Rig - Dog
class OBJECT_OT_dog_rigify_zoo_ra(bpy.types.Operator):
    '''Dog Rig'''
    bl_idname = "object.dog_rigify_zoo_ra"
    bl_label = "Dog"
    bl_options = {'REGISTER', 'UNDO'}


    def execute(self, context):

        # Rename Existing Rigify UI Script
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_new_name.py'


#=============================================
# Create "Dog" GEO
#=============================================



        # Rename Existing Armature with name 'rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'Rename this rig'


        # Rename Existing Armature with name 'dog_rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('dog_rig'):
                arm.name = 'dog rig next'



        current_mode = bpy.context.mode
        if current_mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT', toggle=False)



        # Rename 'Dog_GEO'
        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name == 'Dog_GEO':
                o.name = 'Dog'



        # Set active 'Scene Collection'
        scene_collection = bpy.context.view_layer.layer_collection
        bpy.context.view_layer.active_layer_collection = scene_collection




# Create "Dog" Mesh



        verts = ((0.07508911192417145, 0.2892763912677765, 0.6864342093467712),
                 (0.057940978556871414, 0.29895177483558655, 0.5801674723625183),
                 (0.05875302478671074, 0.25998541712760925, 0.8552660942077637),
                 (0.05111014470458031, 0.4371487498283386, 0.603752851486206),
                 (0.05612970143556595, 0.39023029804229736, 0.8065794110298157),
                 (0.0530792698264122, 0.4653133749961853, 0.7063275575637817),
                 (0.07521608471870422, 0.1311863511800766, 0.8344661593437195),
                 (0.06307581067085266, 0.16074007749557495, 0.5491300225257874),
                 (0.1110268235206604, 0.14920717477798462, 0.6709081530570984),
                 (0.0860462486743927, -0.011080125346779823, 0.48127835988998413),
                 (0.08204858750104904, 0.0023214956745505333, 0.8276302218437195),
                 (0.12499518692493439, 0.0010389360832050443, 0.6604100465774536),
                 (0.12406754493713379, -0.16934654116630554, 0.6527376174926758),
                 (0.07953140139579773, -0.1563306450843811, 0.8311051726341248),
                 (0.07423978298902512, -0.20116515457630157, 0.4580621123313904),
                 (0.07729983329772949, -0.35052490234375, 0.5535686016082764),
                 (0.08119989186525345, -0.29176753759384155, 0.8478005528450012),
                 (0.07936211675405502, -0.43581053614616394, 0.6873764395713806),
                 (-0.07508911192417145, 0.2892763912677765, 0.6864342093467712),
                 (-0.057940978556871414, 0.29895177483558655, 0.5801674723625183),
                 (-0.05875302478671074, 0.25998541712760925, 0.8552660942077637),
                 (0.0, 0.2655065655708313, 0.8655198216438293),
                 (0.0, 0.47659680247306824, 0.7108336687088013),
                 (0.0, 0.3972793519496918, 0.8164753913879395),
                 (-0.05111014470458031, 0.4371487498283386, 0.603752851486206),
                 (-0.05612970143556595, 0.39023029804229736, 0.8065794110298157),
                 (-0.0530792698264122, 0.4653133749961853, 0.7063275575637817),
                 (-0.07521608471870422, 0.1311863511800766, 0.8344661593437195),
                 (0.0, 0.13168148696422577, 0.8466058969497681),
                 (-0.06307581067085266, 0.16074007749557495, 0.5491300225257874),
                 (-0.1110268235206604, 0.14920717477798462, 0.6709081530570984),
                 (-0.0860462486743927, -0.011080125346779823, 0.48127835988998413),
                 (-0.08204858750104904, 0.0023214956745505333, 0.8276302218437195),
                 (-0.12499518692493439, 0.0010389360832050443, 0.6604100465774536),
                 (0.0, 0.001684725284576416, 0.8396768569946289),
                 (0.0, 0.16286279261112213, 0.5371670126914978),
                 (-0.12406754493713379, -0.16934654116630554, 0.6527376174926758),
                 (-0.07953140139579773, -0.1563306450843811, 0.8311051726341248),
                 (-0.07423978298902512, -0.20116515457630157, 0.4580621123313904),
                 (0.0, -0.20139876008033752, 0.4461686313152313),
                 (0.0, -0.3574521243572235, 0.5435869693756104),
                 (-0.07729983329772949, -0.35052490234375, 0.5535686016082764),
                 (-0.08119989186525345, -0.29176753759384155, 0.8478005528450012),
                 (-0.07936211675405502, -0.43581053614616394, 0.6873764395713806),
                 (0.0, 0.3037928342819214, 0.5703323483467102),
                 (0.0, 0.44779130816459656, 0.5978914499282837),
                 (0.0, -0.011598127894103527, 0.46922603249549866),
                 (0.0, -0.30005311965942383, 0.8566870093345642),
                 (0.0, -0.44765958189964294, 0.6846893429756165),
                 (0.0, -0.15686705708503723, 0.8406484723091125),
                 (-0.05608319491147995, -0.6319754123687744, 0.85484379529953),
                 (-0.05851982533931732, -0.6908454895019531, 1.03138267993927),
                 (-0.058536458760499954, -0.4398628771305084, 0.9571983218193054),
                 (-0.07907948642969131, -0.5733665823936462, 1.1020091772079468),
                 (0.05608319491147995, -0.6319754123687744, 0.85484379529953),
                 (0.05851982533931732, -0.6908454895019531, 1.03138267993927),
                 (0.058536458760499954, -0.4398628771305084, 0.9571983218193054),
                 (0.07907948642969131, -0.5733665823936462, 1.1020091772079468),
                 (-0.07710033655166626, -0.5473406314849854, 0.8955267667770386),
                 (-0.0792115330696106, -0.6399076581001282, 1.0710654258728027),
                 (0.07710033655166626, -0.5473406314849854, 0.8955267667770386),
                 (0.0792115330696106, -0.6399076581001282, 1.0710654258728027),
                 (-0.07055261731147766, -0.662750780582428, 0.918851912021637),
                 (-0.08669935166835785, -0.47828155755996704, 1.024674892425537),
                 (0.08669935166835785, -0.47828155755996704, 1.024674892425537),
                 (0.07055261731147766, -0.662750780582428, 0.918851912021637),
                 (0.09383706748485565, -0.5846237540245056, 0.9631909728050232),
                 (-0.09383706748485565, -0.5846237540245056, 0.9631909728050232),
                 (1.1108488860202264e-17, -0.4089743494987488, 0.9513436555862427),
                 (1.1108488860202264e-17, -0.5699962377548218, 1.1248193979263306),
                 (1.1108488860202264e-17, -0.6340452432632446, 0.8416615128517151),
                 (1.1108488860202264e-17, -0.7113730907440186, 1.0422497987747192),
                 (1.1108488860202264e-17, -0.649325430393219, 1.0919088125228882),
                 (1.1108488860202264e-17, -0.5344552993774414, 0.872732937335968),
                 (1.1108488860202264e-17, -0.45732414722442627, 1.0399068593978882),
                 (0.08328071236610413, -0.5227295160293579, 1.0713071823120117),
                 (-0.04453171044588089, -0.6922513842582703, 0.976894736289978),
                 (-0.09183485060930252, -0.6071370244026184, 1.013698935508728),
                 (-0.08328071236610413, -0.5227295160293579, 1.0713071823120117),
                 (0.09183485060930252, -0.6071370244026184, 1.013698935508728),
                 (1.1108488860202264e-17, -0.5088479518890381, 1.0964069366455078),
                 (0.04453171044588089, -0.6922513842582703, 0.976894736289978),
                 (1.1108488860202264e-17, -0.7179839015007019, 0.9734749794006348),
                 (0.041262343525886536, -0.7646535038948059, 0.8694122433662415),
                 (1.1108488860202264e-17, -0.7982275485992432, 0.8632767200469971),
                 (1.1108488860202264e-17, -0.7313496470451355, 0.8144863843917847),
                 (-0.03481895476579666, -0.7158359885215759, 0.8256238102912903),
                 (-0.041262343525886536, -0.7646535038948059, 0.8694122433662415),
                 (-0.03542572259902954, -0.7889543175697327, 0.9117491841316223),
                 (0.03481895476579666, -0.7158359885215759, 0.8256238102912903),
                 (0.03542572259902954, -0.7889543175697327, 0.9117491841316223),
                 (1.1108488860202264e-17, -0.8129770159721375, 0.9106125235557556),
                 (-0.06949220597743988, -0.4186398386955261, 0.6556546688079834),
                 (-0.05356621742248535, -0.4678179919719696, 0.749723494052887),
                 (-0.06949220597743988, -0.28353241086006165, 0.8287919163703918),
                 (-0.05356621742248535, -0.35558581352233887, 0.9070751667022705),
                 (0.06949220597743988, -0.4186398386955261, 0.6556546688079834),
                 (0.05356621742248535, -0.4678179919719696, 0.749723494052887),
                 (0.06949220597743988, -0.28353241086006165, 0.8287919163703918),
                 (0.05356621742248535, -0.35558581352233887, 0.9070751667022705),
                 (0.06607275456190109, -0.3940250277519226, 0.8352037668228149),
                 (-0.042400095611810684, -0.540873110294342, 0.8676245212554932),
                 (0.07971278578042984, -0.33317551016807556, 0.7680776119232178),
                 (-0.05434255674481392, -0.4341074824333191, 0.9911761283874512),
                 (0.06368324905633926, -0.47625625133514404, 0.9266461730003357),
                 (0.042400095611810684, -0.540873110294342, 0.8676245212554932),
                 (-0.07971278578042984, -0.33317551016807556, 0.7680776119232178),
                 (0.05434255674481392, -0.4341074824333191, 0.9911761283874512),
                 (0.0, -0.35378769040107727, 0.9131042957305908),
                 (0.0, -0.43471306562423706, 0.9996823668479919),
                 (0.0, -0.47249409556388855, 0.744845449924469),
                 (0.0, -0.5493754148483276, 0.8669651746749878),
                 (0.0, -0.2726595401763916, 0.8321884274482727),
                 (-0.06607275456190109, -0.3940250277519226, 0.8352037668228149),
                 (0.0, -0.4163179397583008, 0.6445026397705078),
                 (-0.06368324905633926, -0.47625625133514404, 0.9266461730003357),
                 (0.0, -0.4772484600543976, 0.9270523190498352),
                 (0.0, -0.32133370637893677, 0.7618118524551392),
                 (-0.022665005177259445, 0.4424293041229248, 0.7414618134498596),
                 (-0.022665005177259445, 0.45178934931755066, 0.7876489758491516),
                 (-0.022680839523673058, 0.5266123414039612, 0.6985130310058594),
                 (-0.022680839523673058, 0.5445997714996338, 0.7391008138656616),
                 (0.022665005177259445, 0.4424293041229248, 0.7414618134498596),
                 (0.022665005177259445, 0.45178934931755066, 0.7876489758491516),
                 (0.022680839523673058, 0.5266123414039612, 0.6985130310058594),
                 (0.022680839523673058, 0.5445997714996338, 0.7391008138656616),
                 (-0.022680839523673058, 0.5291004180908203, 0.6972866654396057),
                 (-0.022680839523673058, 0.5482019782066345, 0.7378074526786804),
                 (-0.021716251969337463, 0.6428576111793518, 0.60942143201828),
                 (-0.021716251969337463, 0.6644685864448547, 0.6436311602592468),
                 (0.022680839523673058, 0.5291004180908203, 0.6972866654396057),
                 (0.022680839523673058, 0.5482019782066345, 0.7378074526786804),
                 (0.021716251969337463, 0.6428576111793518, 0.60942143201828),
                 (0.021716251969337463, 0.6644685864448547, 0.6436311602592468),
                 (-0.020205965265631676, 0.6468308568000793, 0.6073085069656372),
                 (-0.020205965265631676, 0.6679311394691467, 0.6416241526603699),
                 (-0.017054712399840355, 0.7584924697875977, 0.5095834136009216),
                 (-0.017054712399840355, 0.7784731388092041, 0.537572979927063),
                 (0.020205965265631676, 0.6468308568000793, 0.6073085069656372),
                 (0.020205965265631676, 0.6679311394691467, 0.6416241526603699),
                 (0.017054712399840355, 0.7584924697875977, 0.5095834136009216),
                 (0.017054712399840355, 0.7784731388092041, 0.537572979927063),
                 (-0.015779055655002594, 0.7602781057357788, 0.5079941153526306),
                 (-0.015779055655002594, 0.7802839875221252, 0.5361149907112122),
                 (-0.009941978380084038, 0.8863946795463562, 0.41662728786468506),
                 (-0.009941978380084038, 0.8978217244148254, 0.43289971351623535),
                 (0.015779055655002594, 0.7602781057357788, 0.5079941153526306),
                 (0.015779055655002594, 0.7802839875221252, 0.5361149907112122),
                 (0.009941978380084038, 0.8863946795463562, 0.41662728786468506),
                 (0.009941978380084038, 0.8978217244148254, 0.43289971351623535),
                 (0.07100262492895126, -0.33952850103378296, 0.00015670654829591513),
                 (0.07100262492895126, -0.3310505747795105, 0.037943411618471146),
                 (0.0828041359782219, -0.23622019588947296, 0.00015670654829591513),
                 (0.0828041359782219, -0.24794478714466095, 0.03330723196268082),
                 (0.1525891125202179, -0.33952850103378296, 0.00015670654829591513),
                 (0.1525891125202179, -0.3310505747795105, 0.037943411618471146),
                 (0.14078760147094727, -0.23622019588947296, 0.00015670654829591513),
                 (0.14078760147094727, -0.24794478714466095, 0.03330723196268082),
                 (0.07100262492895126, -0.29313594102859497, 0.00015670654829591513),
                 (0.07100262492895126, -0.29354482889175415, 0.04705093055963516),
                 (0.1525891125202179, -0.29313594102859497, 0.00015670654829591513),
                 (0.1525891125202179, -0.29354482889175415, 0.04705093055963516),
                 (0.08823954313993454, -0.2609728276729584, 0.034631382673978806),
                 (0.09074520319700241, -0.23465439677238464, 0.14353352785110474),
                 (0.08823954313993454, -0.23392502963542938, 0.022832589223980904),
                 (0.09234374761581421, -0.1846509575843811, 0.14662817120552063),
                 (0.13458092510700226, -0.2609728276729584, 0.034631382673978806),
                 (0.1320752650499344, -0.23465439677238464, 0.14353352785110474),
                 (0.13458092510700226, -0.23392502963542938, 0.022832589223980904),
                 (0.1304766982793808, -0.1846509575843811, 0.14662817120552063),
                 (0.08988508582115173, -0.24220114946365356, 0.09953918308019638),
                 (0.09169509261846542, -0.20393596589565277, 0.09236843138933182),
                 (0.13112539052963257, -0.20393596589565277, 0.09236843138933182),
                 (0.13293538987636566, -0.24220114946365356, 0.09953918308019638),
                 (0.09048310667276382, -0.216933012008667, 0.0622875839471817),
                 (0.13233736157417297, -0.216933012008667, 0.0622875839471817),
                 (0.13346335291862488, -0.24930249154567719, 0.0716349259018898),
                 (0.08935713022947311, -0.24930249154567719, 0.0716349259018898),
                 (0.0930844321846962, -0.23482508957386017, 0.1442282646894455),
                 (0.08796416968107224, -0.2629968225955963, 0.42374300956726074),
                 (0.0931384265422821, -0.18972148001194, 0.1477348804473877),
                 (0.08954532444477081, -0.18008829653263092, 0.4525582790374756),
                 (0.12728095054626465, -0.23482508957386017, 0.14305849373340607),
                 (0.14716821908950806, -0.2629968225955963, 0.4217178225517273),
                 (0.12733495235443115, -0.18972148001194, 0.14656510949134827),
                 (0.14874936640262604, -0.18008829653263092, 0.45053309202194214),
                 (0.09222646057605743, -0.24543730914592743, 0.29399845004081726),
                 (0.09241391718387604, -0.18752418458461761, 0.29980000853538513),
                 (0.13603073358535767, -0.18752418458461761, 0.29830801486968994),
                 (0.13584327697753906, -0.24543730914592743, 0.29250645637512207),
                 (0.09278234839439392, -0.18995068967342377, 0.25397008657455444),
                 (0.13250944018363953, -0.18995068967342377, 0.2526111602783203),
                 (0.13251473009586334, -0.24178291857242584, 0.2521235942840576),
                 (0.09278766065835953, -0.24178291857242584, 0.25348255038261414),
                 (0.09351697564125061, -0.19120848178863525, 0.20708876848220825),
                 (0.1298465132713318, -0.19120848178863525, 0.20581208169460297),
                 (0.12984144687652588, -0.23883497714996338, 0.20565983653068542),
                 (0.0935119166970253, -0.23883497714996338, 0.2069365382194519),
                 (0.09005621075630188, -0.2524970769882202, 0.3489239811897278),
                 (0.09044501185417175, -0.18231332302093506, 0.3602901101112366),
                 (0.14215059578418732, -0.18231332302093506, 0.35852140188217163),
                 (0.14176179468631744, -0.2524970769882202, 0.34715527296066284),
                 (0.08950363099575043, -0.26225224137306213, 0.4218537211418152),
                 (0.08950363099575043, -0.17963387072086334, 0.4522298574447632),
                 (0.14874234795570374, -0.26225224137306213, 0.4218537211418152),
                 (0.14874234795570374, -0.17963387072086334, 0.4522298574447632),
                 (0.09865953773260117, -0.343729168176651, 0.5313005447387695),
                 (0.09865953773260117, -0.24639266729354858, 0.5840752124786377),
                 (0.14874234795570374, -0.24639266729354858, 0.5840752124786377),
                 (0.14874234795570374, -0.343729168176651, 0.5313005447387695),
                 (0.09141841530799866, -0.40647560358047485, 0.626263439655304),
                 (0.09743095189332962, -0.4281991124153137, 0.6708192229270935),
                 (0.09743095189332962, -0.3048853278160095, 0.7284398078918457),
                 (0.09155560284852982, -0.2818814516067505, 0.6849145293235779),
                 (0.1430196613073349, -0.4281991124153137, 0.6708192229270935),
                 (0.14874234795570374, -0.40647560358047485, 0.626263439655304),
                 (0.14874234795570374, -0.2818814516067505, 0.6849145293235779),
                 (0.1430196613073349, -0.3048853278160095, 0.7284398078918457),
                 (0.1430196613073349, -0.379682332277298, 0.7175145149230957),
                 (0.09743095189332962, -0.379682332277298, 0.7175145149230957),
                 (0.08950363099575043, -0.22230146825313568, 0.43282169103622437),
                 (0.14874234795570374, -0.22230146825313568, 0.43282169103622437),
                 (0.14874234795570374, -0.2927470803260803, 0.5583820343017578),
                 (0.09865953773260117, -0.2927470803260803, 0.5583820343017578),
                 (0.14874234795570374, -0.3494969606399536, 0.6596591472625732),
                 (0.14874234795570374, -0.3835839629173279, 0.5853593349456787),
                 (0.09503897279500961, -0.3835839629173279, 0.5853593349456787),
                 (0.0951075628399849, -0.26496079564094543, 0.6396316289901733),
                 (0.14874234795570374, -0.26496079564094543, 0.6396316289901733),
                 (0.14874234795570374, -0.32204756140708923, 0.6106402277946472),
                 (0.0940815880894661, -0.21256403625011444, 0.516832172870636),
                 (0.14874234795570374, -0.21256403625011444, 0.516832172870636),
                 (0.14874234795570374, -0.300564169883728, 0.4751555919647217),
                 (0.0940815880894661, -0.300564169883728, 0.4751555919647217),
                 (0.0940815880894661, -0.2575242519378662, 0.4956018924713135),
                 (0.14874234795570374, -0.2575242519378662, 0.4956018924713135),
                 (0.09507402777671814, -0.32204848527908325, 0.6106747388839722),
                 (0.0919361487030983, -0.34942492842674255, 0.6595474481582642),
                 (0.07160398364067078, 0.42593783140182495, 0.00015670654829591513),
                 (0.07160398364067078, 0.4332100749015808, 0.031483765691518784),
                 (0.08478706330060959, 0.5264858603477478, 0.00015670654829591513),
                 (0.08478706330060959, 0.5087188482284546, 0.04045509546995163),
                 (0.15319044888019562, 0.42593783140182495, 0.00015670654829591513),
                 (0.15319044888019562, 0.4332100749015808, 0.031483765691518784),
                 (0.1400073766708374, 0.5264858603477478, 0.00015670654829591513),
                 (0.1400073766708374, 0.5087188482284546, 0.04045509546995163),
                 (0.07160398364067078, 0.4670584499835968, 0.00015670654829591513),
                 (0.07160398364067078, 0.4661620259284973, 0.041660089045763016),
                 (0.15319044888019562, 0.4670584499835968, 0.00015670654829591513),
                 (0.15319044888019562, 0.4661620259284973, 0.041660089045763016),
                 (0.09152518212795258, 0.5033974647521973, 0.044210128486156464),
                 (0.08731447160243988, 0.47805556654930115, 0.21291929483413696),
                 (0.09152518212795258, 0.5364412665367126, 0.03228353336453438),
                 (0.08731447160243988, 0.5475400686264038, 0.23785896599292755),
                 (0.1337108165025711, 0.5033974647521973, 0.044210128486156464),
                 (0.1379215270280838, 0.47805556654930115, 0.21291929483413696),
                 (0.1337108165025711, 0.5364412665367126, 0.03228353336453438),
                 (0.1379215270280838, 0.5475400686264038, 0.23785896599292755),
                 (0.09144248068332672, 0.4954218566417694, 0.13416516780853271),
                 (0.09144248068332672, 0.543781042098999, 0.1378650665283203),
                 (0.13379353284835815, 0.543781042098999, 0.1378650665283203),
                 (0.13379353284835815, 0.4954218566417694, 0.13416516780853271),
                 (0.0910133495926857, 0.48739126324653625, 0.18103785812854767),
                 (0.0910133495926857, 0.5464491248130798, 0.1877254694700241),
                 (0.13422265648841858, 0.5464491248130798, 0.1877254694700241),
                 (0.13422265648841858, 0.48739126324653625, 0.18103785812854767),
                 (0.09152518212795258, 0.5398315787315369, 0.08037345111370087),
                 (0.1337108165025711, 0.5398315787315369, 0.08037345111370087),
                 (0.1337108165025711, 0.501255452632904, 0.0803571343421936),
                 (0.09152518212795258, 0.501255452632904, 0.0803571343421936),
                 (0.09152518212795258, 0.48096686601638794, 0.2089950293302536),
                 (0.08609234541654587, 0.2798759639263153, 0.4416663646697998),
                 (0.09369900077581406, 0.5463553667068481, 0.2361811101436615),
                 (0.07953459769487381, 0.41611534357070923, 0.49912458658218384),
                 (0.1337108165025711, 0.48096686601638794, 0.2089950293302536),
                 (0.14736194908618927, 0.2798759639263153, 0.4416663646697998),
                 (0.13153700530529022, 0.5463553667068481, 0.2361811101436615),
                 (0.1512700319290161, 0.4163151681423187, 0.5003165602684021),
                 (0.086656853556633, 0.41047707200050354, 0.2929084897041321),
                 (0.08455203473567963, 0.4718571901321411, 0.3424428403377533),
                 (0.14306969940662384, 0.4715815782546997, 0.34309518337249756),
                 (0.14254313707351685, 0.410476952791214, 0.2929084897041321),
                 (0.08466871082782745, 0.3633272051811218, 0.3372722864151001),
                 (0.08061196655035019, 0.4437384009361267, 0.3982129991054535),
                 (0.14779026806354523, 0.44347667694091797, 0.39907845854759216),
                 (0.14582815766334534, 0.3633272051811218, 0.3372722864151001),
                 (0.08800028264522552, 0.5062108039855957, 0.28879982233047485),
                 (0.13846823573112488, 0.5060420036315918, 0.28913038969039917),
                 (0.13716936111450195, 0.4539726972579956, 0.2499060332775116),
                 (0.09011451154947281, 0.4539726972579956, 0.2499060332775116),
                 (0.08514825254678726, 0.2859208881855011, 0.4430965185165405),
                 (0.08024858683347702, 0.4118046462535858, 0.47697708010673523),
                 (0.14715968072414398, 0.2859208881855011, 0.4430965185165405),
                 (0.1520593762397766, 0.4118046462535858, 0.47697708010673523),
                 (0.0810520127415657, 0.2670047879219055, 0.5378139615058899),
                 (0.08672720193862915, 0.42167484760284424, 0.5171970129013062),
                 (0.14986297488212585, 0.42167484760284424, 0.5171970129013062),
                 (0.1575266271829605, 0.2670047879219055, 0.5378139615058899),
                 (0.08299839496612549, 0.46483904123306274, 0.6986510157585144),
                 (0.08598203212022781, 0.44543710350990295, 0.5998786687850952),
                 (0.1445794254541397, 0.44543710350990295, 0.5998786687850952),
                 (0.13900475203990936, 0.45631539821624756, 0.6986510157585144),
                 (0.06937380880117416, 0.25827229022979736, 0.6471979022026062),
                 (0.06965399533510208, 0.26525816321372986, 0.714463472366333),
                 (0.15294145047664642, 0.26525816321372986, 0.714463472366333),
                 (0.15907210111618042, 0.25827229022979736, 0.6471979022026062),
                 (0.14542055130004883, 0.3786489963531494, 0.7307002544403076),
                 (0.07632619142532349, 0.3786489963531494, 0.7307002544403076),
                 (0.08267079293727875, 0.33894047141075134, 0.4499650299549103),
                 (0.1520593762397766, 0.33894047141075134, 0.4499650299549103),
                 (0.1575266271829605, 0.3500739634037018, 0.5217453837394714),
                 (0.0810520127415657, 0.3500739634037018, 0.5217453837394714),
                 (0.1526157557964325, 0.3636196553707123, 0.6233445405960083),
                 (0.07823669165372849, 0.3634151816368103, 0.6229056119918823),
                 (0.11615397036075592, 0.4151405394077301, 0.4684757888317108),
                 (0.11615397036075592, 0.28172042965888977, 0.4408017694950104),
                 (0.119289331138134, 0.25819143652915955, 0.5402060747146606),
                 (0.119289331138134, 0.4288981258869171, 0.5116092562675476),
                 (0.11295085400342941, 0.4645758867263794, 0.7025449872016907),
                 (0.11490202695131302, 0.45415201783180237, 0.5971492528915405),
                 (0.11269444227218628, 0.26374658942222595, 0.7234697341918945),
                 (0.1142229437828064, 0.25148338079452515, 0.6533059477806091),
                 (0.11282265186309814, 0.38221320509910583, 0.7391082644462585),
                 (0.11615397036075592, 0.33770570158958435, 0.44091665744781494),
                 (-0.07100262492895126, -0.33952850103378296, 0.00015670654829591513),
                 (-0.07100262492895126, -0.3310505747795105, 0.037943411618471146),
                 (-0.0828041359782219, -0.23622019588947296, 0.00015670654829591513),
                 (-0.0828041359782219, -0.24794478714466095, 0.03330723196268082),
                 (-0.1525891125202179, -0.33952850103378296, 0.00015670654829591513),
                 (-0.1525891125202179, -0.3310505747795105, 0.037943411618471146),
                 (-0.14078760147094727, -0.23622019588947296, 0.00015670654829591513),
                 (-0.14078760147094727, -0.24794478714466095, 0.03330723196268082),
                 (-0.07100262492895126, -0.29313594102859497, 0.00015670654829591513),
                 (-0.07100262492895126, -0.29354482889175415, 0.04705093055963516),
                 (-0.1525891125202179, -0.29313594102859497, 0.00015670654829591513),
                 (-0.1525891125202179, -0.29354482889175415, 0.04705093055963516),
                 (-0.08823954313993454, -0.2609728276729584, 0.034631382673978806),
                 (-0.09074520319700241, -0.23465439677238464, 0.14353352785110474),
                 (-0.08823954313993454, -0.23392502963542938, 0.022832589223980904),
                 (-0.09234374761581421, -0.1846509575843811, 0.14662817120552063),
                 (-0.13458092510700226, -0.2609728276729584, 0.034631382673978806),
                 (-0.1320752650499344, -0.23465439677238464, 0.14353352785110474),
                 (-0.13458092510700226, -0.23392502963542938, 0.022832589223980904),
                 (-0.1304766982793808, -0.1846509575843811, 0.14662817120552063),
                 (-0.08988508582115173, -0.24220114946365356, 0.09953918308019638),
                 (-0.09169509261846542, -0.20393596589565277, 0.09236843138933182),
                 (-0.13112539052963257, -0.20393596589565277, 0.09236843138933182),
                 (-0.13293538987636566, -0.24220114946365356, 0.09953918308019638),
                 (-0.09048310667276382, -0.216933012008667, 0.0622875839471817),
                 (-0.13233736157417297, -0.216933012008667, 0.0622875839471817),
                 (-0.13346335291862488, -0.24930249154567719, 0.0716349259018898),
                 (-0.08935713022947311, -0.24930249154567719, 0.0716349259018898),
                 (-0.0930844321846962, -0.23482508957386017, 0.1442282646894455),
                 (-0.08796416968107224, -0.2629968225955963, 0.42374300956726074),
                 (-0.0931384265422821, -0.18972148001194, 0.1477348804473877),
                 (-0.08954532444477081, -0.18008829653263092, 0.4525582790374756),
                 (-0.12728095054626465, -0.23482508957386017, 0.14305849373340607),
                 (-0.14716821908950806, -0.2629968225955963, 0.4217178225517273),
                 (-0.12733495235443115, -0.18972148001194, 0.14656510949134827),
                 (-0.14874936640262604, -0.18008829653263092, 0.45053309202194214),
                 (-0.09222646057605743, -0.24543730914592743, 0.29399845004081726),
                 (-0.09241391718387604, -0.18752418458461761, 0.29980000853538513),
                 (-0.13603073358535767, -0.18752418458461761, 0.29830801486968994),
                 (-0.13584327697753906, -0.24543730914592743, 0.29250645637512207),
                 (-0.09278234839439392, -0.18995068967342377, 0.25397008657455444),
                 (-0.13250944018363953, -0.18995068967342377, 0.2526111602783203),
                 (-0.13251473009586334, -0.24178291857242584, 0.2521235942840576),
                 (-0.09278766065835953, -0.24178291857242584, 0.25348255038261414),
                 (-0.09351697564125061, -0.19120848178863525, 0.20708876848220825),
                 (-0.1298465132713318, -0.19120848178863525, 0.20581208169460297),
                 (-0.12984144687652588, -0.23883497714996338, 0.20565983653068542),
                 (-0.0935119166970253, -0.23883497714996338, 0.2069365382194519),
                 (-0.09005621075630188, -0.2524970769882202, 0.3489239811897278),
                 (-0.09044501185417175, -0.18231332302093506, 0.3602901101112366),
                 (-0.14215059578418732, -0.18231332302093506, 0.35852140188217163),
                 (-0.14176179468631744, -0.2524970769882202, 0.34715527296066284),
                 (-0.08950363099575043, -0.26225224137306213, 0.4218537211418152),
                 (-0.08950363099575043, -0.17963387072086334, 0.4522298574447632),
                 (-0.14874234795570374, -0.26225224137306213, 0.4218537211418152),
                 (-0.14874234795570374, -0.17963387072086334, 0.4522298574447632),
                 (-0.09865953773260117, -0.343729168176651, 0.5313005447387695),
                 (-0.09865953773260117, -0.24639266729354858, 0.5840752124786377),
                 (-0.14874234795570374, -0.24639266729354858, 0.5840752124786377),
                 (-0.14874234795570374, -0.343729168176651, 0.5313005447387695),
                 (-0.09141841530799866, -0.40647560358047485, 0.626263439655304),
                 (-0.09743095189332962, -0.4281991124153137, 0.6708192229270935),
                 (-0.09743095189332962, -0.3048853278160095, 0.7284398078918457),
                 (-0.09155560284852982, -0.2818814516067505, 0.6849145293235779),
                 (-0.1430196613073349, -0.4281991124153137, 0.6708192229270935),
                 (-0.14874234795570374, -0.40647560358047485, 0.626263439655304),
                 (-0.14874234795570374, -0.2818814516067505, 0.6849145293235779),
                 (-0.1430196613073349, -0.3048853278160095, 0.7284398078918457),
                 (-0.1430196613073349, -0.379682332277298, 0.7175145149230957),
                 (-0.09743095189332962, -0.379682332277298, 0.7175145149230957),
                 (-0.08950363099575043, -0.22230146825313568, 0.43282169103622437),
                 (-0.14874234795570374, -0.22230146825313568, 0.43282169103622437),
                 (-0.14874234795570374, -0.2927470803260803, 0.5583820343017578),
                 (-0.09865953773260117, -0.2927470803260803, 0.5583820343017578),
                 (-0.14874234795570374, -0.3494969606399536, 0.6596591472625732),
                 (-0.14874234795570374, -0.3835839629173279, 0.5853593349456787),
                 (-0.09503897279500961, -0.3835839629173279, 0.5853593349456787),
                 (-0.0951075628399849, -0.26496079564094543, 0.6396316289901733),
                 (-0.14874234795570374, -0.26496079564094543, 0.6396316289901733),
                 (-0.14874234795570374, -0.32204756140708923, 0.6106402277946472),
                 (-0.0940815880894661, -0.21256403625011444, 0.516832172870636),
                 (-0.14874234795570374, -0.21256403625011444, 0.516832172870636),
                 (-0.14874234795570374, -0.300564169883728, 0.4751555919647217),
                 (-0.0940815880894661, -0.300564169883728, 0.4751555919647217),
                 (-0.0940815880894661, -0.2575242519378662, 0.4956018924713135),
                 (-0.14874234795570374, -0.2575242519378662, 0.4956018924713135),
                 (-0.09507402777671814, -0.32204848527908325, 0.6106747388839722),
                 (-0.0919361487030983, -0.34942492842674255, 0.6595474481582642),
                 (-0.07160398364067078, 0.42593783140182495, 0.00015670654829591513),
                 (-0.07160398364067078, 0.4332100749015808, 0.031483765691518784),
                 (-0.08478706330060959, 0.5264858603477478, 0.00015670654829591513),
                 (-0.08478706330060959, 0.5087188482284546, 0.04045509546995163),
                 (-0.15319044888019562, 0.42593783140182495, 0.00015670654829591513),
                 (-0.15319044888019562, 0.4332100749015808, 0.031483765691518784),
                 (-0.1400073766708374, 0.5264858603477478, 0.00015670654829591513),
                 (-0.1400073766708374, 0.5087188482284546, 0.04045509546995163),
                 (-0.07160398364067078, 0.4670584499835968, 0.00015670654829591513),
                 (-0.07160398364067078, 0.4661620259284973, 0.041660089045763016),
                 (-0.15319044888019562, 0.4670584499835968, 0.00015670654829591513),
                 (-0.15319044888019562, 0.4661620259284973, 0.041660089045763016),
                 (-0.09152518212795258, 0.5033974647521973, 0.044210128486156464),
                 (-0.08731447160243988, 0.47805556654930115, 0.21291929483413696),
                 (-0.09152518212795258, 0.5364412665367126, 0.03228353336453438),
                 (-0.08731447160243988, 0.5475400686264038, 0.23785896599292755),
                 (-0.1337108165025711, 0.5033974647521973, 0.044210128486156464),
                 (-0.1379215270280838, 0.47805556654930115, 0.21291929483413696),
                 (-0.1337108165025711, 0.5364412665367126, 0.03228353336453438),
                 (-0.1379215270280838, 0.5475400686264038, 0.23785896599292755),
                 (-0.09144248068332672, 0.4954218566417694, 0.13416516780853271),
                 (-0.09144248068332672, 0.543781042098999, 0.1378650665283203),
                 (-0.13379353284835815, 0.543781042098999, 0.1378650665283203),
                 (-0.13379353284835815, 0.4954218566417694, 0.13416516780853271),
                 (-0.0910133495926857, 0.48739126324653625, 0.18103785812854767),
                 (-0.0910133495926857, 0.5464491248130798, 0.1877254694700241),
                 (-0.13422265648841858, 0.5464491248130798, 0.1877254694700241),
                 (-0.13422265648841858, 0.48739126324653625, 0.18103785812854767),
                 (-0.09152518212795258, 0.5398315787315369, 0.08037345111370087),
                 (-0.1337108165025711, 0.5398315787315369, 0.08037345111370087),
                 (-0.1337108165025711, 0.501255452632904, 0.0803571343421936),
                 (-0.09152518212795258, 0.501255452632904, 0.0803571343421936),
                 (-0.09152518212795258, 0.48096686601638794, 0.2089950293302536),
                 (-0.08609234541654587, 0.2798759639263153, 0.4416663646697998),
                 (-0.09369900077581406, 0.5463553667068481, 0.2361811101436615),
                 (-0.07953459769487381, 0.41611534357070923, 0.49912458658218384),
                 (-0.1337108165025711, 0.48096686601638794, 0.2089950293302536),
                 (-0.14736194908618927, 0.2798759639263153, 0.4416663646697998),
                 (-0.13153700530529022, 0.5463553667068481, 0.2361811101436615),
                 (-0.1512700319290161, 0.4163151681423187, 0.5003165602684021),
                 (-0.086656853556633, 0.41047707200050354, 0.2929084897041321),
                 (-0.08455203473567963, 0.4718571901321411, 0.3424428403377533),
                 (-0.14306969940662384, 0.4715815782546997, 0.34309518337249756),
                 (-0.14254313707351685, 0.410476952791214, 0.2929084897041321),
                 (-0.08466871082782745, 0.3633272051811218, 0.3372722864151001),
                 (-0.08061196655035019, 0.4437384009361267, 0.3982129991054535),
                 (-0.14779026806354523, 0.44347667694091797, 0.39907845854759216),
                 (-0.14582815766334534, 0.3633272051811218, 0.3372722864151001),
                 (-0.08800028264522552, 0.5062108039855957, 0.28879982233047485),
                 (-0.13846823573112488, 0.5060420036315918, 0.28913038969039917),
                 (-0.13716936111450195, 0.4539726972579956, 0.2499060332775116),
                 (-0.09011451154947281, 0.4539726972579956, 0.2499060332775116),
                 (-0.08514825254678726, 0.2859208881855011, 0.4430965185165405),
                 (-0.08024858683347702, 0.4118046462535858, 0.47697708010673523),
                 (-0.14715968072414398, 0.2859208881855011, 0.4430965185165405),
                 (-0.1520593762397766, 0.4118046462535858, 0.47697708010673523),
                 (-0.0810520127415657, 0.2670047879219055, 0.5378139615058899),
                 (-0.08672720193862915, 0.42167484760284424, 0.5171970129013062),
                 (-0.14986297488212585, 0.42167484760284424, 0.5171970129013062),
                 (-0.1575266271829605, 0.2670047879219055, 0.5378139615058899),
                 (-0.08299839496612549, 0.46483904123306274, 0.6986510157585144),
                 (-0.08598203212022781, 0.44543710350990295, 0.5998786687850952),
                 (-0.1445794254541397, 0.44543710350990295, 0.5998786687850952),
                 (-0.13900475203990936, 0.45631539821624756, 0.6986510157585144),
                 (-0.06937380880117416, 0.25827229022979736, 0.6471979022026062),
                 (-0.06965399533510208, 0.26525816321372986, 0.714463472366333),
                 (-0.15294145047664642, 0.26525816321372986, 0.714463472366333),
                 (-0.15907210111618042, 0.25827229022979736, 0.6471979022026062),
                 (-0.14542055130004883, 0.3786489963531494, 0.7307002544403076),
                 (-0.07632619142532349, 0.3786489963531494, 0.7307002544403076),
                 (-0.08267079293727875, 0.33894047141075134, 0.4499650299549103),
                 (-0.1520593762397766, 0.33894047141075134, 0.4499650299549103),
                 (-0.1575266271829605, 0.3500739634037018, 0.5217453837394714),
                 (-0.0810520127415657, 0.3500739634037018, 0.5217453837394714),
                 (-0.1526157557964325, 0.3636196553707123, 0.6233445405960083),
                 (-0.07823669165372849, 0.3634151816368103, 0.6229056119918823),
                 (-0.11615397036075592, 0.4151405394077301, 0.4684757888317108),
                 (-0.11615397036075592, 0.28172042965888977, 0.4408017694950104),
                 (-0.119289331138134, 0.25819143652915955, 0.5402060747146606),
                 (-0.119289331138134, 0.4288981258869171, 0.5116092562675476),
                 (-0.11295085400342941, 0.4645758867263794, 0.7025449872016907),
                 (-0.11490202695131302, 0.45415201783180237, 0.5971492528915405),
                 (-0.11269444227218628, 0.26374658942222595, 0.7234697341918945),
                 (-0.1142229437828064, 0.25148338079452515, 0.6533059477806091),
                 (-0.11282265186309814, 0.38221320509910583, 0.7391082644462585),
                 (-0.11615397036075592, 0.33770570158958435, 0.44091665744781494),
                 (0.02578558959066868, -0.5902110934257507, 1.093826174736023),
                 (0.056956157088279724, -0.6107186079025269, 1.1835272312164307),
                 (0.03124832920730114, -0.5516963601112366, 1.0990269184112549),
                 (0.05804744362831116, -0.5982764363288879, 1.1887394189834595),
                 (0.08209586888551712, -0.597781777381897, 1.0817553997039795),
                 (0.09984828531742096, -0.6146633625030518, 1.1664228439331055),
                 (0.08033370226621628, -0.5589803457260132, 1.083749771118164),
                 (0.09945209324359894, -0.5982107520103455, 1.1724635362625122),
                 (0.057102542370557785, -0.5476754903793335, 1.0930590629577637),
                 (0.08138854056596756, -0.6177964806556702, 1.204372525215149),
                 (0.05543489009141922, -0.5956851243972778, 1.0881693363189697),
                 (0.08238687366247177, -0.6268935799598694, 1.1995285749435425),
                 (0.0362565815448761, -0.5998920798301697, 1.1532129049301147),
                 (0.03950014337897301, -0.5776971578598022, 1.1609612703323364),
                 (0.10375146567821503, -0.5791997313499451, 1.1395595073699951),
                 (0.09979330748319626, -0.6039175391197205, 1.1329084634780884),
                 (0.06942689418792725, -0.6031714081764221, 1.1460676193237305),
                 (0.07337482273578644, -0.5786415338516235, 1.1532045602798462),
                 (-0.02578558959066868, -0.5902110934257507, 1.093826174736023),
                 (-0.056956157088279724, -0.6107186079025269, 1.1835272312164307),
                 (-0.03124832920730114, -0.5516963601112366, 1.0990269184112549),
                 (-0.05804744362831116, -0.5982764363288879, 1.1887394189834595),
                 (-0.08209586888551712, -0.597781777381897, 1.0817553997039795),
                 (-0.09984828531742096, -0.6146633625030518, 1.1664228439331055),
                 (-0.08033370226621628, -0.5589803457260132, 1.083749771118164),
                 (-0.09945209324359894, -0.5982107520103455, 1.1724635362625122),
                 (-0.057102542370557785, -0.5476754903793335, 1.0930590629577637),
                 (-0.08138854056596756, -0.6177964806556702, 1.204372525215149),
                 (-0.05543489009141922, -0.5956851243972778, 1.0881693363189697),
                 (-0.08238687366247177, -0.6268935799598694, 1.1995285749435425),
                 (-0.0362565815448761, -0.5998920798301697, 1.1532129049301147),
                 (-0.03950014337897301, -0.5776971578598022, 1.1609612703323364),
                 (-0.10375146567821503, -0.5791997313499451, 1.1395595073699951),
                 (-0.09979330748319626, -0.6039175391197205, 1.1329084634780884),
                 (-0.06942689418792725, -0.6031714081764221, 1.1460676193237305),
                 (-0.07337482273578644, -0.5786415338516235, 1.1532045602798462))

        faces = ((7, 35, 44, 1),
                 (6, 8, 0, 2),
                 (8, 7, 1, 0),
                 (28, 6, 2, 21),
                 (1, 44, 45, 3),
                 (21, 2, 4, 23),
                 (22, 23, 4, 5),
                 (0, 1, 3, 5),
                 (2, 0, 5, 4),
                 (45, 22, 5, 3),
                 (9, 46, 35, 7),
                 (11, 9, 7, 8),
                 (34, 10, 6, 28),
                 (10, 11, 8, 6),
                 (13, 49, 47, 16),
                 (17, 16, 47, 48),
                 (15, 17, 48, 40),
                 (12, 13, 16, 17),
                 (39, 14, 15, 40),
                 (14, 12, 17, 15),
                 (10, 34, 49, 13),
                 (46, 9, 14, 39),
                 (11, 10, 13, 12),
                 (9, 11, 12, 14),
                 (29, 19, 44, 35),
                 (27, 20, 18, 30),
                 (30, 18, 19, 29),
                 (28, 21, 20, 27),
                 (19, 24, 45, 44),
                 (21, 23, 25, 20),
                 (22, 26, 25, 23),
                 (18, 26, 24, 19),
                 (20, 25, 26, 18),
                 (45, 24, 26, 22),
                 (31, 29, 35, 46),
                 (33, 30, 29, 31),
                 (34, 28, 27, 32),
                 (32, 27, 30, 33),
                 (37, 42, 47, 49),
                 (43, 48, 47, 42),
                 (41, 40, 48, 43),
                 (36, 43, 42, 37),
                 (39, 40, 41, 38),
                 (38, 41, 43, 36),
                 (32, 37, 49, 34),
                 (46, 39, 38, 31),
                 (33, 36, 37, 32),
                 (31, 38, 36, 33),
                 (77, 59, 53, 78),
                 (80, 69, 57, 75),
                 (79, 61, 55, 81),
                 (82, 71, 51, 76),
                 (73, 60, 54, 70),
                 (72, 59, 51, 71),
                 (69, 53, 59, 72),
                 (68, 56, 60, 73),
                 (75, 57, 61, 79),
                 (76, 51, 59, 77),
                 (50, 62, 67, 58),
                 (56, 64, 66, 60),
                 (65, 81, 90, 83),
                 (60, 66, 65, 54),
                 (68, 74, 64, 56),
                 (58, 67, 63, 52),
                 (52, 63, 74, 68),
                 (62, 50, 86, 87),
                 (52, 68, 73, 58),
                 (57, 69, 72, 61),
                 (61, 72, 71, 55),
                 (58, 73, 70, 50),
                 (81, 55, 71, 82),
                 (78, 53, 69, 80),
                 (63, 78, 80, 74),
                 (50, 70, 85, 86),
                 (62, 76, 77, 67),
                 (64, 75, 79, 66),
                 (82, 76, 88, 91),
                 (66, 79, 81, 65),
                 (74, 80, 75, 64),
                 (67, 77, 78, 63),
                 (85, 84, 87, 86),
                 (89, 83, 84, 85),
                 (83, 90, 91, 84),
                 (84, 91, 88, 87),
                 (76, 62, 87, 88),
                 (70, 54, 89, 85),
                 (81, 82, 91, 90),
                 (54, 65, 83, 89),
                 (96, 97, 110, 114),
                 (102, 100, 97, 96),
                 (92, 93, 113, 106),
                 (106, 113, 95, 94),
                 (117, 102, 96, 114),
                 (110, 111, 101, 93),
                 (107, 104, 100, 99),
                 (93, 101, 115, 113),
                 (100, 104, 105, 97),
                 (112, 108, 99, 98),
                 (116, 115, 101, 111),
                 (104, 116, 111, 105),
                 (97, 105, 111, 110),
                 (95, 103, 109, 108),
                 (108, 109, 107, 99),
                 (113, 115, 103, 95),
                 (106, 117, 114, 92),
                 (94, 95, 108, 112),
                 (98, 99, 100, 102),
                 (94, 112, 117, 106),
                 (107, 109, 116, 104),
                 (109, 103, 115, 116),
                 (112, 98, 102, 117),
                 (114, 110, 93, 92),
                 (118, 119, 121, 120),
                 (120, 121, 125, 124),
                 (124, 125, 123, 122),
                 (122, 123, 119, 118),
                 (120, 124, 122, 118),
                 (125, 121, 119, 123),
                 (126, 127, 129, 128),
                 (128, 129, 133, 132),
                 (132, 133, 131, 130),
                 (130, 131, 127, 126),
                 (128, 132, 130, 126),
                 (133, 129, 127, 131),
                 (134, 135, 137, 136),
                 (136, 137, 141, 140),
                 (140, 141, 139, 138),
                 (138, 139, 135, 134),
                 (136, 140, 138, 134),
                 (141, 137, 135, 139),
                 (142, 143, 145, 144),
                 (144, 145, 149, 148),
                 (148, 149, 147, 146),
                 (146, 147, 143, 142),
                 (144, 148, 146, 142),
                 (149, 145, 143, 147),
                 (158, 159, 153, 152),
                 (152, 153, 157, 156),
                 (160, 161, 155, 154),
                 (154, 155, 151, 150),
                 (158, 160, 154, 150),
                 (161, 159, 151, 155),
                 (157, 153, 159, 161),
                 (152, 156, 160, 158),
                 (156, 157, 161, 160),
                 (150, 151, 159, 158),
                 (170, 163, 165, 171),
                 (171, 165, 169, 172),
                 (172, 169, 167, 173),
                 (173, 167, 163, 170),
                 (164, 168, 166, 162),
                 (169, 165, 163, 167),
                 (176, 173, 170, 177),
                 (175, 172, 173, 176),
                 (174, 171, 172, 175),
                 (177, 170, 171, 174),
                 (162, 177, 174, 164),
                 (164, 174, 175, 168),
                 (168, 175, 176, 166),
                 (166, 176, 177, 162),
                 (198, 179, 181, 199),
                 (199, 181, 185, 200),
                 (200, 185, 183, 201),
                 (201, 183, 179, 198),
                 (180, 184, 182, 178),
                 (185, 181, 179, 183),
                 (192, 189, 186, 193),
                 (191, 188, 189, 192),
                 (190, 187, 188, 191),
                 (193, 186, 187, 190),
                 (197, 193, 190, 194),
                 (194, 190, 191, 195),
                 (195, 191, 192, 196),
                 (196, 192, 193, 197),
                 (182, 196, 197, 178),
                 (184, 195, 196, 182),
                 (180, 194, 195, 184),
                 (178, 197, 194, 180),
                 (189, 201, 198, 186),
                 (188, 200, 201, 189),
                 (187, 199, 200, 188),
                 (186, 198, 199, 187),
                 (224, 218, 214, 215),
                 (227, 213, 216, 228),
                 (218, 219, 211, 214),
                 (220, 221, 204, 202),
                 (232, 209, 206, 233),
                 (237, 219, 212, 213),
                 (230, 207, 208, 231),
                 (235, 222, 209, 232),
                 (234, 223, 207, 230),
                 (212, 217, 216, 213),
                 (214, 211, 210, 215),
                 (225, 215, 210, 226),
                 (217, 212, 219, 218),
                 (233, 206, 223, 234),
                 (231, 208, 222, 235),
                 (203, 205, 221, 220),
                 (216, 217, 218, 224),
                 (228, 216, 224, 229),
                 (229, 224, 215, 225),
                 (222, 229, 225, 209),
                 (208, 228, 229, 222),
                 (209, 225, 226, 206),
                 (223, 236, 227, 207),
                 (207, 227, 228, 208),
                 (205, 231, 235, 221),
                 (202, 233, 234, 220),
                 (220, 234, 230, 203),
                 (221, 235, 232, 204),
                 (203, 230, 231, 205),
                 (204, 232, 233, 202),
                 (206, 226, 236, 223),
                 (210, 211, 219, 237),
                 (236, 237, 213, 227),
                 (226, 210, 237, 236),
                 (246, 247, 241, 240),
                 (240, 241, 245, 244),
                 (248, 249, 243, 242),
                 (242, 243, 239, 238),
                 (246, 248, 242, 238),
                 (249, 247, 239, 243),
                 (245, 241, 247, 249),
                 (240, 244, 248, 246),
                 (244, 245, 249, 248),
                 (238, 239, 247, 246),
                 (262, 251, 253, 263),
                 (263, 253, 257, 264),
                 (264, 257, 255, 265),
                 (265, 255, 251, 262),
                 (252, 256, 254, 250),
                 (257, 253, 251, 255),
                 (268, 261, 258, 269),
                 (267, 260, 261, 268),
                 (266, 259, 260, 267),
                 (269, 258, 259, 266),
                 (261, 265, 262, 258),
                 (260, 264, 265, 261),
                 (259, 263, 264, 260),
                 (258, 262, 263, 259),
                 (250, 269, 266, 252),
                 (252, 266, 267, 256),
                 (256, 267, 268, 254),
                 (254, 268, 269, 250),
                 (282, 271, 273, 283),
                 (283, 273, 277, 284),
                 (284, 277, 275, 285),
                 (285, 275, 271, 282),
                 (272, 276, 274, 270),
                 (277, 273, 271, 275),
                 (288, 281, 278, 289),
                 (287, 280, 281, 288),
                 (286, 279, 280, 287),
                 (289, 278, 279, 286),
                 (281, 285, 282, 278),
                 (280, 284, 285, 281),
                 (279, 283, 284, 280),
                 (278, 282, 283, 279),
                 (270, 289, 286, 272),
                 (272, 286, 287, 276),
                 (276, 287, 288, 274),
                 (274, 288, 289, 270),
                 (312, 306, 304, 305),
                 (322, 307, 303, 320),
                 (323, 309, 292, 315),
                 (317, 319, 300, 296),
                 (315, 316, 294, 290),
                 (309, 310, 297, 292),
                 (314, 317, 296, 293),
                 (308, 311, 295, 291),
                 (318, 301, 300, 319),
                 (313, 307, 298, 299),
                 (320, 303, 302, 321),
                 (316, 321, 302, 294),
                 (318, 298, 307, 322),
                 (290, 294, 311, 308),
                 (293, 296, 310, 309),
                 (314, 293, 309, 323),
                 (300, 301, 306, 312),
                 (310, 312, 305, 297),
                 (296, 300, 312, 310),
                 (302, 303, 307, 313),
                 (294, 302, 313, 311),
                 (311, 313, 299, 295),
                 (291, 314, 323, 308),
                 (301, 318, 322, 306),
                 (297, 305, 321, 316),
                 (304, 320, 321, 305),
                 (298, 318, 319, 299),
                 (291, 295, 317, 314),
                 (292, 297, 316, 315),
                 (295, 299, 319, 317),
                 (308, 323, 315, 290),
                 (306, 322, 320, 304),
                 (332, 326, 327, 333),
                 (326, 330, 331, 327),
                 (334, 328, 329, 335),
                 (328, 324, 325, 329),
                 (332, 324, 328, 334),
                 (335, 329, 325, 333),
                 (331, 335, 333, 327),
                 (326, 332, 334, 330),
                 (330, 334, 335, 331),
                 (324, 332, 333, 325),
                 (344, 345, 339, 337),
                 (345, 346, 343, 339),
                 (346, 347, 341, 343),
                 (347, 344, 337, 341),
                 (338, 336, 340, 342),
                 (343, 341, 337, 339),
                 (350, 351, 344, 347),
                 (349, 350, 347, 346),
                 (348, 349, 346, 345),
                 (351, 348, 345, 344),
                 (336, 338, 348, 351),
                 (338, 342, 349, 348),
                 (342, 340, 350, 349),
                 (340, 336, 351, 350),
                 (372, 373, 355, 353),
                 (373, 374, 359, 355),
                 (374, 375, 357, 359),
                 (375, 372, 353, 357),
                 (354, 352, 356, 358),
                 (359, 357, 353, 355),
                 (366, 367, 360, 363),
                 (365, 366, 363, 362),
                 (364, 365, 362, 361),
                 (367, 364, 361, 360),
                 (371, 368, 364, 367),
                 (368, 369, 365, 364),
                 (369, 370, 366, 365),
                 (370, 371, 367, 366),
                 (356, 352, 371, 370),
                 (358, 356, 370, 369),
                 (354, 358, 369, 368),
                 (352, 354, 368, 371),
                 (363, 360, 372, 375),
                 (362, 363, 375, 374),
                 (361, 362, 374, 373),
                 (360, 361, 373, 372),
                 (398, 389, 388, 392),
                 (401, 402, 390, 387),
                 (392, 388, 385, 393),
                 (394, 376, 378, 395),
                 (406, 407, 380, 383),
                 (411, 387, 386, 393),
                 (404, 405, 382, 381),
                 (409, 406, 383, 396),
                 (408, 404, 381, 397),
                 (386, 387, 390, 391),
                 (388, 389, 384, 385),
                 (399, 400, 384, 389),
                 (391, 392, 393, 386),
                 (407, 408, 397, 380),
                 (405, 409, 396, 382),
                 (377, 394, 395, 379),
                 (390, 398, 392, 391),
                 (402, 403, 398, 390),
                 (403, 399, 389, 398),
                 (396, 383, 399, 403),
                 (382, 396, 403, 402),
                 (383, 380, 400, 399),
                 (397, 381, 401, 410),
                 (381, 382, 402, 401),
                 (379, 395, 409, 405),
                 (376, 394, 408, 407),
                 (394, 377, 404, 408),
                 (395, 378, 406, 409),
                 (377, 379, 405, 404),
                 (378, 376, 407, 406),
                 (380, 397, 410, 400),
                 (384, 411, 393, 385),
                 (410, 401, 387, 411),
                 (400, 410, 411, 384),
                 (420, 414, 415, 421),
                 (414, 418, 419, 415),
                 (422, 416, 417, 423),
                 (416, 412, 413, 417),
                 (420, 412, 416, 422),
                 (423, 417, 413, 421),
                 (419, 423, 421, 415),
                 (414, 420, 422, 418),
                 (418, 422, 423, 419),
                 (412, 420, 421, 413),
                 (436, 437, 427, 425),
                 (437, 438, 431, 427),
                 (438, 439, 429, 431),
                 (439, 436, 425, 429),
                 (426, 424, 428, 430),
                 (431, 429, 425, 427),
                 (442, 443, 432, 435),
                 (441, 442, 435, 434),
                 (440, 441, 434, 433),
                 (443, 440, 433, 432),
                 (435, 432, 436, 439),
                 (434, 435, 439, 438),
                 (433, 434, 438, 437),
                 (432, 433, 437, 436),
                 (424, 426, 440, 443),
                 (426, 430, 441, 440),
                 (430, 428, 442, 441),
                 (428, 424, 443, 442),
                 (456, 457, 447, 445),
                 (457, 458, 451, 447),
                 (458, 459, 449, 451),
                 (459, 456, 445, 449),
                 (446, 444, 448, 450),
                 (451, 449, 445, 447),
                 (462, 463, 452, 455),
                 (461, 462, 455, 454),
                 (460, 461, 454, 453),
                 (463, 460, 453, 452),
                 (455, 452, 456, 459),
                 (454, 455, 459, 458),
                 (453, 454, 458, 457),
                 (452, 453, 457, 456),
                 (444, 446, 460, 463),
                 (446, 450, 461, 460),
                 (450, 448, 462, 461),
                 (448, 444, 463, 462),
                 (486, 479, 478, 480),
                 (496, 494, 477, 481),
                 (497, 489, 466, 483),
                 (491, 470, 474, 493),
                 (489, 464, 468, 490),
                 (483, 466, 471, 484),
                 (488, 467, 470, 491),
                 (482, 465, 469, 485),
                 (492, 493, 474, 475),
                 (487, 473, 472, 481),
                 (494, 495, 476, 477),
                 (490, 468, 476, 495),
                 (492, 496, 481, 472),
                 (464, 482, 485, 468),
                 (467, 483, 484, 470),
                 (488, 497, 483, 467),
                 (474, 486, 480, 475),
                 (484, 471, 479, 486),
                 (470, 484, 486, 474),
                 (476, 487, 481, 477),
                 (468, 485, 487, 476),
                 (485, 469, 473, 487),
                 (465, 482, 497, 488),
                 (475, 480, 496, 492),
                 (471, 490, 495, 479),
                 (478, 479, 495, 494),
                 (472, 473, 493, 492),
                 (465, 488, 491, 469),
                 (466, 489, 490, 471),
                 (469, 491, 493, 473),
                 (482, 464, 489, 497),
                 (480, 478, 494, 496),
                 (510, 499, 501, 511),
                 (515, 507, 505, 512),
                 (512, 505, 503, 513),
                 (514, 509, 499, 510),
                 (506, 504, 502, 508),
                 (507, 501, 499, 509),
                 (505, 507, 509, 503),
                 (500, 506, 508, 498),
                 (513, 503, 509, 514),
                 (511, 501, 507, 515),
                 (500, 511, 515, 506),
                 (502, 513, 514, 508),
                 (508, 514, 510, 498),
                 (504, 512, 513, 502),
                 (506, 515, 512, 504),
                 (498, 510, 511, 500),
                 (528, 529, 519, 517),
                 (533, 530, 523, 525),
                 (530, 531, 521, 523),
                 (532, 528, 517, 527),
                 (524, 526, 520, 522),
                 (525, 527, 517, 519),
                 (523, 521, 527, 525),
                 (518, 516, 526, 524),
                 (531, 532, 527, 521),
                 (529, 533, 525, 519),
                 (518, 524, 533, 529),
                 (520, 526, 532, 531),
                 (526, 516, 528, 532),
                 (522, 520, 531, 530),
                 (524, 522, 530, 533),
                 (516, 518, 529, 528))



        scene = bpy.context.scene
        me = bpy.data.meshes.new("Dog_GEO")
        me.from_pydata(verts, [], faces)
        ob = bpy.data.objects.new("Dog_GEO", me)
        scene.collection.objects.link(ob)




#=============================================
# Create "Dog" Metarig
#=============================================



        # Check Rigify in preferences

        disable_Rigify = bpy.ops.preferences.addon_disable(module="rigify")

        if disable_Rigify:
            bpy.ops.preferences.addon_enable(module="rigify")

        else:
            pass


        if bpy.context.mode == 'OBJECT':

            # Create single bone / go to Edit Mode / select and delete bone
            bpy.ops.object.armature_add(enter_editmode=0, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1))
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)
            bpy.ops.armature.select_all(action='SELECT')
            bpy.ops.armature.delete()


        else:
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)


        # Active object
        ob = bpy.context.object

        # Rig Name
        if ob.type == 'ARMATURE':
            ob.name = 'dog_metarig'
            

        arm = bpy.data.objects[ob.name].data


        for i in range(6):
            arm.rigify_colors.add()

        arm.rigify_colors[0].name = "Root"
        arm.rigify_colors[0].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[0].normal = Color((0.4352940022945404, 0.18431399762630463, 0.4156860113143921))
        arm.rigify_colors[0].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[0].standard_colors_lock = True
        arm.rigify_colors[1].name = "IK"
        arm.rigify_colors[1].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[1].normal = Color((0.6039220094680786, 0.0, 0.0))
        arm.rigify_colors[1].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[1].standard_colors_lock = True
        arm.rigify_colors[2].name = "Special"
        arm.rigify_colors[2].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[2].normal = Color((0.9568629860877991, 0.7882350087165833, 0.04705899953842163))
        arm.rigify_colors[2].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[2].standard_colors_lock = True
        arm.rigify_colors[3].name = "Tweak"
        arm.rigify_colors[3].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[3].normal = Color((0.03921600058674812, 0.21176500618457794, 0.5803920030593872))
        arm.rigify_colors[3].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[3].standard_colors_lock = True
        arm.rigify_colors[4].name = "FK"
        arm.rigify_colors[4].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[4].normal = Color((0.11764699965715408, 0.5686269998550415, 0.035294000059366226))
        arm.rigify_colors[4].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[4].standard_colors_lock = True
        arm.rigify_colors[5].name = "Extra"
        arm.rigify_colors[5].active = Color((0.5490196347236633, 1.0, 1.0))
        arm.rigify_colors[5].normal = Color((0.9686279892921448, 0.2509799897670746, 0.09411799907684326))
        arm.rigify_colors[5].select = Color((0.31372547149658203, 0.7843138575553894, 1.0))
        arm.rigify_colors[5].standard_colors_lock = True

        for i in range(29):
            arm.rigify_layers.add()

        arm.rigify_layers[0].name = "Face"
        arm.rigify_layers[0].row = 1
        arm.rigify_layers[0].selset = False
        arm.rigify_layers[0].group = 5
        arm.rigify_layers[1].name = "Face (Primary)"
        arm.rigify_layers[1].row = 2
        arm.rigify_layers[1].selset = False
        arm.rigify_layers[1].group = 2
        arm.rigify_layers[2].name = "Face (Secondary)"
        arm.rigify_layers[2].row = 2
        arm.rigify_layers[2].selset = False
        arm.rigify_layers[2].group = 3
        arm.rigify_layers[3].name = "Spine"
        arm.rigify_layers[3].row = 3
        arm.rigify_layers[3].selset = False
        arm.rigify_layers[3].group = 3
        arm.rigify_layers[4].name = "Spine (Tweak)"
        arm.rigify_layers[4].row = 4
        arm.rigify_layers[4].selset = False
        arm.rigify_layers[4].group = 4
        arm.rigify_layers[5].name = "Paws"
        arm.rigify_layers[5].row = 5
        arm.rigify_layers[5].selset = False
        arm.rigify_layers[5].group = 6
        arm.rigify_layers[6].name = "Paws (Tweak)"
        arm.rigify_layers[6].row = 6
        arm.rigify_layers[6].selset = False
        arm.rigify_layers[6].group = 4
        arm.rigify_layers[7].name = "Arm.L (IK)"
        arm.rigify_layers[7].row = 7
        arm.rigify_layers[7].selset = False
        arm.rigify_layers[7].group = 2
        arm.rigify_layers[8].name = "Arm.L (FK)"
        arm.rigify_layers[8].row = 8
        arm.rigify_layers[8].selset = False
        arm.rigify_layers[8].group = 5
        arm.rigify_layers[9].name = "Arm.L (Tweak)"
        arm.rigify_layers[9].row = 9
        arm.rigify_layers[9].selset = False
        arm.rigify_layers[9].group = 4
        arm.rigify_layers[10].name = "Arm.R (IK)"
        arm.rigify_layers[10].row = 7
        arm.rigify_layers[10].selset = False
        arm.rigify_layers[10].group = 2
        arm.rigify_layers[11].name = "Arm.R (FK)"
        arm.rigify_layers[11].row = 8
        arm.rigify_layers[11].selset = False
        arm.rigify_layers[11].group = 5
        arm.rigify_layers[12].name = "Arm.R (Tweak)"
        arm.rigify_layers[12].row = 9
        arm.rigify_layers[12].selset = False
        arm.rigify_layers[12].group = 4
        arm.rigify_layers[13].name = "Leg.L (IK)"
        arm.rigify_layers[13].row = 10
        arm.rigify_layers[13].selset = False
        arm.rigify_layers[13].group = 2
        arm.rigify_layers[14].name = "Leg.L (FK)"
        arm.rigify_layers[14].row = 11
        arm.rigify_layers[14].selset = False
        arm.rigify_layers[14].group = 5
        arm.rigify_layers[15].name = "Leg.L (Tweak)"
        arm.rigify_layers[15].row = 12
        arm.rigify_layers[15].selset = False
        arm.rigify_layers[15].group = 4
        arm.rigify_layers[16].name = "Leg.R (IK)"
        arm.rigify_layers[16].row = 10
        arm.rigify_layers[16].selset = False
        arm.rigify_layers[16].group = 2
        arm.rigify_layers[17].name = "Leg.R (FK)"
        arm.rigify_layers[17].row = 11
        arm.rigify_layers[17].selset = False
        arm.rigify_layers[17].group = 5
        arm.rigify_layers[18].name = "Leg.R (Tweak)"
        arm.rigify_layers[18].row = 12
        arm.rigify_layers[18].selset = False
        arm.rigify_layers[18].group = 4
        arm.rigify_layers[19].name = "Tail"
        arm.rigify_layers[19].row = 13
        arm.rigify_layers[19].selset = False
        arm.rigify_layers[19].group = 6
        arm.rigify_layers[20].name = ""
        arm.rigify_layers[20].row = 1
        arm.rigify_layers[20].selset = False
        arm.rigify_layers[20].group = 0
        arm.rigify_layers[21].name = ""
        arm.rigify_layers[21].row = 13
        arm.rigify_layers[21].selset = False
        arm.rigify_layers[21].group = 0
        arm.rigify_layers[22].name = ""
        arm.rigify_layers[22].row = 13
        arm.rigify_layers[22].selset = False
        arm.rigify_layers[22].group = 0
        arm.rigify_layers[23].name = ""
        arm.rigify_layers[23].row = 1
        arm.rigify_layers[23].selset = False
        arm.rigify_layers[23].group = 0
        arm.rigify_layers[24].name = ""
        arm.rigify_layers[24].row = 1
        arm.rigify_layers[24].selset = False
        arm.rigify_layers[24].group = 0
        arm.rigify_layers[25].name = ""
        arm.rigify_layers[25].row = 1
        arm.rigify_layers[25].selset = False
        arm.rigify_layers[25].group = 0
        arm.rigify_layers[26].name = ""
        arm.rigify_layers[26].row = 1
        arm.rigify_layers[26].selset = False
        arm.rigify_layers[26].group = 0
        arm.rigify_layers[27].name = ""
        arm.rigify_layers[27].row = 1
        arm.rigify_layers[27].selset = False
        arm.rigify_layers[27].group = 0
        arm.rigify_layers[28].name = "Root"
        arm.rigify_layers[28].row = 14
        arm.rigify_layers[28].selset = False
        arm.rigify_layers[28].group = 1

        bones = {}

        bone = arm.edit_bones.new('spine.004')
        bone.head = -0.0000, 0.4032, 0.7801
        bone.tail = 0.0000, 0.2575, 0.8023
        bone.roll = 0.0000
        bone.use_connect = False
        bones['spine.004'] = bone.name
        bone = arm.edit_bones.new('spine.003')
        bone.head = -0.0000, 0.4032, 0.7801
        bone.tail = -0.0000, 0.5397, 0.7179
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.003'] = bone.name
        bone = arm.edit_bones.new('spine.005')
        bone.head = 0.0000, 0.2575, 0.8023
        bone.tail = 0.0000, 0.1170, 0.8102
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.005'] = bone.name
        bone = arm.edit_bones.new('spine.002')
        bone.head = -0.0000, 0.5397, 0.7179
        bone.tail = -0.0000, 0.6573, 0.6248
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['spine.002'] = bone.name
        bone = arm.edit_bones.new('spine.006')
        bone.head = 0.0000, 0.1170, 0.8102
        bone.tail = 0.0000, 0.0001, 0.7985
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['spine.006'] = bone.name
        bone = arm.edit_bones.new('pelvis.L')
        bone.head = 0.0000, 0.4061, 0.6873
        bone.tail = 0.0751, 0.2830, 0.8023
        bone.roll = -1.1657
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['pelvis.L'] = bone.name
        bone = arm.edit_bones.new('pelvis.R')
        bone.head = -0.0000, 0.4061, 0.6873
        bone.tail = -0.0751, 0.2830, 0.8023
        bone.roll = 1.1657
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['pelvis.R'] = bone.name
        bone = arm.edit_bones.new('thigh.L')
        bone.head = 0.1249, 0.4062, 0.6768
        bone.tail = 0.1249, 0.3205, 0.4807
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['thigh.L'] = bone.name
        bone = arm.edit_bones.new('thigh.R')
        bone.head = -0.1249, 0.4062, 0.6768
        bone.tail = -0.1249, 0.3205, 0.4807
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['thigh.R'] = bone.name
        bone = arm.edit_bones.new('spine.001')
        bone.head = -0.0000, 0.6573, 0.6248
        bone.tail = -0.0000, 0.7667, 0.5221
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['spine.001'] = bone.name
        bone = arm.edit_bones.new('spine.007')
        bone.head = 0.0000, 0.0001, 0.7985
        bone.tail = -0.0000, -0.1521, 0.7934
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.006']]
        bones['spine.007'] = bone.name
        bone = arm.edit_bones.new('shin.L')
        bone.head = 0.1249, 0.3205, 0.4807
        bone.tail = 0.1114, 0.5094, 0.2193
        bone.roll = 0.0167
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.L']]
        bones['shin.L'] = bone.name
        bone = arm.edit_bones.new('shin.R')
        bone.head = -0.1249, 0.3205, 0.4807
        bone.tail = -0.1114, 0.5094, 0.2193
        bone.roll = -0.0167
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.R']]
        bones['shin.R'] = bone.name
        bone = arm.edit_bones.new('spine')
        bone.head = -0.0000, 0.7667, 0.5221
        bone.tail = -0.0000, 0.8866, 0.4321
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.001']]
        bones['spine'] = bone.name
        bone = arm.edit_bones.new('spine.008')
        bone.head = -0.0000, -0.1521, 0.7934
        bone.tail = -0.0000, -0.3353, 0.7962
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.007']]
        bones['spine.008'] = bone.name
        bone = arm.edit_bones.new('foot.L')
        bone.head = 0.1114, 0.5094, 0.2193
        bone.tail = 0.1088, 0.5210, 0.0398
        bone.roll = 0.0179
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.L']]
        bones['foot.L'] = bone.name
        bone = arm.edit_bones.new('foot.R')
        bone.head = -0.1114, 0.5094, 0.2193
        bone.tail = -0.1088, 0.5210, 0.0398
        bone.roll = -0.0179
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['shin.R']]
        bones['foot.R'] = bone.name
        bone = arm.edit_bones.new('spine.009')
        bone.head = -0.0000, -0.3353, 0.7962
        bone.tail = -0.0000, -0.3940, 0.8475
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['spine.009'] = bone.name
        bone = arm.edit_bones.new('shoulder.L')
        bone.head = 0.0596, -0.2345, 0.8155
        bone.tail = 0.1249, -0.3439, 0.6623
        bone.roll = -0.4077
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['shoulder.L'] = bone.name
        bone = arm.edit_bones.new('shoulder.R')
        bone.head = -0.0596, -0.2345, 0.8155
        bone.tail = -0.1249, -0.3439, 0.6623
        bone.roll = 0.4077
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['shoulder.R'] = bone.name
        bone = arm.edit_bones.new('breast.L')
        bone.head = 0.0340, -0.1652, 0.6856
        bone.tail = 0.0340, -0.2969, 0.5311
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['breast.L'] = bone.name
        bone = arm.edit_bones.new('breast.R')
        bone.head = -0.0340, -0.1652, 0.6856
        bone.tail = -0.0340, -0.2969, 0.5311
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.008']]
        bones['breast.R'] = bone.name
        bone = arm.edit_bones.new('toe.L')
        bone.head = 0.1088, 0.5210, 0.0398
        bone.tail = 0.1088, 0.4344, 0.0000
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.L']]
        bones['toe.L'] = bone.name
        bone = arm.edit_bones.new('toe.R')
        bone.head = -0.1088, 0.5210, 0.0398
        bone.tail = -0.1088, 0.4344, 0.0000
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['foot.R']]
        bones['toe.R'] = bone.name
        bone = arm.edit_bones.new('spine.010')
        bone.head = -0.0000, -0.3940, 0.8475
        bone.tail = 0.0000, -0.4621, 0.9229
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.009']]
        bones['spine.010'] = bone.name
        bone = arm.edit_bones.new('front_thigh.L')
        bone.head = 0.1249, -0.3521, 0.6347
        bone.tail = 0.1174, -0.2245, 0.4418
        bone.roll = 0.0175
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.L']]
        bones['front_thigh.L'] = bone.name
        bone = arm.edit_bones.new('front_thigh.R')
        bone.head = -0.1249, -0.3521, 0.6347
        bone.tail = -0.1174, -0.2245, 0.4418
        bone.roll = -0.0175
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.R']]
        bones['front_thigh.R'] = bone.name
        bone = arm.edit_bones.new('spine.011')
        bone.head = 0.0000, -0.4621, 0.9229
        bone.tail = 0.0000, -0.5972, 1.0323
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.010']]
        bones['spine.011'] = bone.name
        bone = arm.edit_bones.new('front_shin.L')
        bone.head = 0.1174, -0.2245, 0.4418
        bone.tail = 0.1106, -0.2158, 0.1422
        bone.roll = -0.0165
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_thigh.L']]
        bones['front_shin.L'] = bone.name
        bone = arm.edit_bones.new('front_shin.R')
        bone.head = -0.1174, -0.2245, 0.4418
        bone.tail = -0.1106, -0.2158, 0.1422
        bone.roll = 0.0165
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_thigh.R']]
        bones['front_shin.R'] = bone.name
        bone = arm.edit_bones.new('front_foot.L')
        bone.head = 0.1106, -0.2158, 0.1422
        bone.tail = 0.1088, -0.2462, 0.0280
        bone.roll = 0.0262
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_shin.L']]
        bones['front_foot.L'] = bone.name
        bone = arm.edit_bones.new('front_foot.R')
        bone.head = -0.1106, -0.2158, 0.1422
        bone.tail = -0.1088, -0.2462, 0.0280
        bone.roll = -0.0262
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_shin.R']]
        bones['front_foot.R'] = bone.name
        bone = arm.edit_bones.new('front_toe.L')
        bone.head = 0.1088, -0.2462, 0.0280
        bone.tail = 0.1088, -0.3259, 0.0000
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_foot.L']]
        bones['front_toe.L'] = bone.name
        bone = arm.edit_bones.new('front_toe.R')
        bone.head = -0.1088, -0.2462, 0.0280
        bone.tail = -0.1088, -0.3259, 0.0000
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['front_foot.R']]
        bones['front_toe.R'] = bone.name

        obj = bpy.context.object

        bpy.ops.object.mode_set(mode='OBJECT')
        pbone = obj.pose.bones[bones['spine.004']]
        pbone.rigify_type = 'spines.basic_spine'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.pivot_pos = 2
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.003']]
        pbone.rigify_type = 'spines.basic_tail'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.copy_rotation_axes = [True, False, True]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.005']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.neck_pos = 5
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.tweak_layers = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.006']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['pelvis.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['pelvis.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.L']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.R']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.001']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.007']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shin.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.008']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.009']]
        pbone.rigify_type = 'spines.super_head'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['shoulder.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['shoulder.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['breast.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['breast.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'YXZ'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.010']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_thigh.L']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['front_thigh.R']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.011']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_shin.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_shin.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['front_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['front_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.rotation_axis = "x"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass

        bpy.ops.object.mode_set(mode='EDIT')
        for bone in arm.edit_bones:
            bone.select = False
            bone.select_head = False
            bone.select_tail = False
        for b in bones:
            bone = arm.edit_bones[bones[b]]
            bone.select = True
            bone.select_head = True
            bone.select_tail = True
            bone.bbone_x = bone.bbone_z = bone.length * 0.05
            arm.edit_bones.active = bone

        arm.layers = [(x in [3, 4, 7, 10, 13, 16, 19]) for x in range(32)]





        bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
        bpy.ops.pose.rigify_generate()


        # Rename Existing Armature with name 'Rig'
        for arm in bpy.context.selected_objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'dog_rig'



        # Rename Existing Rigify UI Script 'rig_ui.py'
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_dog.py'



        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Dog_GEO'):
                o.select_set(True)
            else:
                o.select_set(False)



 
        # Delete Metarig
        obj = bpy.data.objects['dog_metarig']
        bpy.data.objects.remove(obj)



        # Go to Pose Mode
        bpy.ops.object.posemode_toggle()



        # 1. Select Dog GEO / 2. Select Dog metarig and parent(auto)

        bpy.data.objects["Dog_GEO"].select_set(True)
        bpy.data.objects["dog_rig"].select_set(True)

        bpy.ops.object.parent_set(type='ARMATURE_AUTO')



        # Arms/Legs FK Layers
        bpy.context.object.data.layers[8] = False
        bpy.context.object.data.layers[11] = False
        bpy.context.object.data.layers[14] = False
        bpy.context.object.data.layers[17] = False


        # View - Frame Selected
        pose_bones = bpy.context.object.pose.bones
        for pb in pose_bones:
            if pb.name.startswith('root'):
                pb.bone.select = 1
                bpy.ops.view3d.view_selected(use_all_regions=0)
                pb.bone.select = 0



#===================================
# Create "Dog" Material
#===================================

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Dog_GEO'):
                o.select_set(True)
                bpy.context.view_layer.objects.active = o
            else:
                o.select_set(False)


        ob = bpy.context.active_object

        # Get material
        mat = bpy.data.materials.get("Dog_Mat")
        if mat is None:
            # create material
            mat = bpy.data.materials.new(name="Dog_Mat")

        # Assign Material to object
        if ob.data.materials:
            # assign to 1st material slot
            ob.data.materials[0] = mat
        else:
            # no slots
            ob.data.materials.append(mat)

        bpy.context.object.active_material.diffuse_color = (0.83, 0.64, 0.36, 1)


#===================================
# End - Create "Dog" Material
#===================================





        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Dog_GEO'):

                o.select_set(False)

        bpy.context.scene.tool_settings.lock_object_mode = False



        return {'FINISHED'}



#=====================================================
#     END  - DOG RIG - RIGIFY ZOO
#=====================================================





classes = [OBJECT_OT_dog_rigify_zoo_ra]



def register():
    for cls in classes:
        bpy.utils.register_class(cls)



def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)




if __name__ == "__main__":
    register()





