import bpy
from mathutils import Color


#=====================================================
#            HORSE RIG - RIGIFY ZOO
#=====================================================
 
 
 

# Add Rigify Rig - Horse
class OBJECT_OT_horse_rigify_zoo_ra(bpy.types.Operator):
    '''Horse Rig'''
    bl_idname = "object.horse_rigify_zoo_ra"
    bl_label = "Horse"
    bl_options = {'REGISTER', 'UNDO'}

 
    def execute(self, context):
        

        # Rename Existing Rigify UI Script
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_new_name.py'



#=============================================
# Create "Horse" GEO
#=============================================




        # Rename Existing Armature with name 'rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'Rename this rig'    
        
             
        # Rename Existing Armature with name 'horse_rig'
        for arm in bpy.data.objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('horse_rig'):
                arm.name = 'horse rig next'    
        


        current_mode = bpy.context.mode
        if current_mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    

 
        # Rename "Horse_GEO"
        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name == 'Horse_GEO':
                o.name = 'Horse'


        # Set active 'Scene Collection'
        scene_collection = bpy.context.view_layer.layer_collection
        bpy.context.view_layer.active_layer_collection = scene_collection




# Create "Horse" Mesh




        verts = ((0.006312556564807892, -1.1011037826538086, 1.7352086305618286),
                 (0.03480314463376999, -1.1298606395721436, 1.8220243453979492),
                 (0.005066676065325737, -1.0513828992843628, 1.7298226356506348),
                 (0.032157957553863525, -1.1016303300857544, 1.7957526445388794),
                 (0.05368532985448837, -1.1001167297363281, 1.7058720588684082),
                 (0.05482638254761696, -1.1296802759170532, 1.821423053741455),
                 (0.05243945121765137, -1.0503958463668823, 1.7004860639572144),
                 (0.0521811917424202, -1.101449966430664, 1.7951513528823853),
                 (-0.006312556564807892, -1.1011037826538086, 1.7352086305618286),
                 (-0.03480314463376999, -1.1298606395721436, 1.8220243453979492),
                 (-0.005066676065325737, -1.0513828992843628, 1.7298226356506348),
                 (-0.032157957553863525, -1.1016303300857544, 1.7957526445388794),
                 (-0.05368532985448837, -1.1001167297363281, 1.7058720588684082),
                 (-0.05482638254761696, -1.1296802759170532, 1.821423053741455),
                 (-0.05243945121765137, -1.0503958463668823, 1.7004860639572144),
                 (-0.0521811917424202, -1.101449966430664, 1.7951513528823853),
                 (0.10645917057991028, -0.27889662981033325, 0.8772375583648682),
                 (0.06455854326486588, -0.2337576150894165, 1.3743802309036255),
                 (0.1067478284239769, 0.002884119050577283, 0.9174014329910278),
                 (0.06375589221715927, -0.01861562579870224, 1.3560136556625366),
                 (0.10424774140119553, 0.19148719310760498, 0.9827826619148254),
                 (0.061803463846445084, 0.16634978353977203, 1.3851709365844727),
                 (0.10337251424789429, 0.2949502468109131, 0.9935159087181091),
                 (0.0706285759806633, 0.3018967807292938, 1.4116168022155762),
                 (0.10261961072683334, 0.5513225793838501, 1.0102235078811646),
                 (0.08806430548429489, 0.6138351559638977, 1.255953073501587),
                 (0.10645464062690735, -0.6067794561386108, 0.8989225029945374),
                 (0.07305645942687988, -0.39798057079315186, 1.4405913352966309),
                 (0.06296859681606293, -0.7813931703567505, 1.2008124589920044),
                 (0.061245568096637726, -0.5765814185142517, 1.5139150619506836),
                 (0.083949014544487, -0.7265322208404541, 0.9915563464164734),
                 (0.07136400789022446, -0.49235105514526367, 1.4693821668624878),
                 (0.04826954007148743, -0.8474932909011841, 1.3124254941940308),
                 (0.05154004693031311, -0.665259838104248, 1.5735841989517212),
                 (0.0428691990673542, -0.9047551155090332, 1.415850043296814),
                 (0.04928245767951012, -0.7833718061447144, 1.6424058675765991),
                 (0.10261961072683334, 0.44826504588127136, 0.9726549983024597),
                 (0.10261961072683334, 0.4811844527721405, 1.3730624914169312),
                 (0.15528561174869537, -0.01158145535737276, 1.1419997215270996),
                 (0.15083947777748108, -0.2606493830680847, 1.1284503936767578),
                 (0.12380607426166534, 0.1766367107629776, 1.1798393726348877),
                 (0.14122620224952698, -0.4828026294708252, 1.1821348667144775),
                 (0.12313904613256454, -0.6126652359962463, 1.2518142461776733),
                 (0.09701522439718246, -0.6825529336929321, 1.3378523588180542),
                 (0.08278301358222961, -0.7632101774215698, 1.4236090183258057),
                 (0.0737694576382637, -0.849981427192688, 1.5231995582580566),
                 (0.14957933127880096, 0.2941688597202301, 1.1953760385513306),
                 (0.11616531014442444, 0.601787805557251, 1.1270337104797363),
                 (0.1516394317150116, 0.4613412618637085, 1.1637494564056396),
                 (0.05016414076089859, -0.8695657849311829, 1.6829828023910522),
                 (0.04504809156060219, -0.9584510326385498, 1.470571756362915),
                 (0.06730835139751434, -0.919801652431488, 1.5654999017715454),
                 (0.1068386435508728, -0.13295094668865204, 0.8898504972457886),
                 (0.06380835920572281, -0.12627895176410675, 1.3513153791427612),
                 (0.16372697055339813, -0.13784091174602509, 1.1306442022323608),
                 (0.10645690560340881, -0.42235732078552246, 0.8772591352462769),
                 (0.06859634816646576, -0.3140207529067993, 1.4042599201202393),
                 (0.14432954788208008, -0.37522092461586, 1.1534183025360107),
                 (0.062064118683338165, 0.06851188838481903, 1.3659923076629639),
                 (0.1043323427438736, 0.09723494946956635, 0.9424939155578613),
                 (0.14550060033798218, 0.07926667481660843, 1.161238670349121),
                 (-0.10645917057991028, -0.27889662981033325, 0.8772375583648682),
                 (-0.06455854326486588, -0.2337576150894165, 1.3743802309036255),
                 (-0.1067478284239769, 0.002884119050577283, 0.9174014329910278),
                 (-0.06375589221715927, -0.01861562579870224, 1.3560136556625366),
                 (-0.10424774140119553, 0.19148719310760498, 0.9827826619148254),
                 (-0.061803463846445084, 0.16634978353977203, 1.3851709365844727),
                 (-0.10337251424789429, 0.2949502468109131, 0.9935159087181091),
                 (-0.0706285759806633, 0.3018967807292938, 1.4116168022155762),
                 (-0.10261961072683334, 0.5513225793838501, 1.0102235078811646),
                 (-0.08806430548429489, 0.6138351559638977, 1.255953073501587),
                 (-0.10645464062690735, -0.6067794561386108, 0.8989225029945374),
                 (-0.07305645942687988, -0.39798057079315186, 1.4405913352966309),
                 (-0.06296859681606293, -0.7813931703567505, 1.2008124589920044),
                 (-0.061245568096637726, -0.5765814185142517, 1.5139150619506836),
                 (-0.083949014544487, -0.7265322208404541, 0.9915563464164734),
                 (-0.07136400789022446, -0.49235105514526367, 1.4693821668624878),
                 (-0.04826954007148743, -0.8474932909011841, 1.3124254941940308),
                 (-0.05154004693031311, -0.665259838104248, 1.5735841989517212),
                 (-0.0428691990673542, -0.9047551155090332, 1.415850043296814),
                 (-0.04928245767951012, -0.7833718061447144, 1.6424058675765991),
                 (0.0, 0.007333490997552872, 0.8789474964141846),
                 (0.0, 0.19605983793735504, 0.9504420757293701),
                 (0.0, 0.29390281438827515, 0.968319296836853),
                 (0.0, -0.2789042294025421, 0.8345751762390137),
                 (0.0, -0.795945405960083, 1.1935088634490967),
                 (-0.10261961072683334, 0.44826504588127136, 0.9726549983024597),
                 (-0.10261961072683334, 0.4811844527721405, 1.3730624914169312),
                 (0.0, 0.5609965324401855, 0.9971268177032471),
                 (0.0, 0.3023248314857483, 1.4278934001922607),
                 (0.0, 0.4467734098434448, 0.956441342830658),
                 (0.0, -0.01905035972595215, 1.372290015220642),
                 (0.0, -0.2289767861366272, 1.3899446725845337),
                 (0.0, 0.16390998661518097, 1.4012693166732788),
                 (0.0, -0.3913581967353821, 1.4554659128189087),
                 (0.0, -0.4866219460964203, 1.4846230745315552),
                 (0.0, -0.5693610310554504, 1.5285087823867798),
                 (0.0, -0.656816840171814, 1.5875061750411987),
                 (0.0, -0.7758116126060486, 1.6568264961242676),
                 (0.0, -0.8615766167640686, 1.3042542934417725),
                 (0.0, -0.9145574569702148, 1.4055863618850708),
                 (0.0, 0.4873493015766144, 1.3881323337554932),
                 (0.0, 0.628204882144928, 1.2636092901229858),
                 (0.0, -0.7393635511398315, 0.9815330505371094),
                 (0.0, -0.6218825578689575, 0.8558010458946228),
                 (-0.15528561174869537, -0.01158145535737276, 1.1419997215270996),
                 (-0.15083947777748108, -0.2606493830680847, 1.1284503936767578),
                 (-0.12380607426166534, 0.1766367107629776, 1.1798393726348877),
                 (-0.14122620224952698, -0.4828026294708252, 1.1821348667144775),
                 (-0.12313904613256454, -0.6126652359962463, 1.2518142461776733),
                 (-0.09701522439718246, -0.6825529336929321, 1.3378523588180542),
                 (-0.08278301358222961, -0.7632101774215698, 1.4236090183258057),
                 (-0.0737694576382637, -0.849981427192688, 1.5231995582580566),
                 (-0.14957933127880096, 0.2941688597202301, 1.1953760385513306),
                 (-0.11616531014442444, 0.601787805557251, 1.1270337104797363),
                 (-0.1516394317150116, 0.4613412618637085, 1.1637494564056396),
                 (0.0, 0.6293575763702393, 1.1226425170898438),
                 (-0.05016414076089859, -0.8695657849311829, 1.6829828023910522),
                 (-0.04504809156060219, -0.9584510326385498, 1.470571756362915),
                 (0.0, -0.9665128588676453, 1.4580477476119995),
                 (0.0, -0.8633810877799988, 1.6979697942733765),
                 (-0.06730835139751434, -0.919801652431488, 1.5654999017715454),
                 (-0.1068386435508728, -0.13295094668865204, 0.8898504972457886),
                 (-0.06380835920572281, -0.12627895176410675, 1.3513153791427612),
                 (0.0, -0.12973833084106445, 0.8510310649871826),
                 (0.0, -0.12410590052604675, 1.367235779762268),
                 (-0.16372697055339813, -0.13784091174602509, 1.1306442022323608),
                 (-0.10645690560340881, -0.42235732078552246, 0.8772591352462769),
                 (-0.06859634816646576, -0.3140207529067993, 1.4042599201202393),
                 (0.0, -0.4299203157424927, 0.8332942128181458),
                 (0.0, -0.3083191514015198, 1.4194793701171875),
                 (-0.14432954788208008, -0.37522092461586, 1.1534183025360107),
                 (-0.062064118683338165, 0.06851188838481903, 1.3659923076629639),
                 (-0.1043323427438736, 0.09723494946956635, 0.9424939155578613),
                 (0.0, 0.06707462668418884, 1.382179617881775),
                 (0.0, 0.10169666260480881, 0.9146947860717773),
                 (-0.14550060033798218, 0.07926667481660843, 1.161238670349121),
                 (-0.018689081072807312, 0.6157206892967224, 1.2934244871139526),
                 (-0.018689081072807312, 0.6304380893707275, 1.3269498348236084),
                 (-0.018689081072807312, 0.7108876705169678, 1.2502436637878418),
                 (-0.018689081072807312, 0.727414608001709, 1.2837696075439453),
                 (0.01868908852338791, 0.6157206892967224, 1.2934244871139526),
                 (0.01868908852338791, 0.6304380893707275, 1.3269498348236084),
                 (0.01868908852338791, 0.7108876705169678, 1.2502436637878418),
                 (0.01868908852338791, 0.727414608001709, 1.2837696075439453),
                 (-0.018689081072807312, 0.7147561311721802, 1.2464447021484375),
                 (-0.018689081072807312, 0.7413226366043091, 1.2713781595230103),
                 (-0.018689081072807312, 0.7958130836486816, 1.150930643081665),
                 (-0.018689081072807312, 0.8263315558433533, 1.1725118160247803),
                 (0.01868908852338791, 0.7147561311721802, 1.2464447021484375),
                 (0.01868908852338791, 0.7413226366043091, 1.2713781595230103),
                 (0.01868908852338791, 0.7958130836486816, 1.150930643081665),
                 (0.01868908852338791, 0.8263315558433533, 1.1725118160247803),
                 (-0.018689081072807312, 0.7988055944442749, 1.1453359127044678),
                 (-0.018689081072807312, 0.8313762545585632, 1.1616641283035278),
                 (-0.018689081072807312, 0.8492802977561951, 1.0306822061538696),
                 (-0.018689081072807312, 0.877549409866333, 1.040992259979248),
                 (0.01868908852338791, 0.7988055944442749, 1.1453359127044678),
                 (0.01868908852338791, 0.8313762545585632, 1.1616641283035278),
                 (0.01868908852338791, 0.8492802977561951, 1.0306822061538696),
                 (0.01868908852338791, 0.877549409866333, 1.040992259979248),
                 (-0.018689081072807312, 0.8508687615394592, 1.024897813796997),
                 (-0.018689081072807312, 0.8809130787849426, 1.0327935218811035),
                 (-0.018689081072807312, 0.8816629648208618, 0.8936448097229004),
                 (-0.018689081072807312, 0.9088044166564941, 0.8990650177001953),
                 (0.01868908852338791, 0.8508687615394592, 1.024897813796997),
                 (0.01868908852338791, 0.8809130787849426, 1.0327935218811035),
                 (0.01868908852338791, 0.8816629648208618, 0.8936448097229004),
                 (0.01868908852338791, 0.9088044166564941, 0.8990650177001953),
                 (-0.018689081072807312, 0.8822351694107056, 0.8901726007461548),
                 (-0.018689081072807312, 0.9100773930549622, 0.8960731625556946),
                 (-0.010968925431370735, 0.923578679561615, 0.747377336025238),
                 (-0.010968925431370735, 0.9408048391342163, 0.7512703537940979),
                 (0.01868908852338791, 0.8822351694107056, 0.8901726007461548),
                 (0.01868908852338791, 0.9100773930549622, 0.8960731625556946),
                 (0.010968932881951332, 0.923578679561615, 0.747377336025238),
                 (0.010968932881951332, 0.9408048391342163, 0.7512703537940979),
                 (0.05553825572133064, -0.977068305015564, 1.604358196258545),
                 (0.04726149141788483, -1.0093530416488647, 1.4839357137680054),
                 (0.0, -1.0118279457092285, 1.467842698097229),
                 (0.04896780103445053, -0.9514447450637817, 1.7160509824752808),
                 (0.0, -0.9466574192047119, 1.7316133975982666),
                 (-0.05553825572133064, -0.977068305015564, 1.604358196258545),
                 (-0.04726149141788483, -1.0093530416488647, 1.4839357137680054),
                 (-0.04896780103445053, -0.9514447450637817, 1.7160509824752808),
                 (0.04726149141788483, -1.0093530416488647, 1.4839357137680054),
                 (0.04896780103445053, -0.9514447450637817, 1.7160509824752808),
                 (0.0723094567656517, -1.1715084314346313, 1.6311299800872803),
                 (0.04464256390929222, -1.0882751941680908, 1.732616662979126),
                 (0.03452005237340927, -1.376594066619873, 1.3620200157165527),
                 (0.03452005982398987, -1.3100781440734863, 1.315670371055603),
                 (0.043909113854169846, -1.2439379692077637, 1.3687644004821777),
                 (0.03797159343957901, -1.3558801412582397, 1.435206651687622),
                 (0.045613184571266174, -1.1558947563171387, 1.4061511754989624),
                 (0.045932214707136154, -1.2780674695968628, 1.5237956047058105),
                 (0.05553825572133064, -0.977068305015564, 1.604358196258545),
                 (0.05870433896780014, -1.1238036155700684, 1.690730094909668),
                 (0.053620897233486176, -1.228135347366333, 1.5744729042053223),
                 (0.0640084519982338, -1.0715957880020142, 1.4354896545410156),
                 (0.03452005237340927, -1.3455290794372559, 1.3366522789001465),
                 (0.059951554983854294, -1.296817660331726, 1.401007890701294),
                 (0.06211535260081291, -1.2119169235229492, 1.4609756469726562),
                 (0.055490486323833466, -1.0235592126846313, 1.731629729270935),
                 (0.0887036919593811, -1.0949113368988037, 1.5555890798568726),
                 (0.07853740453720093, -1.0473732948303223, 1.644038200378418),
                 (0.07458478957414627, -1.1458055973052979, 1.502203106880188),
                 (-0.04726149141788483, -1.0093530416488647, 1.4839357137680054),
                 (-0.04896780103445053, -0.9514447450637817, 1.7160509824752808),
                 (-0.0723094567656517, -1.1715084314346313, 1.6311299800872803),
                 (-0.04464256390929222, -1.0882751941680908, 1.732616662979126),
                 (-0.03452005237340927, -1.376594066619873, 1.3620200157165527),
                 (-0.03452005982398987, -1.3100781440734863, 1.315670371055603),
                 (-0.043909113854169846, -1.2439379692077637, 1.3687644004821777),
                 (-0.03797159343957901, -1.3558801412582397, 1.435206651687622),
                 (-0.045613184571266174, -1.1558947563171387, 1.4061511754989624),
                 (-0.045932214707136154, -1.2780674695968628, 1.5237956047058105),
                 (0.0, -1.0118279457092285, 1.467842698097229),
                 (0.0, -0.9466574192047119, 1.7316133975982666),
                 (0.0, -1.2071101665496826, 1.6483784914016724),
                 (0.0, -1.1059738397598267, 1.7520214319229126),
                 (0.0, -1.3796592950820923, 1.4450950622558594),
                 (0.0, -1.2941029071807861, 1.5445588827133179),
                 (0.0, -1.1479183435440063, 1.3919565677642822),
                 (0.0, -1.237570881843567, 1.354953408241272),
                 (0.0, -1.3084577322006226, 1.299468994140625),
                 (0.0, -1.3912031650543213, 1.3548309803009033),
                 (-0.05553825572133064, -0.977068305015564, 1.604358196258545),
                 (-0.05870433896780014, -1.1238036155700684, 1.690730094909668),
                 (0.0, -1.1542426347732544, 1.710565447807312),
                 (-0.053620897233486176, -1.228135347366333, 1.5744729042053223),
                 (-0.0640084519982338, -1.0715957880020142, 1.4354896545410156),
                 (0.0, -1.2511160373687744, 1.5946855545043945),
                 (0.0, -1.0688449144363403, 1.4203459024429321),
                 (0.0, -1.0160903930664062, 1.7507191896438599),
                 (-0.03452005237340927, -1.3455290794372559, 1.3366522789001465),
                 (-0.059951554983854294, -1.296817660331726, 1.401007890701294),
                 (-0.06211535260081291, -1.2119169235229492, 1.4609756469726562),
                 (-0.055490486323833466, -1.0235592126846313, 1.731629729270935),
                 (0.0, -1.354529619216919, 1.3230774402618408),
                 (-0.0887036919593811, -1.0949113368988037, 1.5555890798568726),
                 (-0.07853740453720093, -1.0473732948303223, 1.644038200378418),
                 (-0.07458478957414627, -1.1458055973052979, 1.502203106880188),
                 (0.1100105345249176, 0.4559359550476074, -2.3283064365386963e-10),
                 (0.1100105345249176, 0.5312889814376831, 0.08274468779563904),
                 (0.13288743793964386, 0.5985009670257568, -2.3283064365386963e-10),
                 (0.13288743793964386, 0.6078665256500244, 0.05739235132932663),
                 (0.21010197699069977, 0.4559359550476074, -2.3283064365386963e-10),
                 (0.21010197699069977, 0.5312889814376831, 0.08274468779563904),
                 (0.18722505867481232, 0.5985009670257568, -2.3283064365386963e-10),
                 (0.18722505867481232, 0.6078665256500244, 0.05739235132932663),
                 (0.1348700374364853, 0.5541406273841858, 0.08800830692052841),
                 (0.1348700374364853, 0.5772198438644409, 0.19322256743907928),
                 (0.1348700374364853, 0.5944070219993591, 0.07710272818803787),
                 (0.1348700374364853, 0.639665424823761, 0.18724916875362396),
                 (0.1866062432527542, 0.5541406273841858, 0.08800830692052841),
                 (0.1866062432527542, 0.5772198438644409, 0.19322256743907928),
                 (0.1866062432527542, 0.5944070219993591, 0.07710272818803787),
                 (0.1866062432527542, 0.639665424823761, 0.18724916875362396),
                 (0.1348700374364853, 0.5776204466819763, 0.19637437164783478),
                 (0.130279079079628, 0.5234155058860779, 0.5136164426803589),
                 (0.1348700374364853, 0.6389210224151611, 0.1925497204065323),
                 (0.130279079079628, 0.6347435712814331, 0.5397790670394897),
                 (0.1866062432527542, 0.5776204466819763, 0.19637437164783478),
                 (0.1911972016096115, 0.5234155058860779, 0.5136164426803589),
                 (0.1866062432527542, 0.6389210224151611, 0.1925497204065323),
                 (0.1911972016096115, 0.6347435712814331, 0.5397790670394897),
                 (0.130279079079628, 0.5227304697036743, 0.516425371170044),
                 (0.11859798431396484, 0.379935622215271, 0.8017897605895996),
                 (0.130279079079628, 0.6343364715576172, 0.5444357991218567),
                 (0.11859798431396484, 0.5535632967948914, 0.8247745037078857),
                 (0.1911972016096115, 0.5227304697036743, 0.516425371170044),
                 (0.1866062432527542, 0.379935622215271, 0.8017897605895996),
                 (0.1911972016096115, 0.6343364715576172, 0.5444357991218567),
                 (0.1866062432527542, 0.5535632967948914, 0.8247745037078857),
                 (0.11859798431396484, 0.37733596563339233, 0.8069084882736206),
                 (0.1348700374364853, 0.2539513111114502, 1.1863206624984741),
                 (0.11859798431396484, 0.5540450811386108, 0.8292233943939209),
                 (0.1348700374364853, 0.6004343628883362, 1.1265232563018799),
                 (0.1866062432527542, 0.37733596563339233, 0.8069084882736206),
                 (0.1730707436800003, 0.2539513111114502, 1.1863206624984741),
                 (0.1866062432527542, 0.5540450811386108, 0.8292233943939209),
                 (0.1730707436800003, 0.6004343628883362, 1.1265232563018799),
                 (0.1348700374364853, 0.2881336212158203, 0.933424711227417),
                 (0.1348700374364853, 0.5812252163887024, 0.952681303024292),
                 (0.1866062432527542, 0.5812252163887024, 0.952681303024292),
                 (0.1866062432527542, 0.2881336212158203, 0.933424711227417),
                 (0.11859798431396484, 0.4588361084461212, 0.8232440948486328),
                 (0.1348700374364853, 0.4670209288597107, 1.230287790298462),
                 (0.1866062432527542, 0.4588361084461212, 0.8232440948486328),
                 (0.1730707436800003, 0.4670209288597107, 1.230287790298462),
                 (0.1866062432527542, 0.4553581476211548, 0.9554237127304077),
                 (0.1348700374364853, 0.4553581476211548, 0.9554237127304077),
                 (0.1348700374364853, 0.4941720962524414, 0.6024978756904602),
                 (0.13340240716934204, 0.4472259283065796, 0.6997729539871216),
                 (0.13340240716934204, 0.5802040696144104, 0.721608579158783),
                 (0.1348700374364853, 0.6034561991691589, 0.6343269348144531),
                 (0.19287177920341492, 0.5802040696144104, 0.721608579158783),
                 (0.19503256678581238, 0.6034561991691589, 0.6343269348144531),
                 (0.19287177920341492, 0.447225958108902, 0.6997729539871216),
                 (0.19503256678581238, 0.4941720962524414, 0.6024978160858154),
                 (0.13647474348545074, 0.5673920512199402, 0.276824414730072),
                 (0.13738931715488434, 0.5585888624191284, 0.3528018593788147),
                 (0.1348700374364853, 0.5440047979354858, 0.4364738166332245),
                 (0.1348700374364853, 0.6315261721611023, 0.45001012086868286),
                 (0.13738931715488434, 0.629376232624054, 0.359214723110199),
                 (0.13647474348545074, 0.6345661878585815, 0.2798762321472168),
                 (0.1866062432527542, 0.6315261721611023, 0.45001012086868286),
                 (0.18408696353435516, 0.629376232624054, 0.359214723110199),
                 (0.18500153720378876, 0.6345661878585815, 0.2798762321472168),
                 (0.1866062432527542, 0.5440048575401306, 0.4364738166332245),
                 (0.18408696353435516, 0.5585889220237732, 0.3528018593788147),
                 (0.18500153720378876, 0.5673920512199402, 0.276824414730072),
                 (0.1348700374364853, 0.45520472526550293, 1.0864198207855225),
                 (0.17983849346637726, 0.45520472526550293, 1.0864198207855225),
                 (0.17983849346637726, 0.24754828214645386, 1.0761158466339111),
                 (0.17983849346637726, 0.5995216965675354, 1.058549165725708),
                 (0.1348700374364853, 0.5995216965675354, 1.058549165725708),
                 (0.1348700374364853, 0.24754828214645386, 1.0761158466339111),
                 (0.10053974390029907, -0.6781116127967834, -2.3283064365386963e-10),
                 (0.10053974390029907, -0.618313193321228, 0.06581331789493561),
                 (0.12341664731502533, -0.5608546137809753, -2.3283064365386963e-10),
                 (0.12341664731502533, -0.5459335446357727, 0.0367329902946949),
                 (0.20063117146492004, -0.6781116127967834, -2.3283064365386963e-10),
                 (0.20063117146492004, -0.618313193321228, 0.06581331789493561),
                 (0.1777542680501938, -0.5608546137809753, -2.3283064365386963e-10),
                 (0.1777542680501938, -0.5459335446357727, 0.0367329902946949),
                 (0.12539924681186676, -0.5932266712188721, 0.07666712999343872),
                 (0.12539924681186676, -0.5516973733901978, 0.15753717720508575),
                 (0.12539924681186676, -0.5561801791191101, 0.054951757192611694),
                 (0.12539924681186676, -0.4974524676799774, 0.15250873565673828),
                 (0.17713545262813568, -0.5932266712188721, 0.07666712999343872),
                 (0.17713545262813568, -0.5516973733901978, 0.15753717720508575),
                 (0.17713545262813568, -0.5561801791191101, 0.054951757192611694),
                 (0.17713545262813568, -0.4974524676799774, 0.15250873565673828),
                 (0.12539924681186676, -0.5511687994003296, 0.16168230772018433),
                 (0.12539924681186676, -0.5816657543182373, 0.4444352686405182),
                 (0.12539924681186676, -0.497362345457077, 0.1576223373413086),
                 (0.12539924681186676, -0.5078334808349609, 0.4508300721645355),
                 (0.17713545262813568, -0.5511687994003296, 0.16168230772018433),
                 (0.17713545262813568, -0.5816657543182373, 0.4444352686405182),
                 (0.17713545262813568, -0.497362345457077, 0.1576223373413086),
                 (0.17713545262813568, -0.5078334808349609, 0.4508300721645355),
                 (0.12539924681186676, -0.5826390385627747, 0.4473629593849182),
                 (0.12539924681186676, -0.625697910785675, 0.8222114443778992),
                 (0.12539924681186676, -0.5079333186149597, 0.4544273912906647),
                 (0.12539924681186676, -0.5122668147087097, 0.8371652960777283),
                 (0.17713545262813568, -0.5826390385627747, 0.4473629593849182),
                 (0.17713545262813568, -0.625697910785675, 0.8222114443778992),
                 (0.17713545262813568, -0.5079333186149597, 0.4544273912906647),
                 (0.17713545262813568, -0.5122668147087097, 0.8371652960777283),
                 (0.12766559422016144, -0.5567790865898132, 0.22644586861133575),
                 (0.1279209554195404, -0.5654144287109375, 0.2941855192184448),
                 (0.12845654785633087, -0.573437511920929, 0.36641058325767517),
                 (0.12845654785633087, -0.49804189801216125, 0.3717978894710541),
                 (0.1279209554195404, -0.5010890364646912, 0.2955874800682068),
                 (0.12766559422016144, -0.4983927011489868, 0.2256426215171814),
                 (0.17407815158367157, -0.49804189801216125, 0.3717978894710541),
                 (0.17461374402046204, -0.5010890364646912, 0.2955874800682068),
                 (0.174869105219841, -0.4983927011489868, 0.2256426215171814),
                 (0.17407815158367157, -0.573437511920929, 0.36641058325767517),
                 (0.17461374402046204, -0.5654144287109375, 0.2941855192184448),
                 (0.174869105219841, -0.5567790865898132, 0.22644586861133575),
                 (0.12539924681186676, -0.5930050611495972, 0.5449094772338867),
                 (0.12029916048049927, -0.6165925860404968, 0.6409655213356018),
                 (0.1176629364490509, -0.6322965621948242, 0.751582682132721),
                 (0.1176629364490509, -0.49507632851600647, 0.7489335536956787),
                 (0.12029916048049927, -0.4933759570121765, 0.6445906162261963),
                 (0.12539924681186676, -0.5014641880989075, 0.5480083227157593),
                 (0.19331079721450806, -0.49507632851600647, 0.7489335536956787),
                 (0.18420551717281342, -0.4933759570121765, 0.6445906162261963),
                 (0.17713545262813568, -0.5014641880989075, 0.5480083227157593),
                 (0.19331079721450806, -0.6322965621948242, 0.751582682132721),
                 (0.18420551717281342, -0.6165925860404968, 0.6409655809402466),
                 (0.17713545262813568, -0.5930050015449524, 0.5449095368385315),
                 (0.12539924681186676, -0.5469030737876892, 0.45123541355133057),
                 (0.12539924681186676, -0.5689823627471924, 0.8495316505432129),
                 (0.17713545262813568, -0.5469030737876892, 0.45123541355133057),
                 (0.17713545262813568, -0.5689823627471924, 0.8495316505432129),
                 (0.17713545262813568, -0.548969566822052, 0.547202467918396),
                 (0.18420551717281342, -0.5549842715263367, 0.6427780985832214),
                 (0.19331079721450806, -0.5650549530982971, 0.7502580881118774),
                 (0.12539924681186676, -0.548969566822052, 0.547202467918396),
                 (0.12029916048049927, -0.5549842715263367, 0.6427780389785767),
                 (0.1176629364490509, -0.5650549530982971, 0.7502580881118774),
                 (0.12539924681186676, -0.5232769250869751, 0.15860863029956818),
                 (0.12539924681186676, -0.5466715693473816, 0.44827333092689514),
                 (0.17713545262813568, -0.5232769250869751, 0.15860863029956818),
                 (0.17713545262813568, -0.5466715693473816, 0.44827333092689514),
                 (0.174869105219841, -0.5278410315513611, 0.22604423761367798),
                 (0.17461374402046204, -0.5332517623901367, 0.2948864996433258),
                 (0.17407815158367157, -0.5368653535842896, 0.36741575598716736),
                 (0.12766559422016144, -0.5278410315513611, 0.22604423761367798),
                 (0.1279209554195404, -0.5332517623901367, 0.2948864996433258),
                 (0.12845654785633087, -0.5368653535842896, 0.36741575598716736),
                 (0.12539924681186676, -0.5756410360336304, 0.11362093687057495),
                 (0.12539924681186676, -0.5299875140190125, 0.09306151419878006),
                 (0.17713545262813568, -0.5299875140190125, 0.09306151419878006),
                 (0.17713545262813568, -0.5756410360336304, 0.11362093687057495),
                 (0.12539924681186676, -0.5743780732154846, 0.06418266892433167),
                 (0.12539924681186676, -0.5232754349708557, 0.15515851974487305),
                 (0.17713545262813568, -0.5743780732154846, 0.06418266892433167),
                 (0.17713545262813568, -0.5232754349708557, 0.15515851974487305),
                 (0.17713545262813568, -0.5520821809768677, 0.10342256724834442),
                 (0.12539924681186676, -0.5520821809768677, 0.10342256724834442),
                 (0.1348700374364853, 0.6063036918640137, 0.19464938342571259),
                 (0.130279079079628, 0.5797763466835022, 0.5272161364555359),
                 (0.1866062432527542, 0.6063036918640137, 0.19464938342571259),
                 (0.1911972016096115, 0.5797763466835022, 0.5272161364555359),
                 (0.18500153720378876, 0.6009790897369385, 0.2783503234386444),
                 (0.18408696353435516, 0.5939825773239136, 0.35600829124450684),
                 (0.1866062432527542, 0.5877655148506165, 0.4432419538497925),
                 (0.13647474348545074, 0.6009790897369385, 0.2783503234386444),
                 (0.13738931715488434, 0.5939825773239136, 0.35600829124450684),
                 (0.1348700374364853, 0.5877654552459717, 0.4432419538497925),
                 (0.130279079079628, 0.5786371827125549, 0.5310526490211487),
                 (0.11859798431396484, 0.45985499024391174, 0.8196017742156982),
                 (0.1911972016096115, 0.5786371827125549, 0.5310526490211487),
                 (0.1866062432527542, 0.45985499024391174, 0.8196017742156982),
                 (0.19503256678581238, 0.5484728813171387, 0.6187536120414734),
                 (0.19287177920341492, 0.5116674304008484, 0.712397038936615),
                 (0.1348700374364853, 0.5484728813171387, 0.6187536716461182),
                 (0.13340240716934204, 0.5116674304008484, 0.712397038936615),
                 (0.1348700374364853, 0.5679319500923157, 0.13905079662799835),
                 (0.1348700374364853, 0.6169807314872742, 0.12931720912456512),
                 (0.1866062432527542, 0.6169807314872742, 0.12931720912456512),
                 (0.1866062432527542, 0.5679319500923157, 0.13905079662799835),
                 (0.1348700374364853, 0.5742738246917725, 0.08255551755428314),
                 (0.1348700374364853, 0.6061009168624878, 0.19070421159267426),
                 (0.1866062432527542, 0.5742738246917725, 0.08255551755428314),
                 (0.1866062432527542, 0.6061009168624878, 0.19070421159267426),
                 (0.1866062432527542, 0.5909367203712463, 0.13494381308555603),
                 (0.1348700374364853, 0.5909367203712463, 0.13494381308555603),
                 (-0.1100105345249176, 0.4559359550476074, -2.3283064365386963e-10),
                 (-0.1100105345249176, 0.5312889814376831, 0.08274468779563904),
                 (-0.13288743793964386, 0.5985009670257568, -2.3283064365386963e-10),
                 (-0.13288743793964386, 0.6078665256500244, 0.05739235132932663),
                 (-0.21010197699069977, 0.4559359550476074, -2.3283064365386963e-10),
                 (-0.21010197699069977, 0.5312889814376831, 0.08274468779563904),
                 (-0.18722505867481232, 0.5985009670257568, -2.3283064365386963e-10),
                 (-0.18722505867481232, 0.6078665256500244, 0.05739235132932663),
                 (-0.1348700374364853, 0.5541406273841858, 0.08800830692052841),
                 (-0.1348700374364853, 0.5772198438644409, 0.19322256743907928),
                 (-0.1348700374364853, 0.5944070219993591, 0.07710272818803787),
                 (-0.1348700374364853, 0.639665424823761, 0.18724916875362396),
                 (-0.1866062432527542, 0.5541406273841858, 0.08800830692052841),
                 (-0.1866062432527542, 0.5772198438644409, 0.19322256743907928),
                 (-0.1866062432527542, 0.5944070219993591, 0.07710272818803787),
                 (-0.1866062432527542, 0.639665424823761, 0.18724916875362396),
                 (-0.1348700374364853, 0.5776204466819763, 0.19637437164783478),
                 (-0.130279079079628, 0.5234155058860779, 0.5136164426803589),
                 (-0.1348700374364853, 0.6389210224151611, 0.1925497204065323),
                 (-0.130279079079628, 0.6347435712814331, 0.5397790670394897),
                 (-0.1866062432527542, 0.5776204466819763, 0.19637437164783478),
                 (-0.1911972016096115, 0.5234155058860779, 0.5136164426803589),
                 (-0.1866062432527542, 0.6389210224151611, 0.1925497204065323),
                 (-0.1911972016096115, 0.6347435712814331, 0.5397790670394897),
                 (-0.130279079079628, 0.5227304697036743, 0.516425371170044),
                 (-0.11859798431396484, 0.379935622215271, 0.8017897605895996),
                 (-0.130279079079628, 0.6343364715576172, 0.5444357991218567),
                 (-0.11859798431396484, 0.5535632967948914, 0.8247745037078857),
                 (-0.1911972016096115, 0.5227304697036743, 0.516425371170044),
                 (-0.1866062432527542, 0.379935622215271, 0.8017897605895996),
                 (-0.1911972016096115, 0.6343364715576172, 0.5444357991218567),
                 (-0.1866062432527542, 0.5535632967948914, 0.8247745037078857),
                 (-0.11859798431396484, 0.37733596563339233, 0.8069084882736206),
                 (-0.1348700374364853, 0.2539513111114502, 1.1863206624984741),
                 (-0.11859798431396484, 0.5540450811386108, 0.8292233943939209),
                 (-0.1348700374364853, 0.6004343628883362, 1.1265232563018799),
                 (-0.1866062432527542, 0.37733596563339233, 0.8069084882736206),
                 (-0.1730707436800003, 0.2539513111114502, 1.1863206624984741),
                 (-0.1866062432527542, 0.5540450811386108, 0.8292233943939209),
                 (-0.1730707436800003, 0.6004343628883362, 1.1265232563018799),
                 (-0.1348700374364853, 0.2881336212158203, 0.933424711227417),
                 (-0.1348700374364853, 0.5812252163887024, 0.952681303024292),
                 (-0.1866062432527542, 0.5812252163887024, 0.952681303024292),
                 (-0.1866062432527542, 0.2881336212158203, 0.933424711227417),
                 (-0.11859798431396484, 0.4588361084461212, 0.8232440948486328),
                 (-0.1348700374364853, 0.4670209288597107, 1.230287790298462),
                 (-0.1866062432527542, 0.4588361084461212, 0.8232440948486328),
                 (-0.1730707436800003, 0.4670209288597107, 1.230287790298462),
                 (-0.1866062432527542, 0.4553581476211548, 0.9554237127304077),
                 (-0.1348700374364853, 0.4553581476211548, 0.9554237127304077),
                 (-0.1348700374364853, 0.4941720962524414, 0.6024978756904602),
                 (-0.13340240716934204, 0.4472259283065796, 0.6997729539871216),
                 (-0.13340240716934204, 0.5802040696144104, 0.721608579158783),
                 (-0.1348700374364853, 0.6034561991691589, 0.6343269348144531),
                 (-0.19287177920341492, 0.5802040696144104, 0.721608579158783),
                 (-0.19503256678581238, 0.6034561991691589, 0.6343269348144531),
                 (-0.19287177920341492, 0.447225958108902, 0.6997729539871216),
                 (-0.19503256678581238, 0.4941720962524414, 0.6024978160858154),
                 (-0.13647474348545074, 0.5673920512199402, 0.276824414730072),
                 (-0.13738931715488434, 0.5585888624191284, 0.3528018593788147),
                 (-0.1348700374364853, 0.5440047979354858, 0.4364738166332245),
                 (-0.1348700374364853, 0.6315261721611023, 0.45001012086868286),
                 (-0.13738931715488434, 0.629376232624054, 0.359214723110199),
                 (-0.13647474348545074, 0.6345661878585815, 0.2798762321472168),
                 (-0.1866062432527542, 0.6315261721611023, 0.45001012086868286),
                 (-0.18408696353435516, 0.629376232624054, 0.359214723110199),
                 (-0.18500153720378876, 0.6345661878585815, 0.2798762321472168),
                 (-0.1866062432527542, 0.5440048575401306, 0.4364738166332245),
                 (-0.18408696353435516, 0.5585889220237732, 0.3528018593788147),
                 (-0.18500153720378876, 0.5673920512199402, 0.276824414730072),
                 (-0.1348700374364853, 0.45520472526550293, 1.0864198207855225),
                 (-0.17983849346637726, 0.45520472526550293, 1.0864198207855225),
                 (-0.17983849346637726, 0.24754828214645386, 1.0761158466339111),
                 (-0.17983849346637726, 0.5995216965675354, 1.058549165725708),
                 (-0.1348700374364853, 0.5995216965675354, 1.058549165725708),
                 (-0.1348700374364853, 0.24754828214645386, 1.0761158466339111),
                 (-0.10053974390029907, -0.6781116127967834, -2.3283064365386963e-10),
                 (-0.10053974390029907, -0.618313193321228, 0.06581331789493561),
                 (-0.12341664731502533, -0.5608546137809753, -2.3283064365386963e-10),
                 (-0.12341664731502533, -0.5459335446357727, 0.0367329902946949),
                 (-0.20063117146492004, -0.6781116127967834, -2.3283064365386963e-10),
                 (-0.20063117146492004, -0.618313193321228, 0.06581331789493561),
                 (-0.1777542680501938, -0.5608546137809753, -2.3283064365386963e-10),
                 (-0.1777542680501938, -0.5459335446357727, 0.0367329902946949),
                 (-0.12539924681186676, -0.5932266712188721, 0.07666712999343872),
                 (-0.12539924681186676, -0.5516973733901978, 0.15753717720508575),
                 (-0.12539924681186676, -0.5561801791191101, 0.054951757192611694),
                 (-0.12539924681186676, -0.4974524676799774, 0.15250873565673828),
                 (-0.17713545262813568, -0.5932266712188721, 0.07666712999343872),
                 (-0.17713545262813568, -0.5516973733901978, 0.15753717720508575),
                 (-0.17713545262813568, -0.5561801791191101, 0.054951757192611694),
                 (-0.17713545262813568, -0.4974524676799774, 0.15250873565673828),
                 (-0.12539924681186676, -0.5511687994003296, 0.16168230772018433),
                 (-0.12539924681186676, -0.5816657543182373, 0.4444352686405182),
                 (-0.12539924681186676, -0.497362345457077, 0.1576223373413086),
                 (-0.12539924681186676, -0.5078334808349609, 0.4508300721645355),
                 (-0.17713545262813568, -0.5511687994003296, 0.16168230772018433),
                 (-0.17713545262813568, -0.5816657543182373, 0.4444352686405182),
                 (-0.17713545262813568, -0.497362345457077, 0.1576223373413086),
                 (-0.17713545262813568, -0.5078334808349609, 0.4508300721645355),
                 (-0.12539924681186676, -0.5826390385627747, 0.4473629593849182),
                 (-0.12539924681186676, -0.625697910785675, 0.8222114443778992),
                 (-0.12539924681186676, -0.5079333186149597, 0.4544273912906647),
                 (-0.12539924681186676, -0.5122668147087097, 0.8371652960777283),
                 (-0.17713545262813568, -0.5826390385627747, 0.4473629593849182),
                 (-0.17713545262813568, -0.625697910785675, 0.8222114443778992),
                 (-0.17713545262813568, -0.5079333186149597, 0.4544273912906647),
                 (-0.17713545262813568, -0.5122668147087097, 0.8371652960777283),
                 (-0.12766559422016144, -0.5567790865898132, 0.22644586861133575),
                 (-0.1279209554195404, -0.5654144287109375, 0.2941855192184448),
                 (-0.12845654785633087, -0.573437511920929, 0.36641058325767517),
                 (-0.12845654785633087, -0.49804189801216125, 0.3717978894710541),
                 (-0.1279209554195404, -0.5010890364646912, 0.2955874800682068),
                 (-0.12766559422016144, -0.4983927011489868, 0.2256426215171814),
                 (-0.17407815158367157, -0.49804189801216125, 0.3717978894710541),
                 (-0.17461374402046204, -0.5010890364646912, 0.2955874800682068),
                 (-0.174869105219841, -0.4983927011489868, 0.2256426215171814),
                 (-0.17407815158367157, -0.573437511920929, 0.36641058325767517),
                 (-0.17461374402046204, -0.5654144287109375, 0.2941855192184448),
                 (-0.174869105219841, -0.5567790865898132, 0.22644586861133575),
                 (-0.12539924681186676, -0.5930050611495972, 0.5449094772338867),
                 (-0.12029916048049927, -0.6165925860404968, 0.6409655213356018),
                 (-0.1176629364490509, -0.6322965621948242, 0.751582682132721),
                 (-0.1176629364490509, -0.49507632851600647, 0.7489335536956787),
                 (-0.12029916048049927, -0.4933759570121765, 0.6445906162261963),
                 (-0.12539924681186676, -0.5014641880989075, 0.5480083227157593),
                 (-0.19331079721450806, -0.49507632851600647, 0.7489335536956787),
                 (-0.18420551717281342, -0.4933759570121765, 0.6445906162261963),
                 (-0.17713545262813568, -0.5014641880989075, 0.5480083227157593),
                 (-0.19331079721450806, -0.6322965621948242, 0.751582682132721),
                 (-0.18420551717281342, -0.6165925860404968, 0.6409655809402466),
                 (-0.17713545262813568, -0.5930050015449524, 0.5449095368385315),
                 (-0.12539924681186676, -0.5469030737876892, 0.45123541355133057),
                 (-0.12539924681186676, -0.5689823627471924, 0.8495316505432129),
                 (-0.17713545262813568, -0.5469030737876892, 0.45123541355133057),
                 (-0.17713545262813568, -0.5689823627471924, 0.8495316505432129),
                 (-0.17713545262813568, -0.548969566822052, 0.547202467918396),
                 (-0.18420551717281342, -0.5549842715263367, 0.6427780985832214),
                 (-0.19331079721450806, -0.5650549530982971, 0.7502580881118774),
                 (-0.12539924681186676, -0.548969566822052, 0.547202467918396),
                 (-0.12029916048049927, -0.5549842715263367, 0.6427780389785767),
                 (-0.1176629364490509, -0.5650549530982971, 0.7502580881118774),
                 (-0.12539924681186676, -0.5232769250869751, 0.15860863029956818),
                 (-0.12539924681186676, -0.5466715693473816, 0.44827333092689514),
                 (-0.17713545262813568, -0.5232769250869751, 0.15860863029956818),
                 (-0.17713545262813568, -0.5466715693473816, 0.44827333092689514),
                 (-0.174869105219841, -0.5278410315513611, 0.22604423761367798),
                 (-0.17461374402046204, -0.5332517623901367, 0.2948864996433258),
                 (-0.17407815158367157, -0.5368653535842896, 0.36741575598716736),
                 (-0.12766559422016144, -0.5278410315513611, 0.22604423761367798),
                 (-0.1279209554195404, -0.5332517623901367, 0.2948864996433258),
                 (-0.12845654785633087, -0.5368653535842896, 0.36741575598716736),
                 (-0.12539924681186676, -0.5756410360336304, 0.11362093687057495),
                 (-0.12539924681186676, -0.5299875140190125, 0.09306151419878006),
                 (-0.17713545262813568, -0.5299875140190125, 0.09306151419878006),
                 (-0.17713545262813568, -0.5756410360336304, 0.11362093687057495),
                 (-0.12539924681186676, -0.5743780732154846, 0.06418266892433167),
                 (-0.12539924681186676, -0.5232754349708557, 0.15515851974487305),
                 (-0.17713545262813568, -0.5743780732154846, 0.06418266892433167),
                 (-0.17713545262813568, -0.5232754349708557, 0.15515851974487305),
                 (-0.17713545262813568, -0.5520821809768677, 0.10342256724834442),
                 (-0.12539924681186676, -0.5520821809768677, 0.10342256724834442),
                 (-0.1348700374364853, 0.6063036918640137, 0.19464938342571259),
                 (-0.130279079079628, 0.5797763466835022, 0.5272161364555359),
                 (-0.1866062432527542, 0.6063036918640137, 0.19464938342571259),
                 (-0.1911972016096115, 0.5797763466835022, 0.5272161364555359),
                 (-0.18500153720378876, 0.6009790897369385, 0.2783503234386444),
                 (-0.18408696353435516, 0.5939825773239136, 0.35600829124450684),
                 (-0.1866062432527542, 0.5877655148506165, 0.4432419538497925),
                 (-0.13647474348545074, 0.6009790897369385, 0.2783503234386444),
                 (-0.13738931715488434, 0.5939825773239136, 0.35600829124450684),
                 (-0.1348700374364853, 0.5877654552459717, 0.4432419538497925),
                 (-0.130279079079628, 0.5786371827125549, 0.5310526490211487),
                 (-0.11859798431396484, 0.45985499024391174, 0.8196017742156982),
                 (-0.1911972016096115, 0.5786371827125549, 0.5310526490211487),
                 (-0.1866062432527542, 0.45985499024391174, 0.8196017742156982),
                 (-0.19503256678581238, 0.5484728813171387, 0.6187536120414734),
                 (-0.19287177920341492, 0.5116674304008484, 0.712397038936615),
                 (-0.1348700374364853, 0.5484728813171387, 0.6187536716461182),
                 (-0.13340240716934204, 0.5116674304008484, 0.712397038936615),
                 (-0.1348700374364853, 0.5679319500923157, 0.13905079662799835),
                 (-0.1348700374364853, 0.6169807314872742, 0.12931720912456512),
                 (-0.1866062432527542, 0.6169807314872742, 0.12931720912456512),
                 (-0.1866062432527542, 0.5679319500923157, 0.13905079662799835),
                 (-0.1348700374364853, 0.5742738246917725, 0.08255551755428314),
                 (-0.1348700374364853, 0.6061009168624878, 0.19070421159267426),
                 (-0.1866062432527542, 0.5742738246917725, 0.08255551755428314),
                 (-0.1866062432527542, 0.6061009168624878, 0.19070421159267426),
                 (-0.1866062432527542, 0.5909367203712463, 0.13494381308555603),
                 (-0.1348700374364853, 0.5909367203712463, 0.13494381308555603),
                 (0.12539924681186676, -0.6256289482116699, 0.8232390880584717),
                 (0.12539924681186676, -0.7280776500701904, 1.0420540571212769),
                 (0.12539924681186676, -0.5139011144638062, 0.8428164124488831),
                 (0.12539924681186676, -0.5806429386138916, 1.1018097400665283),
                 (0.17713545262813568, -0.6256289482116699, 0.8232390880584717),
                 (0.16895484924316406, -0.7280776500701904, 1.0420540571212769),
                 (0.17713545262813568, -0.5139011144638062, 0.8428164124488831),
                 (0.16895484924316406, -0.5806429386138916, 1.1018097400665283),
                 (0.12539924681186676, -0.5664800405502319, 0.8340181112289429),
                 (0.12539924681186676, -0.6722545623779297, 1.1176953315734863),
                 (0.17713545262813568, -0.5664800405502319, 0.8340181112289429),
                 (0.16895484924316406, -0.6722545623779297, 1.1176953315734863),
                 (0.12539924681186676, -0.696345329284668, 0.9384816884994507),
                 (0.12539924681186676, -0.5229809284210205, 0.9771365523338318),
                 (0.19014906883239746, -0.5229809284210205, 0.9771365523338318),
                 (0.19014906883239746, -0.696345329284668, 0.9384816884994507),
                 (0.19014906883239746, -0.6098778247833252, 0.9637721180915833),
                 (0.12539924681186676, -0.6098778247833252, 0.9637721180915833),
                 (-0.12539924681186676, -0.6256289482116699, 0.8232390880584717),
                 (-0.12539924681186676, -0.7280776500701904, 1.0420540571212769),
                 (-0.12539924681186676, -0.5139011144638062, 0.8428164124488831),
                 (-0.12539924681186676, -0.5806429386138916, 1.1018097400665283),
                 (-0.17713545262813568, -0.6256289482116699, 0.8232390880584717),
                 (-0.16895484924316406, -0.7280776500701904, 1.0420540571212769),
                 (-0.17713545262813568, -0.5139011144638062, 0.8428164124488831),
                 (-0.16895484924316406, -0.5806429386138916, 1.1018097400665283),
                 (-0.12539924681186676, -0.5664800405502319, 0.8340181112289429),
                 (-0.12539924681186676, -0.6722545623779297, 1.1176953315734863),
                 (-0.17713545262813568, -0.5664800405502319, 0.8340181112289429),
                 (-0.16895484924316406, -0.6722545623779297, 1.1176953315734863),
                 (-0.12539924681186676, -0.696345329284668, 0.9384816884994507),
                 (-0.12539924681186676, -0.5229809284210205, 0.9771365523338318),
                 (-0.19014906883239746, -0.5229809284210205, 0.9771365523338318),
                 (-0.19014906883239746, -0.696345329284668, 0.9384816884994507),
                 (-0.19014906883239746, -0.6098778247833252, 0.9637721180915833),
                 (-0.12539924681186676, -0.6098778247833252, 0.9637721180915833))

        faces = ((0, 1, 3, 2),
                 (2, 3, 7, 6),
                 (6, 7, 5, 4),
                 (4, 5, 1, 0),
                 (2, 6, 4, 0),
                 (7, 3, 1, 5),
                 (8, 10, 11, 9),
                 (10, 14, 15, 11),
                 (14, 12, 13, 15),
                 (12, 8, 9, 13),
                 (10, 8, 12, 14),
                 (15, 13, 9, 11),
                 (54, 53, 17, 39),
                 (124, 52, 16, 84),
                 (60, 58, 19, 38),
                 (135, 59, 18, 81),
                 (46, 23, 21, 40),
                 (83, 22, 20, 82),
                 (47, 25, 37, 48),
                 (116, 102, 25, 47),
                 (90, 36, 22, 83),
                 (57, 56, 27, 41),
                 (129, 55, 26, 104),
                 (42, 31, 29, 43),
                 (103, 30, 28, 85),
                 (43, 29, 33, 44),
                 (85, 28, 32, 99),
                 (44, 33, 35, 45),
                 (99, 32, 34, 100),
                 (51, 49, 180, 177),
                 (119, 50, 178, 179),
                 (88, 24, 36, 90),
                 (41, 27, 31, 42),
                 (104, 26, 30, 103),
                 (25, 102, 101, 37),
                 (37, 101, 89, 23),
                 (48, 37, 23, 46),
                 (27, 94, 95, 31),
                 (49, 120, 181, 180),
                 (33, 97, 98, 35),
                 (29, 96, 97, 33),
                 (31, 95, 96, 29),
                 (56, 130, 94, 27),
                 (23, 89, 93, 21),
                 (58, 134, 91, 19),
                 (53, 125, 92, 17),
                 (36, 48, 46, 22),
                 (26, 41, 42, 30),
                 (50, 51, 177, 178),
                 (32, 44, 45, 34),
                 (28, 43, 44, 32),
                 (30, 42, 43, 28),
                 (55, 57, 41, 26),
                 (88, 116, 47, 24),
                 (24, 47, 48, 36),
                 (22, 46, 40, 20),
                 (59, 60, 38, 18),
                 (52, 54, 39, 16),
                 (34, 45, 51, 50),
                 (35, 98, 120, 49),
                 (100, 34, 50, 119),
                 (45, 35, 49, 51),
                 (18, 38, 54, 52),
                 (19, 91, 125, 53),
                 (81, 18, 52, 124),
                 (38, 19, 53, 54),
                 (16, 39, 57, 55),
                 (17, 92, 130, 56),
                 (84, 16, 55, 129),
                 (39, 17, 56, 57),
                 (20, 40, 60, 59),
                 (21, 93, 134, 58),
                 (82, 20, 59, 135),
                 (40, 21, 58, 60),
                 (126, 106, 62, 123),
                 (124, 84, 61, 122),
                 (136, 105, 64, 132),
                 (135, 81, 63, 133),
                 (113, 107, 66, 68),
                 (83, 82, 65, 67),
                 (114, 115, 87, 70),
                 (116, 114, 70, 102),
                 (90, 83, 67, 86),
                 (131, 108, 72, 128),
                 (129, 104, 71, 127),
                 (109, 110, 74, 76),
                 (103, 85, 73, 75),
                 (110, 111, 78, 74),
                 (85, 99, 77, 73),
                 (111, 112, 80, 78),
                 (99, 100, 79, 77),
                 (121, 182, 184, 117),
                 (119, 179, 183, 118),
                 (88, 90, 86, 69),
                 (108, 109, 76, 72),
                 (104, 103, 75, 71),
                 (70, 87, 101, 102),
                 (87, 68, 89, 101),
                 (115, 113, 68, 87),
                 (72, 76, 95, 94),
                 (117, 184, 181, 120),
                 (78, 80, 98, 97),
                 (74, 78, 97, 96),
                 (76, 74, 96, 95),
                 (128, 72, 94, 130),
                 (68, 66, 93, 89),
                 (132, 64, 91, 134),
                 (123, 62, 92, 125),
                 (86, 67, 113, 115),
                 (71, 75, 109, 108),
                 (118, 183, 182, 121),
                 (77, 79, 112, 111),
                 (73, 77, 111, 110),
                 (75, 73, 110, 109),
                 (127, 71, 108, 131),
                 (88, 69, 114, 116),
                 (69, 86, 115, 114),
                 (67, 65, 107, 113),
                 (133, 63, 105, 136),
                 (122, 61, 106, 126),
                 (79, 118, 121, 112),
                 (80, 117, 120, 98),
                 (100, 119, 118, 79),
                 (112, 121, 117, 80),
                 (63, 122, 126, 105),
                 (64, 123, 125, 91),
                 (81, 124, 122, 63),
                 (105, 126, 123, 64),
                 (61, 127, 131, 106),
                 (62, 128, 130, 92),
                 (84, 129, 127, 61),
                 (106, 131, 128, 62),
                 (65, 133, 136, 107),
                 (66, 132, 134, 93),
                 (82, 135, 133, 65),
                 (107, 136, 132, 66),
                 (137, 138, 140, 139),
                 (139, 140, 144, 143),
                 (143, 144, 142, 141),
                 (141, 142, 138, 137),
                 (139, 143, 141, 137),
                 (144, 140, 138, 142),
                 (145, 146, 148, 147),
                 (147, 148, 152, 151),
                 (151, 152, 150, 149),
                 (149, 150, 146, 145),
                 (147, 151, 149, 145),
                 (152, 148, 146, 150),
                 (153, 154, 156, 155),
                 (155, 156, 160, 159),
                 (159, 160, 158, 157),
                 (157, 158, 154, 153),
                 (155, 159, 157, 153),
                 (160, 156, 154, 158),
                 (161, 162, 164, 163),
                 (163, 164, 168, 167),
                 (167, 168, 166, 165),
                 (165, 166, 162, 161),
                 (163, 167, 165, 161),
                 (168, 164, 162, 166),
                 (169, 170, 172, 171),
                 (171, 172, 176, 175),
                 (175, 176, 174, 173),
                 (173, 174, 170, 169),
                 (171, 175, 173, 169),
                 (176, 172, 170, 174),
                 (204, 202, 188, 196),
                 (232, 216, 185, 198),
                 (205, 203, 187, 197),
                 (238, 199, 189, 225),
                 (199, 200, 192, 189),
                 (224, 223, 191, 190),
                 (200, 201, 194, 192),
                 (223, 222, 193, 191),
                 (192, 194, 221, 220),
                 (189, 192, 220, 225),
                 (197, 187, 218, 231),
                 (202, 233, 219, 188),
                 (196, 188, 219, 228),
                 (187, 196, 228, 218),
                 (203, 204, 196, 187),
                 (194, 197, 231, 221),
                 (201, 205, 197, 194),
                 (222, 232, 198, 193),
                 (193, 198, 205, 201),
                 (185, 195, 204, 203),
                 (186, 217, 233, 202),
                 (191, 193, 201, 200),
                 (190, 191, 200, 199),
                 (224, 190, 199, 238),
                 (198, 185, 203, 205),
                 (195, 186, 202, 204),
                 (240, 227, 209, 237),
                 (232, 230, 206, 216),
                 (241, 229, 208, 239),
                 (238, 225, 210, 234),
                 (234, 210, 213, 235),
                 (224, 211, 212, 223),
                 (235, 213, 215, 236),
                 (223, 212, 214, 222),
                 (213, 220, 221, 215),
                 (210, 225, 220, 213),
                 (229, 231, 218, 208),
                 (237, 209, 219, 233),
                 (227, 228, 219, 209),
                 (208, 218, 228, 227),
                 (239, 208, 227, 240),
                 (215, 221, 231, 229),
                 (236, 215, 229, 241),
                 (222, 214, 230, 232),
                 (214, 236, 241, 230),
                 (206, 239, 240, 226),
                 (207, 237, 233, 217),
                 (212, 235, 236, 214),
                 (211, 234, 235, 212),
                 (224, 238, 234, 211),
                 (230, 241, 239, 206),
                 (226, 240, 237, 207),
                 (242, 243, 245, 244),
                 (244, 245, 249, 248),
                 (248, 249, 247, 246),
                 (246, 247, 243, 242),
                 (244, 248, 246, 242),
                 (249, 245, 243, 247),
                 (431, 427, 253, 423),
                 (423, 253, 257, 424),
                 (430, 429, 255, 425),
                 (425, 255, 251, 422),
                 (426, 428, 254, 250),
                 (429, 427, 251, 255),
                 (413, 405, 261, 303),
                 (303, 261, 265, 306),
                 (410, 407, 263, 309),
                 (309, 263, 259, 302),
                 (404, 406, 262, 258),
                 (407, 405, 259, 263),
                 (421, 415, 269, 294),
                 (294, 269, 273, 296),
                 (419, 417, 271, 298),
                 (298, 271, 267, 293),
                 (414, 416, 270, 266),
                 (417, 415, 267, 271),
                 (312, 287, 277, 316),
                 (316, 277, 281, 315),
                 (313, 289, 279, 314),
                 (314, 279, 275, 317),
                 (286, 288, 278, 274),
                 (289, 287, 275, 279),
                 (278, 285, 282, 274),
                 (288, 290, 285, 278),
                 (276, 283, 284, 280),
                 (286, 291, 283, 276),
                 (274, 282, 291, 286),
                 (280, 284, 290, 288),
                 (281, 277, 287, 289),
                 (276, 280, 288, 286),
                 (315, 281, 289, 313),
                 (317, 275, 287, 312),
                 (270, 299, 292, 266),
                 (299, 298, 293, 292),
                 (416, 418, 299, 270),
                 (418, 419, 298, 299),
                 (268, 295, 297, 272),
                 (295, 294, 296, 297),
                 (414, 420, 295, 268),
                 (420, 421, 294, 295),
                 (262, 311, 300, 258),
                 (311, 310, 301, 300),
                 (310, 309, 302, 301),
                 (406, 408, 311, 262),
                 (408, 409, 310, 311),
                 (409, 410, 309, 310),
                 (260, 305, 308, 264),
                 (305, 304, 307, 308),
                 (304, 303, 306, 307),
                 (404, 411, 305, 260),
                 (411, 412, 304, 305),
                 (412, 413, 303, 304),
                 (283, 316, 315, 284),
                 (282, 317, 312, 291),
                 (284, 315, 313, 290),
                 (285, 314, 317, 282),
                 (290, 313, 314, 285),
                 (291, 312, 316, 283),
                 (318, 319, 321, 320),
                 (320, 321, 325, 324),
                 (324, 325, 323, 322),
                 (322, 323, 319, 318),
                 (320, 324, 322, 318),
                 (325, 321, 319, 323),
                 (403, 399, 329, 395),
                 (395, 329, 333, 396),
                 (402, 401, 331, 397),
                 (397, 331, 327, 394),
                 (398, 400, 330, 326),
                 (401, 399, 327, 331),
                 (393, 385, 337, 353),
                 (353, 337, 341, 356),
                 (390, 387, 339, 359),
                 (359, 339, 335, 352),
                 (384, 386, 338, 334),
                 (387, 385, 335, 339),
                 (383, 375, 345, 365),
                 (365, 345, 349, 368),
                 (380, 377, 347, 371),
                 (371, 347, 343, 364),
                 (374, 376, 346, 342),
                 (377, 375, 343, 347),
                 (338, 361, 350, 334),
                 (361, 360, 351, 350),
                 (360, 359, 352, 351),
                 (386, 388, 361, 338),
                 (388, 389, 360, 361),
                 (389, 390, 359, 360),
                 (336, 355, 358, 340),
                 (355, 354, 357, 358),
                 (354, 353, 356, 357),
                 (384, 391, 355, 336),
                 (391, 392, 354, 355),
                 (392, 393, 353, 354),
                 (346, 373, 362, 342),
                 (373, 372, 363, 362),
                 (372, 371, 364, 363),
                 (376, 378, 373, 346),
                 (378, 379, 372, 373),
                 (379, 380, 371, 372),
                 (344, 367, 370, 348),
                 (367, 366, 369, 370),
                 (366, 365, 368, 369),
                 (374, 381, 367, 344),
                 (381, 382, 366, 367),
                 (382, 383, 365, 366),
                 (363, 364, 383, 382),
                 (362, 363, 382, 381),
                 (342, 362, 381, 374),
                 (369, 368, 380, 379),
                 (370, 369, 379, 378),
                 (348, 370, 378, 376),
                 (349, 345, 375, 377),
                 (344, 348, 376, 374),
                 (368, 349, 377, 380),
                 (364, 343, 375, 383),
                 (351, 352, 393, 392),
                 (350, 351, 392, 391),
                 (334, 350, 391, 384),
                 (357, 356, 390, 389),
                 (358, 357, 389, 388),
                 (340, 358, 388, 386),
                 (341, 337, 385, 387),
                 (336, 340, 386, 384),
                 (356, 341, 387, 390),
                 (352, 335, 385, 393),
                 (330, 397, 394, 326),
                 (400, 402, 397, 330),
                 (328, 395, 396, 332),
                 (398, 403, 395, 328),
                 (326, 394, 403, 398),
                 (332, 396, 402, 400),
                 (333, 329, 399, 401),
                 (328, 332, 400, 398),
                 (396, 333, 401, 402),
                 (394, 327, 399, 403),
                 (301, 302, 413, 412),
                 (300, 301, 412, 411),
                 (258, 300, 411, 404),
                 (307, 306, 410, 409),
                 (308, 307, 409, 408),
                 (264, 308, 408, 406),
                 (265, 261, 405, 407),
                 (260, 264, 406, 404),
                 (306, 265, 407, 410),
                 (302, 259, 405, 413),
                 (292, 293, 421, 420),
                 (266, 292, 420, 414),
                 (297, 296, 419, 418),
                 (272, 297, 418, 416),
                 (273, 269, 415, 417),
                 (268, 272, 416, 414),
                 (296, 273, 417, 419),
                 (293, 267, 415, 421),
                 (254, 425, 422, 250),
                 (428, 430, 425, 254),
                 (252, 423, 424, 256),
                 (426, 431, 423, 252),
                 (250, 422, 431, 426),
                 (256, 424, 430, 428),
                 (257, 253, 427, 429),
                 (252, 256, 428, 426),
                 (424, 257, 429, 430),
                 (422, 251, 427, 431),
                 (432, 434, 435, 433),
                 (434, 438, 439, 435),
                 (438, 436, 437, 439),
                 (436, 432, 433, 437),
                 (434, 432, 436, 438),
                 (439, 437, 433, 435),
                 (621, 613, 443, 617),
                 (613, 614, 447, 443),
                 (620, 615, 445, 619),
                 (615, 612, 441, 445),
                 (616, 440, 444, 618),
                 (619, 445, 441, 617),
                 (603, 493, 451, 595),
                 (493, 496, 455, 451),
                 (600, 499, 453, 597),
                 (499, 492, 449, 453),
                 (594, 448, 452, 596),
                 (597, 453, 449, 595),
                 (611, 484, 459, 605),
                 (484, 486, 463, 459),
                 (609, 488, 461, 607),
                 (488, 483, 457, 461),
                 (604, 456, 460, 606),
                 (607, 461, 457, 605),
                 (502, 506, 467, 477),
                 (506, 505, 471, 467),
                 (503, 504, 469, 479),
                 (504, 507, 465, 469),
                 (476, 464, 468, 478),
                 (479, 469, 465, 477),
                 (468, 464, 472, 475),
                 (478, 468, 475, 480),
                 (466, 470, 474, 473),
                 (476, 466, 473, 481),
                 (464, 476, 481, 472),
                 (470, 478, 480, 474),
                 (471, 479, 477, 467),
                 (466, 476, 478, 470),
                 (505, 503, 479, 471),
                 (507, 502, 477, 465),
                 (460, 456, 482, 489),
                 (489, 482, 483, 488),
                 (606, 460, 489, 608),
                 (608, 489, 488, 609),
                 (458, 462, 487, 485),
                 (485, 487, 486, 484),
                 (604, 458, 485, 610),
                 (610, 485, 484, 611),
                 (452, 448, 490, 501),
                 (501, 490, 491, 500),
                 (500, 491, 492, 499),
                 (596, 452, 501, 598),
                 (598, 501, 500, 599),
                 (599, 500, 499, 600),
                 (450, 454, 498, 495),
                 (495, 498, 497, 494),
                 (494, 497, 496, 493),
                 (594, 450, 495, 601),
                 (601, 495, 494, 602),
                 (602, 494, 493, 603),
                 (473, 474, 505, 506),
                 (472, 481, 502, 507),
                 (474, 480, 503, 505),
                 (475, 472, 507, 504),
                 (480, 475, 504, 503),
                 (481, 473, 506, 502),
                 (508, 510, 511, 509),
                 (510, 514, 515, 511),
                 (514, 512, 513, 515),
                 (512, 508, 509, 513),
                 (510, 508, 512, 514),
                 (515, 513, 509, 511),
                 (593, 585, 519, 589),
                 (585, 586, 523, 519),
                 (592, 587, 521, 591),
                 (587, 584, 517, 521),
                 (588, 516, 520, 590),
                 (591, 521, 517, 589),
                 (583, 543, 527, 575),
                 (543, 546, 531, 527),
                 (580, 549, 529, 577),
                 (549, 542, 525, 529),
                 (574, 524, 528, 576),
                 (577, 529, 525, 575),
                 (573, 555, 535, 565),
                 (555, 558, 539, 535),
                 (570, 561, 537, 567),
                 (561, 554, 533, 537),
                 (564, 532, 536, 566),
                 (567, 537, 533, 565),
                 (528, 524, 540, 551),
                 (551, 540, 541, 550),
                 (550, 541, 542, 549),
                 (576, 528, 551, 578),
                 (578, 551, 550, 579),
                 (579, 550, 549, 580),
                 (526, 530, 548, 545),
                 (545, 548, 547, 544),
                 (544, 547, 546, 543),
                 (574, 526, 545, 581),
                 (581, 545, 544, 582),
                 (582, 544, 543, 583),
                 (536, 532, 552, 563),
                 (563, 552, 553, 562),
                 (562, 553, 554, 561),
                 (566, 536, 563, 568),
                 (568, 563, 562, 569),
                 (569, 562, 561, 570),
                 (534, 538, 560, 557),
                 (557, 560, 559, 556),
                 (556, 559, 558, 555),
                 (564, 534, 557, 571),
                 (571, 557, 556, 572),
                 (572, 556, 555, 573),
                 (553, 572, 573, 554),
                 (552, 571, 572, 553),
                 (532, 564, 571, 552),
                 (559, 569, 570, 558),
                 (560, 568, 569, 559),
                 (538, 566, 568, 560),
                 (539, 567, 565, 535),
                 (534, 564, 566, 538),
                 (558, 570, 567, 539),
                 (554, 573, 565, 533),
                 (541, 582, 583, 542),
                 (540, 581, 582, 541),
                 (524, 574, 581, 540),
                 (547, 579, 580, 546),
                 (548, 578, 579, 547),
                 (530, 576, 578, 548),
                 (531, 577, 575, 527),
                 (526, 574, 576, 530),
                 (546, 580, 577, 531),
                 (542, 583, 575, 525),
                 (520, 516, 584, 587),
                 (590, 520, 587, 592),
                 (518, 522, 586, 585),
                 (588, 518, 585, 593),
                 (516, 588, 593, 584),
                 (522, 590, 592, 586),
                 (523, 591, 589, 519),
                 (518, 588, 590, 522),
                 (586, 592, 591, 523),
                 (584, 593, 589, 517),
                 (491, 602, 603, 492),
                 (490, 601, 602, 491),
                 (448, 594, 601, 490),
                 (497, 599, 600, 496),
                 (498, 598, 599, 497),
                 (454, 596, 598, 498),
                 (455, 597, 595, 451),
                 (450, 594, 596, 454),
                 (496, 600, 597, 455),
                 (492, 603, 595, 449),
                 (482, 610, 611, 483),
                 (456, 604, 610, 482),
                 (487, 608, 609, 486),
                 (462, 606, 608, 487),
                 (463, 607, 605, 459),
                 (458, 604, 606, 462),
                 (486, 609, 607, 463),
                 (483, 611, 605, 457),
                 (444, 440, 612, 615),
                 (618, 444, 615, 620),
                 (442, 446, 614, 613),
                 (616, 442, 613, 621),
                 (440, 616, 621, 612),
                 (446, 618, 620, 614),
                 (447, 619, 617, 443),
                 (442, 616, 618, 446),
                 (614, 620, 619, 447),
                 (612, 621, 617, 441),
                 (639, 631, 625, 635),
                 (635, 625, 629, 636),
                 (638, 633, 627, 637),
                 (637, 627, 623, 634),
                 (630, 632, 626, 622),
                 (633, 631, 623, 627),
                 (629, 625, 631, 633),
                 (624, 628, 632, 630),
                 (636, 629, 633, 638),
                 (634, 623, 631, 639),
                 (622, 634, 639, 630),
                 (628, 636, 638, 632),
                 (626, 637, 634, 622),
                 (632, 638, 637, 626),
                 (624, 635, 636, 628),
                 (630, 639, 635, 624),
                 (657, 653, 643, 649),
                 (653, 654, 647, 643),
                 (656, 655, 645, 651),
                 (655, 652, 641, 645),
                 (648, 640, 644, 650),
                 (651, 645, 641, 649),
                 (647, 651, 649, 643),
                 (642, 648, 650, 646),
                 (654, 656, 651, 647),
                 (652, 657, 649, 641),
                 (640, 648, 657, 652),
                 (646, 650, 656, 654),
                 (644, 640, 652, 655),
                 (650, 644, 655, 656),
                 (642, 646, 654, 653),
                 (648, 642, 653, 657))

        scene = bpy.context.scene
        me = bpy.data.meshes.new("Horse_GEO")
        me.from_pydata(verts, [], faces)
        ob = bpy.data.objects.new("Horse_GEO", me)
        scene.collection.objects.link(ob)





#=============================================
# Create "Horse" Metarig
#=============================================



        # Check Rigify in preferences

        disable_Rigify = bpy.ops.preferences.addon_disable(module="rigify")

        if disable_Rigify:
            bpy.ops.preferences.addon_enable(module="rigify")

        else:
            pass
                    
   
   
  
        if bpy.context.mode == 'OBJECT':
            
            # Create single bone / go to Edot Mode / select and delete bone
            bpy.ops.object.armature_add(enter_editmode=0, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1)) 
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)
            bpy.ops.armature.select_all(action='SELECT')
            bpy.ops.armature.delete()    
         
             
        else:
            bpy.ops.object.mode_set(mode='EDIT', toggle=False)




        # Active object
        ob = bpy.context.object

        # Rig Name 
        if ob.type == 'ARMATURE':
            ob.name = 'horse_metarig'    
            
            
                    
        # CREATE SAMPLE    
          

        arm = bpy.data.objects[ob.name].data


        for i in range(6):
            arm.rigify_colors.add()

        arm.rigify_colors[0].name = "Root"
        arm.rigify_colors[0].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[0].normal = Color((0.4352940022945404, 0.18431399762630463, 0.4156860113143921))
        arm.rigify_colors[0].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[0].standard_colors_lock = True
        arm.rigify_colors[1].name = "IK"
        arm.rigify_colors[1].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[1].normal = Color((0.6039220094680786, 0.0, 0.0))
        arm.rigify_colors[1].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[1].standard_colors_lock = True
        arm.rigify_colors[2].name = "Special"
        arm.rigify_colors[2].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[2].normal = Color((0.9568629860877991, 0.7882350087165833, 0.04705899953842163))
        arm.rigify_colors[2].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[2].standard_colors_lock = True
        arm.rigify_colors[3].name = "Tweak"
        arm.rigify_colors[3].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[3].normal = Color((0.03921600058674812, 0.21176500618457794, 0.5803920030593872))
        arm.rigify_colors[3].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[3].standard_colors_lock = True
        arm.rigify_colors[4].name = "FK"
        arm.rigify_colors[4].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[4].normal = Color((0.11764699965715408, 0.5686269998550415, 0.035294000059366226))
        arm.rigify_colors[4].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[4].standard_colors_lock = True
        arm.rigify_colors[5].name = "Extra"
        arm.rigify_colors[5].active = Color((0.5490000247955322, 1.0, 1.0))
        arm.rigify_colors[5].normal = Color((0.9686279892921448, 0.2509799897670746, 0.09411799907684326))
        arm.rigify_colors[5].select = Color((0.3140000104904175, 0.7839999794960022, 1.0))
        arm.rigify_colors[5].standard_colors_lock = True

        for i in range(29):
            arm.rigify_layers.add()

        arm.rigify_layers[0].name = "Face"
        arm.rigify_layers[0].row = 1
        arm.rigify_layers[0].selset = False
        arm.rigify_layers[0].group = 5
        arm.rigify_layers[1].name = "Face (Primary)"
        arm.rigify_layers[1].row = 2
        arm.rigify_layers[1].selset = False
        arm.rigify_layers[1].group = 4
        arm.rigify_layers[2].name = " "
        arm.rigify_layers[2].row = 3
        arm.rigify_layers[2].selset = False
        arm.rigify_layers[2].group = 0
        arm.rigify_layers[3].name = "Spine"
        arm.rigify_layers[3].row = 4
        arm.rigify_layers[3].selset = False
        arm.rigify_layers[3].group = 3
        arm.rigify_layers[4].name = "Spine (Tweak)"
        arm.rigify_layers[4].row = 5
        arm.rigify_layers[4].selset = False
        arm.rigify_layers[4].group = 4
        arm.rigify_layers[5].name = " "
        arm.rigify_layers[5].row = 1
        arm.rigify_layers[5].selset = False
        arm.rigify_layers[5].group = 0
        arm.rigify_layers[6].name = " "
        arm.rigify_layers[6].row = 1
        arm.rigify_layers[6].selset = False
        arm.rigify_layers[6].group = 0
        arm.rigify_layers[7].name = "Arm.L (IK)"
        arm.rigify_layers[7].row = 7
        arm.rigify_layers[7].selset = False
        arm.rigify_layers[7].group = 2
        arm.rigify_layers[8].name = "Arm.L (FK)"
        arm.rigify_layers[8].row = 8
        arm.rigify_layers[8].selset = False
        arm.rigify_layers[8].group = 5
        arm.rigify_layers[9].name = "Arm.L (Tweak)"
        arm.rigify_layers[9].row = 9
        arm.rigify_layers[9].selset = False
        arm.rigify_layers[9].group = 4
        arm.rigify_layers[10].name = "Arm.R (IK)"
        arm.rigify_layers[10].row = 7
        arm.rigify_layers[10].selset = False
        arm.rigify_layers[10].group = 2
        arm.rigify_layers[11].name = "Arm.R (FK)"
        arm.rigify_layers[11].row = 8
        arm.rigify_layers[11].selset = False
        arm.rigify_layers[11].group = 5
        arm.rigify_layers[12].name = "Arm.R (Tweak)"
        arm.rigify_layers[12].row = 9
        arm.rigify_layers[12].selset = False
        arm.rigify_layers[12].group = 4
        arm.rigify_layers[13].name = "Leg.L (IK)"
        arm.rigify_layers[13].row = 10
        arm.rigify_layers[13].selset = False
        arm.rigify_layers[13].group = 2
        arm.rigify_layers[14].name = "Leg.L (FK)"
        arm.rigify_layers[14].row = 11
        arm.rigify_layers[14].selset = False
        arm.rigify_layers[14].group = 5
        arm.rigify_layers[15].name = "Leg.L (Tweak)"
        arm.rigify_layers[15].row = 12
        arm.rigify_layers[15].selset = False
        arm.rigify_layers[15].group = 4
        arm.rigify_layers[16].name = "Leg.R (IK)"
        arm.rigify_layers[16].row = 10
        arm.rigify_layers[16].selset = False
        arm.rigify_layers[16].group = 2
        arm.rigify_layers[17].name = "Leg.R (FK)"
        arm.rigify_layers[17].row = 11
        arm.rigify_layers[17].selset = False
        arm.rigify_layers[17].group = 5
        arm.rigify_layers[18].name = "Leg.R (Tweak)"
        arm.rigify_layers[18].row = 12
        arm.rigify_layers[18].selset = False
        arm.rigify_layers[18].group = 4
        arm.rigify_layers[19].name = "Tail"
        arm.rigify_layers[19].row = 13
        arm.rigify_layers[19].selset = False
        arm.rigify_layers[19].group = 6
        arm.rigify_layers[20].name = " "
        arm.rigify_layers[20].row = 1
        arm.rigify_layers[20].selset = False
        arm.rigify_layers[20].group = 4
        arm.rigify_layers[21].name = "Hair"
        arm.rigify_layers[21].row = 14
        arm.rigify_layers[21].selset = False
        arm.rigify_layers[21].group = 6
        arm.rigify_layers[22].name = " "
        arm.rigify_layers[22].row = 1
        arm.rigify_layers[22].selset = False
        arm.rigify_layers[22].group = 0
        arm.rigify_layers[23].name = " "
        arm.rigify_layers[23].row = 1
        arm.rigify_layers[23].selset = False
        arm.rigify_layers[23].group = 0
        arm.rigify_layers[24].name = " "
        arm.rigify_layers[24].row = 1
        arm.rigify_layers[24].selset = False
        arm.rigify_layers[24].group = 0
        arm.rigify_layers[25].name = " "
        arm.rigify_layers[25].row = 1
        arm.rigify_layers[25].selset = False
        arm.rigify_layers[25].group = 0
        arm.rigify_layers[26].name = " "
        arm.rigify_layers[26].row = 1
        arm.rigify_layers[26].selset = False
        arm.rigify_layers[26].group = 0
        arm.rigify_layers[27].name = " "
        arm.rigify_layers[27].row = 1
        arm.rigify_layers[27].selset = False
        arm.rigify_layers[27].group = 0
        arm.rigify_layers[28].name = "Root"
        arm.rigify_layers[28].row = 14
        arm.rigify_layers[28].selset = False
        arm.rigify_layers[28].group = 1

        bones = {}


        bone = arm.edit_bones.new('spine.001')
        bone.head = 0.0000, 0.5403, 1.1974
        bone.tail = 0.0000, 0.3066, 1.2815
        bone.roll = -0.0000
        bone.use_connect = False
        bones['spine.001'] = bone.name
        bone = arm.edit_bones.new('tail.001')
        bone.head = 0.0000, 0.5947, 1.3219
        bone.tail = 0.0000, 0.7229, 1.2657
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.001']]
        bones['tail.001'] = bone.name
        bone = arm.edit_bones.new('spine.002')
        bone.head = 0.0000, 0.3066, 1.2815
        bone.tail = 0.0000, 0.1602, 1.2573
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.001']]
        bones['spine.002'] = bone.name
        bone = arm.edit_bones.new('tail.002')
        bone.head = 0.0000, 0.7229, 1.2657
        bone.tail = 0.0000, 0.8126, 1.1582
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.001']]
        bones['tail.002'] = bone.name
        bone = arm.edit_bones.new('spine.003')
        bone.head = 0.0000, 0.1602, 1.2573
        bone.tail = 0.0000, -0.0226, 1.2225
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['spine.003'] = bone.name
        bone = arm.edit_bones.new('pelvis.L')
        bone.head = 0.0000, 0.5403, 1.1974
        bone.tail = 0.0980, 0.3514, 1.3329
        bone.roll = 0.3258
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['pelvis.L'] = bone.name
        bone = arm.edit_bones.new('pelvis.R')
        bone.head = 0.0000, 0.5403, 1.1974
        bone.tail = -0.0980, 0.3514, 1.3329
        bone.roll = -0.3258
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['pelvis.R'] = bone.name
        bone = arm.edit_bones.new('hip')
        bone.head = 0.0000, 0.5403, 1.1974
        bone.tail = 0.0000, 0.4636, 1.0212
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.002']]
        bones['hip'] = bone.name
        bone = arm.edit_bones.new('tail.003')
        bone.head = 0.0000, 0.8126, 1.1582
        bone.tail = 0.0000, 0.8662, 1.0289
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.002']]
        bones['tail.003'] = bone.name
        bone = arm.edit_bones.new('spine.004')
        bone.head = 0.0000, -0.0226, 1.2225
        bone.tail = 0.0000, -0.2976, 1.2194
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['spine.004'] = bone.name
        bone = arm.edit_bones.new('abdomen')
        bone.head = 0.0000, 0.1503, 1.1819
        bone.tail = 0.0000, 0.1869, 0.9629
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.003']]
        bones['abdomen'] = bone.name
        bone = arm.edit_bones.new('thigh.L')
        bone.head = 0.1605, 0.4663, 1.1109
        bone.tail = 0.1616, 0.4541, 0.8213
        bone.roll = 3.1369
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['pelvis.L']]
        bones['thigh.L'] = bone.name
        bone = arm.edit_bones.new('thigh.R')
        bone.head = -0.1605, 0.4663, 1.1109
        bone.tail = -0.1616, 0.4541, 0.8213
        bone.roll = -3.1369
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['pelvis.R']]
        bones['thigh.R'] = bone.name
        bone = arm.edit_bones.new('tail.004')
        bone.head = 0.0000, 0.8662, 1.0289
        bone.tail = 0.0000, 0.8949, 0.8919
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.003']]
        bones['tail.004'] = bone.name
        bone = arm.edit_bones.new('spine.005')
        bone.head = 0.0000, -0.2976, 1.2194
        bone.tail = 0.0000, -0.4757, 1.2471
        bone.roll = 0.0001
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.004']]
        bones['spine.005'] = bone.name
        bone = arm.edit_bones.new('lower_leg.L')
        bone.head = 0.1616, 0.4541, 0.8213
        bone.tail = 0.1616, 0.5796, 0.5283
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.L']]
        bones['lower_leg.L'] = bone.name
        bone = arm.edit_bones.new('lower_leg.R')
        bone.head = -0.1616, 0.4541, 0.8213
        bone.tail = -0.1616, 0.5796, 0.5283
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['thigh.R']]
        bones['lower_leg.R'] = bone.name
        bone = arm.edit_bones.new('tail.005')
        bone.head = 0.0000, 0.8949, 0.8919
        bone.tail = 0.0000, 0.9309, 0.7565
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['tail.004']]
        bones['tail.005'] = bone.name
        bone = arm.edit_bones.new('spine.006')
        bone.head = 0.0000, -0.4757, 1.2471
        bone.tail = 0.0000, -0.5908, 1.2785
        bone.roll = 0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['spine.006'] = bone.name
        bone = arm.edit_bones.new('shoulder.L')
        bone.head = 0.0822, -0.4983, 1.4009
        bone.tail = 0.1346, -0.6484, 1.0838
        bone.roll = -0.1890
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['shoulder.L'] = bone.name
        bone = arm.edit_bones.new('breast.L')
        bone.head = 0.0719, -0.4916, 1.1731
        bone.tail = 0.0719, -0.6919, 0.9810
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['breast.L'] = bone.name
        bone = arm.edit_bones.new('shoulder.R')
        bone.head = -0.0822, -0.4983, 1.4009
        bone.tail = -0.1346, -0.6484, 1.0838
        bone.roll = 0.1890
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['shoulder.R'] = bone.name
        bone = arm.edit_bones.new('breast.R')
        bone.head = -0.0719, -0.4916, 1.1731
        bone.tail = -0.0719, -0.6919, 0.9810
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['breast.R'] = bone.name
        bone = arm.edit_bones.new('chest')
        bone.head = 0.0000, -0.2180, 1.2173
        bone.tail = 0.0000, -0.2239, 0.8605
        bone.roll = 0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.005']]
        bones['chest'] = bone.name
        bone = arm.edit_bones.new('hind_foot.L')
        bone.head = 0.1616, 0.5796, 0.5283
        bone.tail = 0.1616, 0.6062, 0.1871
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['lower_leg.L']]
        bones['hind_foot.L'] = bone.name
        bone = arm.edit_bones.new('hind_foot.R')
        bone.head = -0.1616, 0.5796, 0.5283
        bone.tail = -0.1616, 0.6062, 0.1871
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['lower_leg.R']]
        bones['hind_foot.R'] = bone.name
        bone = arm.edit_bones.new('neck.001')
        bone.head = 0.0000, -0.5908, 1.2785
        bone.tail = 0.0000, -0.6699, 1.3504
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['spine.006']]
        bones['neck.001'] = bone.name
        bone = arm.edit_bones.new('upper_arm.L')
        bone.head = 0.1539, -0.6429, 1.0469
        bone.tail = 0.1558, -0.5644, 0.8280
        bone.roll = 3.1359
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.L']]
        bones['upper_arm.L'] = bone.name
        bone = arm.edit_bones.new('upper_arm.R')
        bone.head = -0.1539, -0.6429, 1.0469
        bone.tail = -0.1558, -0.5644, 0.8280
        bone.roll = -3.1359
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['shoulder.R']]
        bones['upper_arm.R'] = bone.name
        bone = arm.edit_bones.new('r_toe.L')
        bone.head = 0.1616, 0.6062, 0.1871
        bone.tail = 0.1616, 0.5767, 0.0861
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['hind_foot.L']]
        bones['r_toe.L'] = bone.name
        bone = arm.edit_bones.new('r_toe.R')
        bone.head = -0.1616, 0.6062, 0.1871
        bone.tail = -0.1616, 0.5767, 0.0861
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['hind_foot.R']]
        bones['r_toe.R'] = bone.name
        bone = arm.edit_bones.new('neck.002')
        bone.head = 0.0000, -0.6699, 1.3504
        bone.tail = 0.0000, -0.7487, 1.4479
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['neck.001']]
        bones['neck.002'] = bone.name
        bone = arm.edit_bones.new('forearm.L')
        bone.head = 0.1558, -0.5644, 0.8280
        bone.tail = 0.1558, -0.5499, 0.4490
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['upper_arm.L']]
        bones['forearm.L'] = bone.name
        bone = arm.edit_bones.new('forearm.R')
        bone.head = -0.1558, -0.5644, 0.8280
        bone.tail = -0.1558, -0.5499, 0.4490
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['upper_arm.R']]
        bones['forearm.R'] = bone.name
        bone = arm.edit_bones.new('r_hoof.L')
        bone.head = 0.1616, 0.5767, 0.0861
        bone.tail = 0.1616, 0.5170, 0.0007
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['r_toe.L']]
        bones['r_hoof.L'] = bone.name
        bone = arm.edit_bones.new('r_hoof.R')
        bone.head = -0.1616, 0.5767, 0.0861
        bone.tail = -0.1616, 0.5170, 0.0007
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['r_toe.R']]
        bones['r_hoof.R'] = bone.name
        bone = arm.edit_bones.new('neck.003')
        bone.head = 0.0000, -0.7487, 1.4479
        bone.tail = 0.0000, -0.8447, 1.5479
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['neck.002']]
        bones['neck.003'] = bone.name
        bone = arm.edit_bones.new('forefoot.L')
        bone.head = 0.1558, -0.5499, 0.4490
        bone.tail = 0.1539, -0.5221, 0.1579
        bone.roll = -3.1357
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forearm.L']]
        bones['forefoot.L'] = bone.name
        bone = arm.edit_bones.new('forefoot.R')
        bone.head = -0.1558, -0.5499, 0.4490
        bone.tail = -0.1539, -0.5221, 0.1579
        bone.roll = 3.1357
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forearm.R']]
        bones['forefoot.R'] = bone.name
        bone = arm.edit_bones.new('neck.004')
        bone.head = 0.0000, -0.8447, 1.5479
        bone.tail = 0.0000, -0.9814, 1.6223
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['neck.003']]
        bones['neck.004'] = bone.name
        bone = arm.edit_bones.new('f_toe.L')
        bone.head = 0.1539, -0.5221, 0.1579
        bone.tail = 0.1539, -0.5716, 0.0672
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forefoot.L']]
        bones['f_toe.L'] = bone.name
        bone = arm.edit_bones.new('f_toe.R')
        bone.head = -0.1539, -0.5221, 0.1579
        bone.tail = -0.1539, -0.5716, 0.0672
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['forefoot.R']]
        bones['f_toe.R'] = bone.name
        bone = arm.edit_bones.new('head')
        bone.head = 0.0000, -0.9814, 1.6223
        bone.tail = 0.0000, -1.1679, 1.6885
        bone.roll = -0.0000
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['neck.004']]
        bones['head'] = bone.name
        bone = arm.edit_bones.new('f_hoof.L')
        bone.head = 0.1539, -0.5716, 0.0672
        bone.tail = 0.1539, -0.6251, 0.0007
        bone.roll = -3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['f_toe.L']]
        bones['f_hoof.L'] = bone.name
        bone = arm.edit_bones.new('f_hoof.R')
        bone.head = -0.1539, -0.5716, 0.0672
        bone.tail = -0.1539, -0.6251, 0.0007
        bone.roll = 3.1416
        bone.use_connect = True
        bone.parent = arm.edit_bones[bones['f_toe.R']]
        bones['f_hoof.R'] = bone.name
        bone = arm.edit_bones.new('skull')
        bone.head = 0.0000, -1.0585, 1.5732
        bone.tail = 0.0000, -1.3560, 1.3327
        bone.roll = -0.0000
        bone.use_connect = False
        bone.parent = arm.edit_bones[bones['head']]
        bones['skull'] = bone.name


        obj = bpy.context.object 

        bpy.ops.object.mode_set(mode='OBJECT')
        pbone = obj.pose.bones[bones['spine.001']]
        pbone.rigify_type = 'spines.basic_spine'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.pivot_pos = 2
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['tail.001']]
        pbone.rigify_type = 'spines.basic_tail'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.copy_rotation_axes = [True, False, True]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.connect_chain = False
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['spine.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['tail.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.003']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['pelvis.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['pelvis.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['hip']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['tail.003']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.004']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['abdomen']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['thigh.L']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.segments = 2
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.bbones = 10
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers_extra = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers_extra = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['thigh.R']]
        pbone.rigify_type = 'limbs.rear_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.segments = 2
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.bbones = 10
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers_extra = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers_extra = True
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['tail.004']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.005']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['lower_leg.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['lower_leg.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['tail.005']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['spine.006']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shoulder.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['breast.L']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['shoulder.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['breast.R']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['chest']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['hind_foot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['hind_foot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['neck.001']]
        pbone.rigify_type = 'spines.super_head'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.connect_chain = True
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['upper_arm.L']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.front_paw_heel_influence = 0.6000000238418579
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['upper_arm.R']]
        pbone.rigify_type = 'limbs.front_paw'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.limb_type = "paw"
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.fk_layers = [False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.front_paw_heel_influence = 0.6000000238418579
        except AttributeError:
            pass
        pbone = obj.pose.bones[bones['r_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['r_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['neck.002']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forearm.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forearm.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['r_hoof.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['r_hoof.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['neck.003']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forefoot.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['forefoot.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['neck.004']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_toe.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_toe.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['head']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_hoof.L']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['f_hoof.R']]
        pbone.rigify_type = ''
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        pbone = obj.pose.bones[bones['skull']]
        pbone.rigify_type = 'basic.super_copy'
        pbone.lock_location = (False, False, False)
        pbone.lock_rotation = (False, False, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)
        pbone.rotation_mode = 'QUATERNION'
        pbone.bone.layers = [False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        try:
            pbone.rigify_parameters.make_widget = False
        except AttributeError:
            pass
        try:
            pbone.rigify_parameters.make_control = False
        except AttributeError:
            pass

        bpy.ops.object.mode_set(mode='EDIT')
        for bone in arm.edit_bones:
            bone.select = False
            bone.select_head = False
            bone.select_tail = False
        for b in bones:
            bone = arm.edit_bones[bones[b]]
            bone.select = True
            bone.select_head = True
            bone.select_tail = True
            bone.bbone_x = bone.bbone_z = bone.length * 0.05
            arm.edit_bones.active = bone

        arm.layers = [(x in [3, 4, 7, 10, 13, 16, 19]) for x in range(32)]




   
        bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
        bpy.ops.pose.rigify_generate()


        # Rename Existing Armature with name 'Rig'
        for arm in bpy.context.selected_objects:
            if arm.type == 'ARMATURE' and arm.name.startswith('rig'):
                arm.name = 'horse_rig'    
        

        # Rename Existing Rigify UI Script 'rig_ui.py'
        for t in bpy.data.texts:
            if t.name == 'rig_ui.py':
                t.name = 'rig_ui_horse.py'

             

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Horse_GEO'):
                o.select_set(True)
            else:
                o.select_set(False)


     
        
        # Delete Metarig
        obj = bpy.data.objects['horse_metarig']
        bpy.data.objects.remove(obj) 
        
        
        # Select layer with bones
        # bpy.context.object.data.layers[29] = True

        # Go to Pose Mode
        bpy.ops.object.posemode_toggle()

        
        
        # 1. Select Horse GEO / 2. Select Horse metarig and parent(auto)
         
        bpy.data.objects["Horse_GEO"].select_set(True)
        bpy.data.objects["horse_rig"].select_set(True)

        bpy.ops.object.parent_set(type='ARMATURE_AUTO')

              
        # Arms/Legs FK Layers
        bpy.context.object.data.layers[8] = False
        bpy.context.object.data.layers[11] = False       
        bpy.context.object.data.layers[14] = False
        bpy.context.object.data.layers[17] = False


        # View - Frame Selected
        pose_bones = bpy.context.object.pose.bones
        for pb in pose_bones:
            if pb.name.startswith('root'):
                pb.bone.select = 1
                bpy.ops.view3d.view_selected(use_all_regions=0)
                pb.bone.select = 0



#===================================
# Create "Horse" Material
#===================================

        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Horse_GEO'):
                o.select_set(True)
                bpy.context.view_layer.objects.active = o
            else:
                o.select_set(False)


        ob = bpy.context.active_object

        # Get material
        mat = bpy.data.materials.get("Horse_Mat")
        if mat is None:
            # create material
            mat = bpy.data.materials.new(name="Horse_Mat")

        # Assign Material to object
        if ob.data.materials:
            # assign to 1st material slot
            ob.data.materials[0] = mat
        else:
            # no slots
            ob.data.materials.append(mat)

        
        bpy.context.object.active_material.diffuse_color = (0.83, 0.28, 0.096, 1)
        # bpy.context.object.active_material.diffuse_color = (0.83, 0.21, 0.062, 1)



#===================================
# End - Create "Horse" Material
#===================================





        for o in bpy.context.scene.objects:
            if o.type == 'MESH' and o.name.startswith('Horse_GEO'):

                o.select_set(False)

 
        bpy.context.scene.tool_settings.lock_object_mode = False


        return {'FINISHED'}



#=====================================================
#     END  - HORSE RIG - RIGIFY ZOO
#=====================================================

                



classes = [OBJECT_OT_horse_rigify_zoo_ra]



def register():
    for cls in classes:
        bpy.utils.register_class(cls)



def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)




if __name__ == "__main__":
    register()





           
